"filename","line_number","column_number","type","message","line","linter"
"R/cb_class.R",84,8,"style","There should be a space before an opening curly brace.","  }else{","brace_linter"
"R/cb_cohort_extract.R",109,67,"style","Use TRUE instead of the symbol T.","                  body = jsonlite::toJSON(req_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_cohort_extract.R",129,71,"style","Use TRUE instead of the symbol T.","                      body = jsonlite::toJSON(req_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_cohort_extract.R",197,8,"style","There should be a space before an opening curly brace.","  }else{","brace_linter"
"R/cb_cohort_extract.R",213,35,"style","Use TRUE instead of the symbol T.","                    auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_cohorts_list.R",39,48,"style","Use TRUE instead of the symbol T.","  res <- httr::content(r, simplifyDataFrame = T)","T_and_F_symbol_linter"
"R/cb_filter_apply.R",59,24,"warning","Conditional expressions require scalar logical operators (&& and ||)","    starting_depth > 1 &","vector_logic_linter"
"R/cb_filter_apply.R",77,20,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (keep_query & !identical(cohort@query, list())) {","vector_logic_linter"
"R/cb_filter_apply.R",81,3,"style","`else` should come on the same line as the previous `}`.","  else if (keep_query) {","brace_linter"
"R/cb_filter_apply.R",96,26,"warning","Conditional expressions require scalar logical operators (&& and ||)","    !is.null(x$operator) &","vector_logic_linter"
"R/cb_filter_apply.R",171,64,"style","Use TRUE instead of the symbol T.","                 body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_apply.R",192,80,"style","Use FALSE instead of the symbol F.","  no_participants <- cb_participant_count(cohort, query = query, keep_query = F)","T_and_F_symbol_linter"
"R/cb_filter_apply.R",212,64,"style","Use TRUE instead of the symbol T.","                 body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_explore.R",95,67,"style","Use TRUE instead of the symbol T.","                  body = jsonlite::toJSON(req_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_explore.R",114,16,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (iter_all & paged) {","vector_logic_linter"
"R/cb_filter_explore.R",122,71,"style","Use TRUE instead of the symbol T.","                      body = jsonlite::toJSON(req_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_explore.R",149,35,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (length(item$children) > 0 & depth < max_depth) {","vector_logic_linter"
"R/cb_filter_explore.R",224,65,"style","Use TRUE instead of the symbol T.","                  body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_explore.R",328,65,"style","Use TRUE instead of the symbol T.","                  body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_filter_explore.R",346,67,"style","Use TRUE instead of the symbol T.","    r_body <- jsonlite::toJSON(list(query = query), auto_unbox = T)","T_and_F_symbol_linter"
"R/cb_plots.R",118,12,"style","There should be a space before an opening curly brace.","      }else{","brace_linter"
"R/cb_set_columns.R",77,64,"style","Use TRUE instead of the symbol T.","                 body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"R/cb_set_columns.R",112,64,"style","Use TRUE instead of the symbol T.","                 body = jsonlite::toJSON(r_body, auto_unbox = T),","T_and_F_symbol_linter"
"tests/testthat/helper.R",6,5,"style","Missing terminal newline.","# })","trailing_blank_lines_linter"
