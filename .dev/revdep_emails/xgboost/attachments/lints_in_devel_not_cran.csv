"filename","line_number","column_number","type","message","line","linter"
"demo/basic_walkthrough.R",6,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/basic_walkthrough.R",7,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/basic_walkthrough.R",10,81,"style","Lines should not be more than 80 characters.","# the loaded data is stored in sparseMatrix, and label is a numeric vector in {0,1}","line_length_linter"
"demo/basic_walkthrough.R",16,81,"style","Lines should not be more than 80 characters.","# note: we are putting in sparse matrix here, xgboost naturally handles sparse input","line_length_linter"
"demo/basic_walkthrough.R",17,81,"style","Lines should not be more than 80 characters.","# use sparse matrix when your feature is sparse(e.g. when you are using one-hot encoding vector)","line_length_linter"
"demo/basic_walkthrough.R",19,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = train$data, label = train$label, max_depth = 2, eta = 1, nrounds = 2,","line_length_linter"
"demo/basic_walkthrough.R",23,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = as.matrix(train$data), label = train$label, max_depth = 2, eta = 1, nrounds = 2,","line_length_linter"
"demo/basic_walkthrough.R",26,81,"style","Lines should not be more than 80 characters.","# you can also put in xgb.DMatrix object, which stores label, data and other meta datas needed for advanced features","line_length_linter"
"demo/basic_walkthrough.R",44,81,"style","Lines should not be more than 80 characters.","# since we do not have this file with us, the following line is just for illustration","line_length_linter"
"demo/basic_walkthrough.R",45,3,"style","Commented code should be removed.","# bst <- xgboost(data = 'agaricus.train.svm', max_depth = 2, eta = 1, nrounds = 2,objective = ""binary:logistic"")","commented_code_linter"
"demo/basic_walkthrough.R",45,81,"style","Lines should not be more than 80 characters.","# bst <- xgboost(data = 'agaricus.train.svm', max_depth = 2, eta = 1, nrounds = 2,objective = ""binary:logistic"")","line_length_linter"
"demo/basic_walkthrough.R",81,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data = dtrain, max_depth = 2, eta = 1, nrounds = 2, watchlist = watchlist,","line_length_linter"
"demo/basic_walkthrough.R",85,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data = dtrain, max_depth = 2, eta = 1, nrounds = 2, watchlist = watchlist,","line_length_linter"
"demo/basic_walkthrough.R",93,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data = dtrain2, max_depth = 2, eta = 1, nrounds = 2, watchlist = watchlist,","line_length_linter"
"demo/basic_walkthrough.R",102,35,"style","Only use double-quotes.","dump_path <- file.path(tempdir(), 'dump.raw.txt')","single_quotes_linter"
"demo/boost_from_prediction.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/boost_from_prediction.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/boost_from_prediction.R",12,7,"style","Only use double-quotes.","print('start running example to start from a initial prediction')","single_quotes_linter"
"demo/boost_from_prediction.R",14,64,"style","Only use double-quotes.","param <- list(max_depth = 2, eta = 1, nthread = 2, objective = 'binary:logistic')","single_quotes_linter"
"demo/boost_from_prediction.R",14,81,"style","Lines should not be more than 80 characters.","param <- list(max_depth = 2, eta = 1, nthread = 2, objective = 'binary:logistic')","line_length_linter"
"demo/boost_from_prediction.R",16,81,"style","Lines should not be more than 80 characters.","# Note: we need the margin value instead of transformed prediction in set_base_margin","line_length_linter"
"demo/boost_from_prediction.R",17,81,"style","Lines should not be more than 80 characters.","# do predict with output_margin=TRUE, will always give you margin values before logistic transformation","line_length_linter"
"demo/boost_from_prediction.R",25,7,"style","Only use double-quotes.","print('this is result of boost from initial prediction')","single_quotes_linter"
"demo/boost_from_prediction.R",26,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(params = param, data = dtrain, nrounds = 1, watchlist = watchlist)","line_length_linter"
"demo/caret_wrapper.R",11,81,"style","Lines should not be more than 80 characters.","# Create a copy of the dataset with data.table package (data.table is 100% compliant with R dataframe but its syntax is a lot more consistent and its performance are really good).","line_length_linter"
"demo/caret_wrapper.R",14,81,"style","Lines should not be more than 80 characters.","# Let's add some new categorical features to see if it helps. Of course these feature are highly correlated to the Age feature. Usually it's not a good thing in ML, but Tree algorithms (including boosted trees) are able to select the best features, even in case of highly correlated features.","line_length_linter"
"demo/caret_wrapper.R",15,81,"style","Lines should not be more than 80 characters.","# For the first feature we create groups of age by rounding the real age. Note that we transform it to factor (categorical data) so the algorithm treat them as independant values.","line_length_linter"
"demo/caret_wrapper.R",18,81,"style","Lines should not be more than 80 characters.","# Here is an even stronger simplification of the real age with an arbitrary split at 30 years old. I choose this value based on nothing. We will see later if simplifying the information based on arbitrary values is a good strategy (I am sure you already have an idea of how well it will work!).","line_length_linter"
"demo/caret_wrapper.R",21,81,"style","Lines should not be more than 80 characters.","# We remove ID as there is nothing to learn from this feature (it will just add some noise as the dataset is small).","line_length_linter"
"demo/caret_wrapper.R",26,81,"style","Lines should not be more than 80 characters.","# Here we use 10-fold cross-validation, repeating twice, and using random search for tuning hyper-parameters.","line_length_linter"
"demo/caret_wrapper.R",27,1,"style","Variable and function name style should be snake_case or symbols.","fitControl <- trainControl(method = ""repeatedcv"", number = 10, repeats = 2, search = ""random"")","object_name_linter"
"demo/caret_wrapper.R",27,81,"style","Lines should not be more than 80 characters.","fitControl <- trainControl(method = ""repeatedcv"", number = 10, repeats = 2, search = ""random"")","line_length_linter"
"demo/caret_wrapper.R",29,32,"style","Put spaces around all infix operators.","model <- train(factor(Improved)~., data = df, method = ""xgbTree"", trControl = fitControl)","infix_spaces_linter"
"demo/caret_wrapper.R",29,81,"style","Lines should not be more than 80 characters.","model <- train(factor(Improved)~., data = df, method = ""xgbTree"", trControl = fitControl)","line_length_linter"
"demo/caret_wrapper.R",31,81,"style","Lines should not be more than 80 characters.","# Instead of tree for our boosters, you can also fit a linear regression or logistic regression model using xgbLinear","line_length_linter"
"demo/caret_wrapper.R",32,3,"style","Commented code should be removed.","# model <- train(factor(Improved)~., data = df, method = ""xgbLinear"", trControl = fitControl)","commented_code_linter"
"demo/caret_wrapper.R",32,81,"style","Lines should not be more than 80 characters.","# model <- train(factor(Improved)~., data = df, method = ""xgbLinear"", trControl = fitControl)","line_length_linter"
"demo/create_sparse_matrix.R",5,20,"style","Only use double-quotes.","  install.packages('vcd') #Available in CRAN. Used for its dataset with categorical values.","single_quotes_linter"
"demo/create_sparse_matrix.R",5,81,"style","Lines should not be more than 80 characters.","  install.packages('vcd') #Available in CRAN. Used for its dataset with categorical values.","line_length_linter"
"demo/create_sparse_matrix.R",10,81,"style","Lines should not be more than 80 characters.","# A categorical variable is one which have a fixed number of values. By example, if for each observation a variable called ""Colour"" can have only ""red"", ""blue"" or ""green"" as value, it is a categorical variable.","line_length_linter"
"demo/create_sparse_matrix.R",15,81,"style","Lines should not be more than 80 characters.","# In this demo we will see how to transform a dense dataframe with categorical variables to a sparse matrix before analyzing it in XGBoost.","line_length_linter"
"demo/create_sparse_matrix.R",21,81,"style","Lines should not be more than 80 characters.","# create a copy of the dataset with data.table package (data.table is 100% compliant with R dataframe but its syntax is a lot more consistent and its performance are really good).","line_length_linter"
"demo/create_sparse_matrix.R",28,81,"style","Lines should not be more than 80 characters.","# 2 columns have factor type, one has ordinal type (ordinal variable is a categorical variable with values which can be ordered, here: None > Some > Marked).","line_length_linter"
"demo/create_sparse_matrix.R",32,81,"style","Lines should not be more than 80 characters.","# Let's add some new categorical features to see if it helps. Of course these feature are highly correlated to the Age feature. Usually it's not a good thing in ML, but Tree algorithms (including boosted trees) are able to select the best features, even in case of highly correlated features.","line_length_linter"
"demo/create_sparse_matrix.R",34,81,"style","Lines should not be more than 80 characters.","# For the first feature we create groups of age by rounding the real age. Note that we transform it to factor (categorical data) so the algorithm treat them as independent values.","line_length_linter"
"demo/create_sparse_matrix.R",37,81,"style","Lines should not be more than 80 characters.","# Here is an even stronger simplification of the real age with an arbitrary split at 30 years old. I choose this value based on nothing. We will see later if simplifying the information based on arbitrary values is a good strategy (I am sure you already have an idea of how well it will work!).","line_length_linter"
"demo/create_sparse_matrix.R",40,81,"style","Lines should not be more than 80 characters.","# We remove ID as there is nothing to learn from this feature (it will just add some noise as the dataset is small).","line_length_linter"
"demo/create_sparse_matrix.R",49,81,"style","Lines should not be more than 80 characters.","# The purpose is to transform each value of each categorical feature in one binary feature.","line_length_linter"
"demo/create_sparse_matrix.R",51,81,"style","Lines should not be more than 80 characters.","# Let's take, the column Treatment will be replaced by two columns, Placebo, and Treated. Each of them will be binary. For example an observation which had the value Placebo in column Treatment before the transformation will have, after the transformation, the value 1 in the new column Placebo and the value 0 in the new column  Treated.","line_length_linter"
"demo/create_sparse_matrix.R",53,81,"style","Lines should not be more than 80 characters.","# Formulae Improved~.-1 used below means transform all categorical features but column Improved to binary values.","line_length_linter"
"demo/create_sparse_matrix.R",54,81,"style","Lines should not be more than 80 characters.","# Column Improved is excluded because it will be our output column, the one we want to predict.","line_length_linter"
"demo/create_sparse_matrix.R",69,81,"style","Lines should not be more than 80 characters.","               eta = 1, nthread = 2, nrounds = 10, objective = ""binary:logistic"")","line_length_linter"
"demo/create_sparse_matrix.R",71,81,"style","Lines should not be more than 80 characters.","importance <- xgb.importance(feature_names = colnames(sparse_matrix), model = bst)","line_length_linter"
"demo/create_sparse_matrix.R",73,81,"style","Lines should not be more than 80 characters.","# According to the matrix below, the most important feature in this dataset to predict if the treatment will work is the Age. The second most important feature is having received a placebo or not. The sex is third. Then we see our generated features (AgeDiscret). We can see that their contribution is very low (Gain column).","line_length_linter"
"demo/create_sparse_matrix.R",85,81,"style","Lines should not be more than 80 characters.","# The perfectly random split I did between young and old at 30 years old have a low correlation of 2. It's a result we may expect as may be in my mind > 30 years is being old (I am 32 and starting feeling old, this may explain that), but  for the illness we are studying, the age to be vulnerable is not the same. Don't let your ""gut"" lower the quality of your model. In ""data science"", there is science :-)","line_length_linter"
"demo/create_sparse_matrix.R",87,81,"style","Lines should not be more than 80 characters.","# As you can see, in general destroying information by simplifying it won't improve your model. Chi2 just demonstrates that. But in more complex cases, creating a new feature based on existing one which makes link with the outcome more obvious may help the algorithm and improve the model. The case studied here is not enough complex to show that. Check Kaggle forum for some challenging datasets.","line_length_linter"
"demo/create_sparse_matrix.R",89,81,"style","Lines should not be more than 80 characters.","# Moreover, you can notice that even if we have added some not useful new features highly correlated with other features, the boosting tree algorithm have been able to choose the best one, which in this case is the Age. Linear model may not be that strong in these scenario.","line_length_linter"
"demo/cross_validation.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/cross_validation.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/cross_validation.R",9,64,"style","Only use double-quotes.","param <- list(max_depth = 2, eta = 1, nthread = 2, objective = 'binary:logistic')","single_quotes_linter"
"demo/cross_validation.R",9,81,"style","Lines should not be more than 80 characters.","param <- list(max_depth = 2, eta = 1, nthread = 2, objective = 'binary:logistic')","line_length_linter"
"demo/cross_validation.R",11,5,"style","Only use double-quotes.","cat('running cross validation\n')","single_quotes_linter"
"demo/cross_validation.R",15,53,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","xgb.cv(param, dtrain, nrounds, nfold = 5, metrics = {'error'})","brace_linter"
"demo/cross_validation.R",15,54,"style","Only use double-quotes.","xgb.cv(param, dtrain, nrounds, nfold = 5, metrics = {'error'})","single_quotes_linter"
"demo/cross_validation.R",17,5,"style","Only use double-quotes.","cat('running cross validation, disable standard deviation display\n')","single_quotes_linter"
"demo/cross_validation.R",22,18,"style","Only use double-quotes.","       metrics = 'error', showsd = FALSE)","single_quotes_linter"
"demo/cross_validation.R",28,6,"style","Remove spaces before the left parenthesis in a function call.","print ('running cross validation, with customized loss function')","function_left_parentheses_linter"
"demo/cross_validation.R",28,8,"style","Only use double-quotes.","print ('running cross validation, with customized loss function')","single_quotes_linter"
"demo/cross_validation.R",49,81,"style","Lines should not be more than 80 characters.","res <- xgb.cv(params = param, data = dtrain, nrounds = nrounds, nfold = 5, prediction = TRUE)","line_length_linter"
"demo/custom_objective.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/custom_objective.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/custom_objective.R",14,81,"style","Lines should not be more than 80 characters.","# user define objective function, given prediction, return gradient and second order gradient","line_length_linter"
"demo/custom_objective.R",25,81,"style","Lines should not be more than 80 characters.","# NOTE: when you do customized loss function, the default prediction value is margin","line_length_linter"
"demo/custom_objective.R",27,81,"style","Lines should not be more than 80 characters.","# for example, we are doing logistic loss, the prediction is score before logistic transformation","line_length_linter"
"demo/custom_objective.R",29,81,"style","Lines should not be more than 80 characters.","# Take this in mind when you use the customization, and maybe you need write customized evaluation function","line_length_linter"
"demo/custom_objective.R",38,6,"style","Remove spaces before the left parenthesis in a function call.","print ('start training with user customized objective')","function_left_parentheses_linter"
"demo/custom_objective.R",38,8,"style","Only use double-quotes.","print ('start training with user customized objective')","single_quotes_linter"
"demo/custom_objective.R",48,81,"style","Lines should not be more than 80 characters.","# set label attribute of dtrain to be label, we use label as an example, it can be anything","line_length_linter"
"demo/custom_objective.R",49,14,"style","Only use double-quotes.","attr(dtrain, 'label') <- getinfo(dtrain, 'label')","single_quotes_linter"
"demo/custom_objective.R",49,42,"style","Only use double-quotes.","attr(dtrain, 'label') <- getinfo(dtrain, 'label')","single_quotes_linter"
"demo/custom_objective.R",54,26,"style","Only use double-quotes.","  labels <- attr(dtrain, 'label')","single_quotes_linter"
"demo/custom_objective.R",62,6,"style","Remove spaces before the left parenthesis in a function call.","print ('start training with user customized objective, with additional attributes in DMatrix')","function_left_parentheses_linter"
"demo/custom_objective.R",62,8,"style","Only use double-quotes.","print ('start training with user customized objective, with additional attributes in DMatrix')","single_quotes_linter"
"demo/custom_objective.R",62,81,"style","Lines should not be more than 80 characters.","print ('start training with user customized objective, with additional attributes in DMatrix')","line_length_linter"
"demo/early_stopping.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/early_stopping.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/early_stopping.R",13,81,"style","Lines should not be more than 80 characters.","# user define objective function, given prediction, return gradient and second order gradient","line_length_linter"
"demo/early_stopping.R",23,81,"style","Lines should not be more than 80 characters.","# NOTE: when you do customized loss function, the default prediction value is margin","line_length_linter"
"demo/early_stopping.R",25,81,"style","Lines should not be more than 80 characters.","# for example, we are doing logistic loss, the prediction is score before logistic transformation","line_length_linter"
"demo/early_stopping.R",27,81,"style","Lines should not be more than 80 characters.","# Take this in mind when you use the customization, and maybe you need write customized evaluation function","line_length_linter"
"demo/early_stopping.R",33,6,"style","Remove spaces before the left parenthesis in a function call.","print ('start training with early Stopping setting')","function_left_parentheses_linter"
"demo/early_stopping.R",33,8,"style","Only use double-quotes.","print ('start training with early Stopping setting')","single_quotes_linter"
"demo/early_stopping.R",36,81,"style","Lines should not be more than 80 characters.","                 objective = logregobj, eval_metric = evalerror, maximize = FALSE,","line_length_linter"
"demo/generalized_linear_model.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/generalized_linear_model.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/generalized_linear_model.R",32,26,"style","Only use double-quotes.","labels <- getinfo(dtest, 'label')","single_quotes_linter"
"demo/generalized_linear_model.R",33,5,"style","Only use double-quotes.","cat('error of preds=', mean(as.numeric(ypred > 0.5) != labels), '\n')","single_quotes_linter"
"demo/generalized_linear_model.R",33,65,"style","Only use double-quotes.","cat('error of preds=', mean(as.numeric(ypred > 0.5) != labels), '\n')","single_quotes_linter"
"demo/gpu_accelerated.R",10,9,"style","Only use double-quotes.","library('xgboost')","single_quotes_linter"
"demo/gpu_accelerated.R",12,81,"style","Lines should not be more than 80 characters.","# Simulate N x p random matrix with some binomial response dependent on pp columns","line_length_linter"
"demo/gpu_accelerated.R",14,1,"style","Variable and function name style should be snake_case or symbols.","N <- 1000000","object_name_linter"
"demo/gpu_accelerated.R",17,1,"style","Variable and function name style should be snake_case or symbols.","X <- matrix(runif(N * p), ncol = p)","object_name_linter"
"demo/gpu_accelerated.R",35,27,"style","Only use double-quotes.","param <- list(objective = 'reg:logistic', eval_metric = 'auc', subsample = 0.5, nthread = 4,","single_quotes_linter"
"demo/gpu_accelerated.R",35,57,"style","Only use double-quotes.","param <- list(objective = 'reg:logistic', eval_metric = 'auc', subsample = 0.5, nthread = 4,","single_quotes_linter"
"demo/gpu_accelerated.R",35,81,"style","Lines should not be more than 80 characters.","param <- list(objective = 'reg:logistic', eval_metric = 'auc', subsample = 0.5, nthread = 4,","line_length_linter"
"demo/gpu_accelerated.R",36,43,"style","Only use double-quotes.","              max_bin = 64, tree_method = 'gpu_hist')","single_quotes_linter"
"demo/gpu_accelerated.R",42,22,"style","Only use double-quotes.","param$tree_method <- 'hist'","single_quotes_linter"
"demo/interaction_constraints.R",6,81,"style","Lines should not be more than 80 characters.","# Function to obtain a list of interactions fitted in trees, requires input of maximum depth","line_length_linter"
"demo/interaction_constraints.R",7,1,"style","Variable and function name style should be snake_case or symbols.","treeInteractions <- function(input_tree, input_max_depth) {","object_name_linter"
"demo/interaction_constraints.R",8,3,"style","Variable and function name style should be snake_case or symbols.","  ID_merge <- i.id <- i.feature <- NULL  # Suppress warning ""no visible binding for global variable""","object_name_linter"
"demo/interaction_constraints.R",8,15,"style","Variable and function name style should be snake_case or symbols.","  ID_merge <- i.id <- i.feature <- NULL  # Suppress warning ""no visible binding for global variable""","object_name_linter"
"demo/interaction_constraints.R",8,23,"style","Variable and function name style should be snake_case or symbols.","  ID_merge <- i.id <- i.feature <- NULL  # Suppress warning ""no visible binding for global variable""","object_name_linter"
"demo/interaction_constraints.R",8,81,"style","Lines should not be more than 80 characters.","  ID_merge <- i.id <- i.feature <- NULL  # Suppress warning ""no visible binding for global variable""","line_length_linter"
"demo/interaction_constraints.R",10,81,"style","Lines should not be more than 80 characters.","  trees <- data.table::copy(input_tree)  # copy tree input to prevent overwriting","line_length_linter"
"demo/interaction_constraints.R",16,77,"style","Only use double-quotes.","    if (i == 2) trees[, ID_merge := ID] else trees[, ID_merge := get(paste0('parent_', i - 2))]","single_quotes_linter"
"demo/interaction_constraints.R",16,81,"style","Lines should not be more than 80 characters.","    if (i == 2) trees[, ID_merge := ID] else trees[, ID_merge := get(paste0('parent_', i - 2))]","line_length_linter"
"demo/interaction_constraints.R",17,81,"style","Lines should not be more than 80 characters.","    parents_left <- trees[!is.na(Split), list(i.id = ID, i.feature = Feature, ID_merge = Yes)]","line_length_linter"
"demo/interaction_constraints.R",18,81,"style","Lines should not be more than 80 characters.","    parents_right <- trees[!is.na(Split), list(i.id = ID, i.feature = Feature, ID_merge = No)]","line_length_linter"
"demo/interaction_constraints.R",20,34,"style","Only use double-quotes.","    data.table::setorderv(trees, 'ID_merge')","single_quotes_linter"
"demo/interaction_constraints.R",21,41,"style","Only use double-quotes.","    data.table::setorderv(parents_left, 'ID_merge')","single_quotes_linter"
"demo/interaction_constraints.R",22,42,"style","Only use double-quotes.","    data.table::setorderv(parents_right, 'ID_merge')","single_quotes_linter"
"demo/interaction_constraints.R",24,46,"style","Only use double-quotes.","    trees <- merge(trees, parents_left, by = 'ID_merge', all.x = TRUE)","single_quotes_linter"
"demo/interaction_constraints.R",25,34,"style","Only use double-quotes.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","single_quotes_linter"
"demo/interaction_constraints.R",25,60,"style","Only use double-quotes.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","single_quotes_linter"
"demo/interaction_constraints.R",25,81,"style","Lines should not be more than 80 characters.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","line_length_linter"
"demo/interaction_constraints.R",27,15,"style","Only use double-quotes.","    trees[, c('i.id', 'i.feature') := NULL]","single_quotes_linter"
"demo/interaction_constraints.R",27,23,"style","Only use double-quotes.","    trees[, c('i.id', 'i.feature') := NULL]","single_quotes_linter"
"demo/interaction_constraints.R",29,47,"style","Only use double-quotes.","    trees <- merge(trees, parents_right, by = 'ID_merge', all.x = TRUE)","single_quotes_linter"
"demo/interaction_constraints.R",30,34,"style","Only use double-quotes.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","single_quotes_linter"
"demo/interaction_constraints.R",30,60,"style","Only use double-quotes.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","single_quotes_linter"
"demo/interaction_constraints.R",30,81,"style","Lines should not be more than 80 characters.","    trees[!is.na(i.id), c(paste0('parent_', i - 1), paste0('parent_feat_', i - 1))","line_length_linter"
"demo/interaction_constraints.R",32,15,"style","Only use double-quotes.","    trees[, c('i.id', 'i.feature') := NULL]","single_quotes_linter"
"demo/interaction_constraints.R",32,23,"style","Only use double-quotes.","    trees[, c('i.id', 'i.feature') := NULL]","single_quotes_linter"
"demo/interaction_constraints.R",36,53,"warning","no visible binding for global variable ‘parent_1’","  interaction_trees <- trees[!is.na(Split) & !is.na(parent_1),","object_usage_linter"
"demo/interaction_constraints.R",37,32,"style","Only use double-quotes.","                             c('Feature', paste0('parent_feat_', 1:(input_max_depth - 1))),","single_quotes_linter"
"demo/interaction_constraints.R",37,50,"style","Only use double-quotes.","                             c('Feature', paste0('parent_feat_', 1:(input_max_depth - 1))),","single_quotes_linter"
"demo/interaction_constraints.R",37,81,"style","Lines should not be more than 80 characters.","                             c('Feature', paste0('parent_feat_', 1:(input_max_depth - 1))),","line_length_linter"
"demo/interaction_constraints.R",39,81,"style","Lines should not be more than 80 characters.","  interaction_trees_split <- split(interaction_trees, seq_len(nrow(interaction_trees)))","line_length_linter"
"demo/interaction_constraints.R",60,34,"style","Only use double-quotes.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","single_quotes_linter"
"demo/interaction_constraints.R",60,46,"style","Only use double-quotes.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","single_quotes_linter"
"demo/interaction_constraints.R",60,58,"style","Only use double-quotes.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","single_quotes_linter"
"demo/interaction_constraints.R",60,70,"style","Only use double-quotes.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","single_quotes_linter"
"demo/interaction_constraints.R",60,81,"style","Lines should not be more than 80 characters.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","line_length_linter"
"demo/interaction_constraints.R",60,82,"style","Only use double-quotes.","y <- -1 * x[, rowSums(.SD)] + x[['V1']] * x[['V2']] + x[['V3']] * x[['V4']] * x[['V5']]","single_quotes_linter"
"demo/interaction_constraints.R",61,40,"style","Only use double-quotes.","     + rnorm(1000, 0.001) + 3 * sin(x[['V7']])","single_quotes_linter"
"demo/interaction_constraints.R",66,28,"style","Only use double-quotes.","interaction_list <- list(c('V1', 'V2'), c('V3', 'V4', 'V5'))","single_quotes_linter"
"demo/interaction_constraints.R",66,34,"style","Only use double-quotes.","interaction_list <- list(c('V1', 'V2'), c('V3', 'V4', 'V5'))","single_quotes_linter"
"demo/interaction_constraints.R",66,43,"style","Only use double-quotes.","interaction_list <- list(c('V1', 'V2'), c('V3', 'V4', 'V5'))","single_quotes_linter"
"demo/interaction_constraints.R",66,49,"style","Only use double-quotes.","interaction_list <- list(c('V1', 'V2'), c('V3', 'V4', 'V5'))","single_quotes_linter"
"demo/interaction_constraints.R",66,55,"style","Only use double-quotes.","interaction_list <- list(c('V1', 'V2'), c('V3', 'V4', 'V5'))","single_quotes_linter"
"demo/interaction_constraints.R",70,3,"style","Variable and function name style should be snake_case or symbols.","  LUT <- seq_along(col_names) - 1","object_name_linter"
"demo/interaction_constraints.R",71,9,"style","Variable and function name style should be snake_case or symbols.","  names(LUT) <- col_names","object_name_linter"
"demo/interaction_constraints.R",102,81,"style","Lines should not be more than 80 characters.","# Show monotonic constraints still apply by checking scores after incrementing V1","line_length_linter"
"demo/interaction_constraints.R",103,22,"style","Only use double-quotes.","x1 <- sort(unique(x[['V1']]))","single_quotes_linter"
"demo/interaction_constraints.R",105,27,"style","Only use double-quotes.","  testdata <- copy(x[, - ('V1')])","single_quotes_linter"
"demo/interaction_constraints.R",106,13,"style","Only use double-quotes.","  testdata[['V1']] <- x1[i]","single_quotes_linter"
"demo/interaction_constraints.R",107,33,"style","Only use double-quotes.","  testdata <- testdata[, paste0('V', 1:10), with = FALSE]","single_quotes_linter"
"demo/poisson_regression.R",4,28,"style","Only use double-quotes.","               objective = 'count:poisson', nrounds = 5)","single_quotes_linter"
"demo/predict_first_ntree.R",3,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/predict_first_ntree.R",4,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/predict_first_ntree.R",8,51,"style","Only use double-quotes.","param <- list(max_depth = 2, eta = 1, objective = 'binary:logistic')","single_quotes_linter"
"demo/predict_first_ntree.R",14,5,"style","Only use double-quotes.","cat('start testing prediction from first n trees\n')","single_quotes_linter"
"demo/predict_first_ntree.R",15,26,"style","Only use double-quotes.","labels <- getinfo(dtest, 'label')","single_quotes_linter"
"demo/predict_first_ntree.R",22,5,"style","Only use double-quotes.","cat('error of ypred1=', mean(as.numeric(ypred1 > 0.5) != labels), '\n')","single_quotes_linter"
"demo/predict_first_ntree.R",22,67,"style","Only use double-quotes.","cat('error of ypred1=', mean(as.numeric(ypred1 > 0.5) != labels), '\n')","single_quotes_linter"
"demo/predict_first_ntree.R",23,5,"style","Only use double-quotes.","cat('error of ypred2=', mean(as.numeric(ypred2 > 0.5) != labels), '\n')","single_quotes_linter"
"demo/predict_first_ntree.R",23,67,"style","Only use double-quotes.","cat('error of ypred2=', mean(as.numeric(ypred2 > 0.5) != labels), '\n')","single_quotes_linter"
"demo/predict_leaf_indices.R",8,32,"style","Only use double-quotes.","data(agaricus.train, package = 'xgboost')","single_quotes_linter"
"demo/predict_leaf_indices.R",9,31,"style","Only use double-quotes.","data(agaricus.test, package = 'xgboost')","single_quotes_linter"
"demo/predict_leaf_indices.R",13,51,"style","Only use double-quotes.","param <- list(max_depth = 2, eta = 1, objective = 'binary:logistic')","single_quotes_linter"
"demo/predict_leaf_indices.R",20,1,"style","Variable and function name style should be snake_case or symbols.","accuracy.before <- (sum((predict(bst, agaricus.test$data) >= 0.5) == agaricus.test$label)","object_name_linter"
"demo/predict_leaf_indices.R",20,81,"style","Lines should not be more than 80 characters.","accuracy.before <- (sum((predict(bst, agaricus.test$data) >= 0.5) == agaricus.test$label)","line_length_linter"
"demo/predict_leaf_indices.R",27,1,"style","Variable and function name style should be snake_case or symbols.","create.new.tree.features <- function(model, original.features){","object_name_linter"
"demo/predict_leaf_indices.R",27,45,"style","Variable and function name style should be snake_case or symbols.","create.new.tree.features <- function(model, original.features){","object_name_linter"
"demo/predict_leaf_indices.R",27,63,"style","There should be a space before an opening curly brace.","create.new.tree.features <- function(model, original.features){","brace_linter"
"demo/predict_leaf_indices.R",27,63,"style","There should be a space between a right parenthesis and a body expression.","create.new.tree.features <- function(model, original.features){","paren_body_linter"
"demo/predict_leaf_indices.R",31,81,"style","Lines should not be more than 80 characters.","    # max is not the real max but it s not important for the purpose of adding features","line_length_linter"
"demo/predict_leaf_indices.R",32,5,"style","Variable and function name style should be snake_case or symbols.","    leaf.id <- sort(unique(pred_with_leaf[, i]))","object_name_linter"
"demo/predict_leaf_indices.R",39,1,"style","Variable and function name style should be snake_case or symbols.","new.features.train <- create.new.tree.features(bst, agaricus.train$data)","object_name_linter"
"demo/predict_leaf_indices.R",40,1,"style","Variable and function name style should be snake_case or symbols.","new.features.test <- create.new.tree.features(bst, agaricus.test$data)","object_name_linter"
"demo/predict_leaf_indices.R",41,10,"style","Variable and function name style should be snake_case or symbols.","colnames(new.features.test) <- colnames(new.features.train)","object_name_linter"
"demo/predict_leaf_indices.R",44,1,"style","Variable and function name style should be snake_case or symbols.","new.dtrain <- xgb.DMatrix(data = new.features.train, label = agaricus.train$label)","object_name_linter"
"demo/predict_leaf_indices.R",44,81,"style","Lines should not be more than 80 characters.","new.dtrain <- xgb.DMatrix(data = new.features.train, label = agaricus.train$label)","line_length_linter"
"demo/predict_leaf_indices.R",45,1,"style","Variable and function name style should be snake_case or symbols.","new.dtest <- xgb.DMatrix(data = new.features.test, label = agaricus.test$label)","object_name_linter"
"demo/predict_leaf_indices.R",47,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(params = param, data = new.dtrain, nrounds = nrounds, nthread = 2)","line_length_linter"
"demo/predict_leaf_indices.R",50,1,"style","Variable and function name style should be snake_case or symbols.","accuracy.after <- (sum((predict(bst, new.dtest) >= 0.5) == agaricus.test$label)","object_name_linter"
"demo/predict_leaf_indices.R",54,81,"style","Lines should not be more than 80 characters.","cat(paste(""The accuracy was"", accuracy.before, ""before adding leaf features and it is now"",","line_length_linter"
"demo/runall.R",2,35,"style","Only use double-quotes.","demo(basic_walkthrough, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",3,34,"style","Only use double-quotes.","demo(custom_objective, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",4,39,"style","Only use double-quotes.","demo(boost_from_prediction, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",5,37,"style","Only use double-quotes.","demo(predict_first_ntree, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",6,42,"style","Only use double-quotes.","demo(generalized_linear_model, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",7,34,"style","Only use double-quotes.","demo(cross_validation, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",8,38,"style","Only use double-quotes.","demo(create_sparse_matrix, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",9,38,"style","Only use double-quotes.","demo(predict_leaf_indices, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",10,32,"style","Only use double-quotes.","demo(early_stopping, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",11,36,"style","Only use double-quotes.","demo(poisson_regression, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",12,31,"style","Only use double-quotes.","demo(caret_wrapper, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",13,36,"style","Only use double-quotes.","demo(tweedie_regression, package = 'xgboost')","single_quotes_linter"
"demo/runall.R",14,2,"style","Commented code should be removed.","#demo(gpu_accelerated, package = 'xgboost')  # can only run when built with GPU support","commented_code_linter"
"demo/runall.R",14,81,"style","Lines should not be more than 80 characters.","#demo(gpu_accelerated, package = 'xgboost')  # can only run when built with GPU support","line_length_linter"
"demo/tweedie_regression.R",11,14,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,26,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,38,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,51,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,63,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,75,"style","Only use double-quotes.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","single_quotes_linter"
"demo/tweedie_regression.R",11,81,"style","Lines should not be more than 80 characters.","exclude <- c('POLICYNO', 'PLCYDATE', 'CLM_FREQ5', 'CLM_AMT5', 'CLM_FLAG', 'IN_YY')","line_length_linter"
"demo/tweedie_regression.R",15,21,"style","Only use double-quotes.","options(na.action = 'na.pass')","single_quotes_linter"
"demo/tweedie_regression.R",17,21,"style","Only use double-quotes.","options(na.action = 'na.omit')","single_quotes_linter"
"demo/tweedie_regression.R",32,15,"style","Only use double-quotes.","  objective = 'reg:tweedie',","single_quotes_linter"
"demo/tweedie_regression.R",33,17,"style","Only use double-quotes.","  eval_metric = 'rmse',","single_quotes_linter"
"demo/tweedie_regression.R",45,35,"style","Only use double-quotes.","var_imp <- xgb.importance(attr(x, 'Dimnames')[[2]], model = bst)","single_quotes_linter"
"R/callbacks.R",617,12,"style","Either both or neither branch in `if`/`else` should use curly braces.","    } else if (!is.null(env$bst_folds)) { # xgb.cv:","brace_linter"
"R/xgb.Booster.R",55,1,"style","Variable and function name style should be snake_case or symbols.","is.null.handle <- function(handle) {","object_name_linter"
"R/xgb.Booster.R",632,43,"style","Trailing semicolons are not needed.","  .Call(XGBoosterSaveJsonConfig_R, handle);","semicolon_linter"
"R/xgb.cv.R",121,62,"style","Put spaces around all infix operators.","                   prediction = FALSE, showsd = TRUE, metrics=list(),","infix_spaces_linter"
"R/xgb.cv.R",123,49,"style","Put spaces around all infix operators.","                   verbose = TRUE, print_every_n=1L,","infix_spaces_linter"
"R/xgb.DMatrix.R",388,15,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (verbose & !is.null(cnames)) {","vector_logic_linter"
"R/xgb.plot.multi.trees.R",97,25,"warning","1:min(...) is likely to be wrong in the empty edge case. Use seq_len() instead.","                Feature[1:min(length(Feature), features_keep)],","seq_linter"
"R/xgb.plot.shap.R",276,29,"warning","1:min(...) is likely to be wrong in the empty edge case. Use seq_len() instead.","    features <- imp$Feature[1:min(top_n, NROW(imp))]","seq_linter"
"tests/testthat/test_basic.R",407,40,"style","Trailing semicolons are not needed.","  expect_equal(config, reloaded_config);","semicolon_linter"
"tests/testthat/test_helpers.R",95,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(X) <- NULL","object_name_linter"
"tests/testthat/test_helpers.R",173,11,"style","Any function spanning multiple lines should use curly braces.","    pr <- function(...)","brace_linter"
"tests/testthat/test_helpers.R",191,3,"style","Variable and function name style should be snake_case or symbols.","  list.ch <- list.val[order(names(list.val))]","object_name_linter"
"tests/testthat/test_helpers.R",192,3,"style","Variable and function name style should be snake_case or symbols.","  list.ch <- lapply(list.ch, as.character)","object_name_linter"
"tests/testthat/test_helpers.R",194,3,"style","Variable and function name style should be snake_case or symbols.","  list.default <- list(niter = as.character(nrounds - 1))","object_name_linter"
"tests/testthat/test_helpers.R",195,3,"style","Variable and function name style should be snake_case or symbols.","  list.ch <- c(list.ch, list.default)","object_name_linter"
"tests/testthat/test_helpers.R",202,12,"style","Variable and function name style should be snake_case or symbols.","  xgb.attr(bst.Tree, ""my_attr"") <- val","object_name_linter"
"tests/testthat/test_helpers.R",204,18,"style","Variable and function name style should be snake_case or symbols.","  xgb.attributes(bst.Tree) <- list.val","object_name_linter"
"tests/testthat/test_helpers.R",235,18,"style","Variable and function name style should be snake_case or symbols.","        xgb.attr(bst.Tree, ""x"") <- x","object_name_linter"
"tests/testthat/test_helpers.R",237,24,"style","Variable and function name style should be snake_case or symbols.","        xgb.attributes(bst.Tree) <- list(a = ""A"", b = x)","object_name_linter"
"tests/testthat/test_helpers.R",274,3,"style","Variable and function name style should be snake_case or symbols.","  bst.Tree.x$feature_names <- NULL","object_name_linter"
"tests/testthat/test_helpers.R",302,3,"style","Variable and function name style should be snake_case or symbols.","  bst.Tree.x$feature_names <- NULL","object_name_linter"
"vignettes/discoverYourData.Rmd",31,14,"style","Only use double-quotes.","if (!require('vcd')) install.packages('vcd')","single_quotes_linter"
"vignettes/discoverYourData.Rmd",31,39,"style","Only use double-quotes.","if (!require('vcd')) install.packages('vcd')","single_quotes_linter"
"vignettes/discoverYourData.Rmd",103,10,"style","Commas should always have a space after.","head(df[,AgeDiscret := as.factor(round(Age/10,0))])","commas_linter"
"vignettes/discoverYourData.Rmd",103,43,"style","Put spaces around all infix operators.","head(df[,AgeDiscret := as.factor(round(Age/10,0))])","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",103,47,"style","Commas should always have a space after.","head(df[,AgeDiscret := as.factor(round(Age/10,0))])","commas_linter"
"vignettes/discoverYourData.Rmd",111,10,"style","Commas should always have a space after.","head(df[,AgeCat:= as.factor(ifelse(Age > 30, ""Old"", ""Young""))])","commas_linter"
"vignettes/discoverYourData.Rmd",111,16,"style","Put spaces around all infix operators.","head(df[,AgeCat:= as.factor(ifelse(Age > 30, ""Old"", ""Young""))])","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",127,5,"style","Commas should always have a space after.","df[,ID:=NULL]","commas_linter"
"vignettes/discoverYourData.Rmd",127,7,"style","Put spaces around all infix operators.","df[,ID:=NULL]","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",133,12,"style","Commas should always have a space after.","levels(df[,Treatment])","commas_linter"
"vignettes/discoverYourData.Rmd",150,64,"style","Commas should always have a space after.","sparse_matrix <- sparse.model.matrix(Improved ~ ., data = df)[,-1]","commas_linter"
"vignettes/discoverYourData.Rmd",159,15,"style","Use <-, not =, for assignment.","output_vector = df[,Improved] == ""Marked""","assignment_linter"
"vignettes/discoverYourData.Rmd",159,21,"style","Commas should always have a space after.","output_vector = df[,Improved] == ""Marked""","commas_linter"
"vignettes/discoverYourData.Rmd",173,51,"style","Commas should always have a space after.","               eta = 1, nthread = 2, nrounds = 10,objective = ""binary:logistic"")","commas_linter"
"vignettes/discoverYourData.Rmd",196,81,"style","Lines should not be more than 80 characters.","importance <- xgb.importance(feature_names = colnames(sparse_matrix), model = bst)","line_length_linter"
"vignettes/discoverYourData.Rmd",219,1,"style","Variable and function name style should be snake_case or symbols.","importanceRaw <- xgb.importance(feature_names = colnames(sparse_matrix), model = bst, data = sparse_matrix, label = output_vector)","object_name_linter"
"vignettes/discoverYourData.Rmd",219,81,"style","Lines should not be more than 80 characters.","importanceRaw <- xgb.importance(feature_names = colnames(sparse_matrix), model = bst, data = sparse_matrix, label = output_vector)","line_length_linter"
"vignettes/discoverYourData.Rmd",222,1,"style","Variable and function name style should be snake_case or symbols.","importanceClean <- importanceRaw[,`:=`(Cover=NULL, Frequency=NULL)]","object_name_linter"
"vignettes/discoverYourData.Rmd",222,35,"style","Commas should always have a space after.","importanceClean <- importanceRaw[,`:=`(Cover=NULL, Frequency=NULL)]","commas_linter"
"vignettes/discoverYourData.Rmd",222,45,"style","Put spaces around all infix operators.","importanceClean <- importanceRaw[,`:=`(Cover=NULL, Frequency=NULL)]","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",222,61,"style","Put spaces around all infix operators.","importanceClean <- importanceRaw[,`:=`(Cover=NULL, Frequency=NULL)]","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",324,29,"style","Put spaces around all infix operators.","data(agaricus.train, package='xgboost')","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",324,30,"style","Only use double-quotes.","data(agaricus.train, package='xgboost')","single_quotes_linter"
"vignettes/discoverYourData.Rmd",325,28,"style","Put spaces around all infix operators.","data(agaricus.test, package='xgboost')","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",325,29,"style","Only use double-quotes.","data(agaricus.test, package='xgboost')","single_quotes_linter"
"vignettes/discoverYourData.Rmd",330,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = train$data, label = train$label, max_depth = 4, num_parallel_tree = 1000, subsample = 0.5, colsample_bytree =0.5, nrounds = 1, objective = ""binary:logistic"")","line_length_linter"
"vignettes/discoverYourData.Rmd",330,131,"style","Put spaces around all infix operators.","bst <- xgboost(data = train$data, label = train$label, max_depth = 4, num_parallel_tree = 1000, subsample = 0.5, colsample_bytree =0.5, nrounds = 1, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/discoverYourData.Rmd",333,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = train$data, label = train$label, max_depth = 4, nrounds = 3, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboost.Rnw",19,13,"style","Only use double-quotes.","if (require('knitr')) opts_chunk$set(fig.width = 5, fig.height = 5, fig.align = 'center', tidy = FALSE, warning = FALSE, cache = TRUE)","single_quotes_linter"
"vignettes/xgboost.Rnw",19,81,"style","Lines should not be more than 80 characters.","if (require('knitr')) opts_chunk$set(fig.width = 5, fig.height = 5, fig.align = 'center', tidy = FALSE, warning = FALSE, cache = TRUE)","line_length_linter"
"vignettes/xgboost.Rnw",19,81,"style","Only use double-quotes.","if (require('knitr')) opts_chunk$set(fig.width = 5, fig.height = 5, fig.align = 'center', tidy = FALSE, warning = FALSE, cache = TRUE)","single_quotes_linter"
"vignettes/xgboost.Rnw",24,1,"style","Variable and function name style should be snake_case or symbols.","xgboost.version <- packageDescription(""xgboost"")$Version","object_name_linter"
"vignettes/xgboost.Rnw",84,29,"style","Put spaces around all infix operators.","data(agaricus.train, package='xgboost')","infix_spaces_linter"
"vignettes/xgboost.Rnw",84,30,"style","Only use double-quotes.","data(agaricus.train, package='xgboost')","single_quotes_linter"
"vignettes/xgboost.Rnw",85,28,"style","Put spaces around all infix operators.","data(agaricus.test, package='xgboost')","infix_spaces_linter"
"vignettes/xgboost.Rnw",85,29,"style","Only use double-quotes.","data(agaricus.test, package='xgboost')","single_quotes_linter"
"vignettes/xgboost.Rnw",90,15,"style","Only use double-quotes.","xgb.save(bst, 'model.save')","single_quotes_linter"
"vignettes/xgboost.Rnw",91,5,"style","Use <-, not =, for assignment.","bst = xgb.load('model.save')","assignment_linter"
"vignettes/xgboost.Rnw",91,16,"style","Only use double-quotes.","bst = xgb.load('model.save')","single_quotes_linter"
"vignettes/xgboost.Rnw",102,15,"style","Only use double-quotes.","xgb.dump(bst, 'model.dump')","single_quotes_linter"
"vignettes/xgboost.Rnw",132,21,"style","Commas should always have a space after.","head(getinfo(dtrain,'label'))","commas_linter"
"vignettes/xgboost.Rnw",132,21,"style","Only use double-quotes.","head(getinfo(dtrain,'label'))","single_quotes_linter"
"vignettes/xgboost.Rnw",138,26,"style","Only use double-quotes.","xgb.DMatrix.save(dtrain, 'xgb.DMatrix')","single_quotes_linter"
"vignettes/xgboost.Rnw",139,8,"style","Use <-, not =, for assignment.","dtrain = xgb.DMatrix('xgb.DMatrix')","assignment_linter"
"vignettes/xgboost.Rnw",139,22,"style","Only use double-quotes.","dtrain = xgb.DMatrix('xgb.DMatrix')","single_quotes_linter"
"vignettes/xgboost.Rnw",152,14,"style","Put spaces around all infix operators.","   preds <- 1/(1 + exp(-preds))","infix_spaces_linter"
"vignettes/xgboost.Rnw",152,15,"style","Place a space before left parenthesis, except in a function call.","   preds <- 1/(1 + exp(-preds))","spaces_left_parentheses_linter"
"vignettes/xgboost.Rnw",160,26,"style","Put spaces around all infix operators.","  err <- sqrt(mean((preds-labels)^2))","infix_spaces_linter"
"vignettes/xgboost.Rnw",168,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(param, dtrain, nrounds = 2, watchlist, logregobj, evalerror, maximize = FALSE)","line_length_linter"
"vignettes/xgboostfromJSON.Rmd",33,15,"style","Put spaces around all infix operators.","options(digits=22)","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",53,41,"style","Put spaces around all infix operators.","data <- data.frame(dates = dates, labels=labels)","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",56,32,"style","Trailing whitespace is superfluous.","  data = as.matrix(data$dates), ","trailing_whitespace_linter"
"vignettes/xgboostfromJSON.Rmd",72,58,"style","Put spaces around all infix operators.","bst_json <- xgb.dump(bst, with_stats = FALSE, dump_format='json')","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",72,59,"style","Only use double-quotes.","bst_json <- xgb.dump(bst, with_stats = FALSE, dump_format='json')","single_quotes_linter"
"vignettes/xgboostfromJSON.Rmd",81,34,"style","Commas should always have a space after.","bst_preds_logodds <- predict(bst,as.matrix(data$dates), outputmargin = TRUE)","commas_linter"
"vignettes/xgboostfromJSON.Rmd",84,43,"style","Put spaces around all infix operators.","bst_from_json_logodds <- ifelse(data$dates<node$split_condition,","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",109,25,"style","Commas should always have a space after.","round(bst_preds_logodds,2) == round(bst_from_json_logodds,2)","commas_linter"
"vignettes/xgboostfromJSON.Rmd",109,59,"style","Commas should always have a space after.","round(bst_preds_logodds,2) == round(bst_from_json_logodds,2)","commas_linter"
"vignettes/xgboostfromJSON.Rmd",116,47,"style","Put spaces around all infix operators.","bst_from_json_logodds <- ifelse(fl(data$dates)<node$split_condition,","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",121,25,"style","Commas should always have a space after.","round(bst_preds_logodds,2) == round(bst_from_json_logodds,2)","commas_linter"
"vignettes/xgboostfromJSON.Rmd",121,59,"style","Commas should always have a space after.","round(bst_preds_logodds,2) == round(bst_from_json_logodds,2)","commas_linter"
"vignettes/xgboostfromJSON.Rmd",146,47,"style","Put spaces around all infix operators.","bst_from_json_logodds <- ifelse(fl(data$dates)<fl(node$split_condition),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",163,26,"style","Commas should always have a space after.","bst_preds <- predict(bst,as.matrix(data$dates))","commas_linter"
"vignettes/xgboostfromJSON.Rmd",166,45,"style","Put spaces around all infix operators.","bst_from_json_preds <- ifelse(fl(data$dates)<fl(node$split_condition),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",167,43,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",167,44,"style","Place a space before left parenthesis, except in a function call.","                              as.numeric(1/(1+exp(-1*fl(node$children[[1]]$leaf)))),","spaces_left_parentheses_linter"
"vignettes/xgboostfromJSON.Rmd",167,46,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",167,53,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",167,81,"style","Lines should not be more than 80 characters.","                              as.numeric(1/(1+exp(-1*fl(node$children[[1]]$leaf)))),","line_length_linter"
"vignettes/xgboostfromJSON.Rmd",168,43,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",168,44,"style","Place a space before left parenthesis, except in a function call.","                              as.numeric(1/(1+exp(-1*fl(node$children[[2]]$leaf))))","spaces_left_parentheses_linter"
"vignettes/xgboostfromJSON.Rmd",168,46,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",168,53,"style","Put spaces around all infix operators.","                              as.numeric(1/(1+exp(-1*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",168,81,"style","Lines should not be more than 80 characters.","                              as.numeric(1/(1+exp(-1*fl(node$children[[2]]$leaf))))","line_length_linter"
"vignettes/xgboostfromJSON.Rmd",180,45,"style","Put spaces around all infix operators.","bst_from_json_preds <- ifelse(fl(data$dates)<fl(node$split_condition),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",181,47,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",181,48,"style","Place a space before left parenthesis, except in a function call.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[1]]$leaf)))),","spaces_left_parentheses_linter"
"vignettes/xgboostfromJSON.Rmd",181,54,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",181,65,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[1]]$leaf)))),","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",181,81,"style","Lines should not be more than 80 characters.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[1]]$leaf)))),","line_length_linter"
"vignettes/xgboostfromJSON.Rmd",182,47,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",182,48,"style","Place a space before left parenthesis, except in a function call.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[2]]$leaf))))","spaces_left_parentheses_linter"
"vignettes/xgboostfromJSON.Rmd",182,54,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",182,65,"style","Put spaces around all infix operators.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[2]]$leaf))))","infix_spaces_linter"
"vignettes/xgboostfromJSON.Rmd",182,81,"style","Lines should not be more than 80 characters.","                              as.numeric(fl(1)/(fl(1)+exp(fl(-1)*fl(node$children[[2]]$leaf))))","line_length_linter"
"vignettes/xgboostPresentation.Rmd",55,31,"style","Put spaces around all infix operators.","install.packages(""drat"", repos=""https://cran.rstudio.com"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",57,34,"style","Put spaces around all infix operators.","install.packages(""xgboost"", repos=""http://dmlc.ml/drat/"", type = ""source"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",104,29,"style","Put spaces around all infix operators.","data(agaricus.train, package='xgboost')","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",104,30,"style","Only use double-quotes.","data(agaricus.train, package='xgboost')","single_quotes_linter"
"vignettes/xgboostPresentation.Rmd",105,28,"style","Put spaces around all infix operators.","data(agaricus.test, package='xgboost')","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",105,29,"style","Only use double-quotes.","data(agaricus.test, package='xgboost')","single_quotes_linter"
"vignettes/xgboostPresentation.Rmd",155,1,"style","Variable and function name style should be snake_case or symbols.","bstSparse <- xgboost(data = train$data, label = train$label, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","object_name_linter"
"vignettes/xgboostPresentation.Rmd",155,81,"style","Lines should not be more than 80 characters.","bstSparse <- xgboost(data = train$data, label = train$label, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",167,1,"style","Variable and function name style should be snake_case or symbols.","bstDense <- xgboost(data = as.matrix(train$data), label = train$label, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","object_name_linter"
"vignettes/xgboostPresentation.Rmd",167,81,"style","Lines should not be more than 80 characters.","bstDense <- xgboost(data = as.matrix(train$data), label = train$label, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",176,1,"style","Variable and function name style should be snake_case or symbols.","bstDMatrix <- xgboost(data = dtrain, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","object_name_linter"
"vignettes/xgboostPresentation.Rmd",176,81,"style","Lines should not be more than 80 characters.","bstDMatrix <- xgboost(data = dtrain, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",187,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = dtrain, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"", verbose = 0)","line_length_linter"
"vignettes/xgboostPresentation.Rmd",192,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = dtrain, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"", verbose = 1)","line_length_linter"
"vignettes/xgboostPresentation.Rmd",197,81,"style","Lines should not be more than 80 characters.","bst <- xgboost(data = dtrain, max_depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = ""binary:logistic"", verbose = 2)","line_length_linter"
"vignettes/xgboostPresentation.Rmd",270,47,"style","Put spaces around all infix operators.","dtrain <- xgb.DMatrix(data = train$data, label=train$label)","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",271,45,"style","Put spaces around all infix operators.","dtest <- xgb.DMatrix(data = test$data, label=test$label)","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",288,24,"style","Put spaces around all infix operators.","watchlist <- list(train=dtrain, test=dtest)","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",288,37,"style","Put spaces around all infix operators.","watchlist <- list(train=dtrain, test=dtest)","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",290,22,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",290,40,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",290,47,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",290,71,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",290,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",290,84,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",302,22,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",302,40,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",302,47,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",302,71,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",302,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",302,84,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",313,22,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, booster = ""gblinear"", max_depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",313,62,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, booster = ""gblinear"", max_depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",313,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data=dtrain, booster = ""gblinear"", max_depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",313,86,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, booster = ""gblinear"", max_depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",313,99,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain, booster = ""gblinear"", max_depth=2, nthread = 2, nrounds=2, watchlist=watchlist, eval_metric = ""error"", eval_metric = ""logloss"", objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",331,22,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",331,41,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",331,48,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",331,72,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",331,81,"style","Lines should not be more than 80 characters.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","line_length_linter"
"vignettes/xgboostPresentation.Rmd",331,85,"style","Put spaces around all infix operators.","bst <- xgb.train(data=dtrain2, max_depth=2, eta=1, nthread = 2, nrounds=2, watchlist=watchlist, objective = ""binary:logistic"")","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",343,7,"style","Use <-, not =, for assignment.","label = getinfo(dtest, ""label"")","assignment_linter"
"vignettes/xgboostPresentation.Rmd",345,56,"style","Put spaces around all infix operators.","err <- as.numeric(sum(as.integer(pred > 0.5) != label))/length(label)","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",399,51,"style","Put spaces around all infix operators.","print(paste(""sum(abs(pred2-pred))="", sum(abs(pred2-pred))))","infix_spaces_linter"
"vignettes/xgboostPresentation.Rmd",413,1,"style","Variable and function name style should be snake_case or symbols.","rawVec <- xgb.serialize(bst)","object_name_linter"
"vignettes/xgboostPresentation.Rmd",423,51,"style","Put spaces around all infix operators.","print(paste(""sum(abs(pred3-pred))="", sum(abs(pred2-pred))))","infix_spaces_linter"
