"filename","line_number","column_number","type","message","line","linter"
"R/chunkOMLlist.R",21,28,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.null(args$limit) | !is.null(args$offset))","vector_logic_linter"
"R/config_helpers.R",45,32,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (nchar(conf$apikey) != 32 & conf$apikey %nin% c("""", ""PLEASE CHANGE ME""))","vector_logic_linter"
"R/convertOMLDataSetToMlr.R",44,3,"style","Variable and function name style should be snake_case or symbols.","  drop.levels = TRUE,","object_name_linter"
"R/convertOMLDataSetToMlr.R",62,42,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (any(!is.na(desc$ignore.attribute)) & ignore.flagged.attributes) {","vector_logic_linter"
"R/convertOMLDataSetToMlr.R",114,27,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (is.factor(target) | is.logical(target))","vector_logic_linter"
"R/convertOMLRunToBMR.R",62,33,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (all(!conf.cols.intergish) & pred.class == ""PredictionClassif"") {","vector_logic_linter"
"R/convertOMLTaskToMlr.R",32,3,"style","Variable and function name style should be snake_case or symbols.","  drop.levels = TRUE,","object_name_linter"
"R/downloadOMLObject.R",40,26,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (f[[xml.ind]]$found & !overwrite) {","vector_logic_linter"
"R/downloadOMLObject.R",72,30,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (!is.null(source.url) & !is.null(binary.url)) {","vector_logic_linter"
"R/downloadOMLObject.R",102,23,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (!is.null(url) & length(url) != 0) {","vector_logic_linter"
"R/downloadOMLObject.R",103,31,"warning","Conditional expressions require scalar logical operators (&& and ||)","      if (f[[file.ind]]$found & !overwrite) {","vector_logic_linter"
"R/getCachedOMLDataSetStatus.R",31,51,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (any(cached.ds$status == ""deactivated"") > 0L & show.warnings) {","vector_logic_linter"
"R/OMLFlow_Class.R",99,3,"style","Variable and function name style should be snake_case or symbols.","  source.url = NA_character_,","object_name_linter"
"R/OMLFlow_Class.R",101,3,"style","Variable and function name style should be snake_case or symbols.","  source.format = NA_character_,","object_name_linter"
"R/OMLFlow_Class.R",103,3,"style","Variable and function name style should be snake_case or symbols.","  source.md5 = NA_character_,","object_name_linter"
"R/OMLFlow_Class.R",105,3,"style","Variable and function name style should be snake_case or symbols.","  source.path = NA_character_,","object_name_linter"
"R/OMLStudy_Class.R",41,25,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.null(flow.id) | !is.null(run.id))","vector_logic_linter"
"R/tagOMLObject.R",18,15,"style","Any function spanning multiple lines should use curly braces.","  lapply(ids, function(id)","brace_linter"
"R/tagOMLObject.R",26,15,"style","Any function spanning multiple lines should use curly braces.","  lapply(ids, function(id)","brace_linter"
"R/uploadOMLFlow.R",61,26,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.null(x$object) & !testFile(binaryfile)) {","vector_logic_linter"
"R/uploadOMLFlow.R",66,3,"style","Either both or neither branch in `if`/`else` should use curly braces.","  if (testFile(binaryfile)) {","brace_linter"
"R/uploadOMLRun.R",60,28,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (is.null(flow$object) & !is.null(bmr)) {","vector_logic_linter"
"tests/testthat/helper_testthat.R",17,18,"warning","no visible global function definition for ‘getBMRMeasures’","    expect_equal(getBMRMeasures(bmr)[[j]], bmr$measures[[j]])","object_usage_linter"
"tests/testthat/helper_testthat.R",18,18,"warning","no visible global function definition for ‘getBMRMeasureIds’","    expect_equal(getBMRMeasureIds(bmr)[[j]],  bmr$measures[[j]]$id)","object_usage_linter"
"tests/testthat/helper_with.r",11,3,"warning","no visible global function definition for ‘with_reset_config’","  with_reset_config({","object_usage_linter"
"tests/testthat/helper_with.r",19,3,"warning","no visible global function definition for ‘with_reset_config’","  with_reset_config({","object_usage_linter"
"tests/testthat/helper_with.r",29,3,"warning","no visible global function definition for ‘with_reset_config’","  with_reset_config({","object_usage_linter"
"tests/testthat/helper_with.r",36,3,"warning","no visible global function definition for ‘with_reset_config’","  with_reset_config({","object_usage_linter"
"vignettes/OpenML.Rmd",16,3,"style","Commented code should be removed.","# library(""knitr"")","commented_code_linter"
"vignettes/OpenML.Rmd",17,3,"style","Commented code should be removed.","# opts_chunk$set(cache = TRUE)","commented_code_linter"
"vignettes/OpenML.Rmd",19,58,"style","Trailing whitespace is superfluous.","setOMLConfig(apikey = ""c1994bdb7ecb3c6f3c8f3b35f4b47f1f"", ","trailing_whitespace_linter"
"vignettes/OpenML.Rmd",82,6,"style","Use <-, not =, for assignment.","task = getOMLTask(task.id = 1L)","assignment_linter"
"vignettes/OpenML.Rmd",99,5,"style","Use <-, not =, for assignment.","lrn = makeLearner(""classif.randomForest"")","assignment_linter"
"vignettes/OpenML.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","flow.id = uploadOMLFlow(lrn)","object_name_linter"
"vignettes/OpenML.Rmd",103,9,"style","Use <-, not =, for assignment.","flow.id = uploadOMLFlow(lrn)","assignment_linter"
"vignettes/OpenML.Rmd",105,1,"style","Variable and function name style should be snake_case or symbols.","run.mlr = runTaskMlr(task, lrn)","object_name_linter"
"vignettes/OpenML.Rmd",105,9,"style","Use <-, not =, for assignment.","run.mlr = runTaskMlr(task, lrn)","assignment_linter"
"vignettes/OpenML.Rmd",106,1,"style","Variable and function name style should be snake_case or symbols.","run.id = uploadOMLRun(run.mlr)","object_name_linter"
"vignettes/OpenML.Rmd",106,8,"style","Use <-, not =, for assignment.","run.id = uploadOMLRun(run.mlr)","assignment_linter"
"vignettes/OpenML.Rmd",136,7,"style","Use <-, not =, for assignment.","apikey=c1994bdb7ecb3c6f3c8f3b35f4b47f1f","assignment_linter"
"vignettes/OpenML.Rmd",136,7,"style","Put spaces around all infix operators.","apikey=c1994bdb7ecb3c6f3c8f3b35f4b47f1f","infix_spaces_linter"
"vignettes/OpenML.Rmd",188,10,"style","Use <-, not =, for assignment.","datasets = listOMLDataSets()  # returns active data sets","assignment_linter"
"vignettes/OpenML.Rmd",226,7,"style","Use <-, not =, for assignment.","tasks = listOMLTasks()","assignment_linter"
"vignettes/OpenML.Rmd",246,81,"style","Lines should not be more than 80 characters.","head(subset(tasks, task.type == ""Supervised Classification"" & data.id == 61L)[, 1:5])","line_length_linter"
"vignettes/OpenML.Rmd",252,7,"style","Use <-, not =, for assignment.","flows = listOMLFlows()","assignment_linter"
"vignettes/OpenML.Rmd",263,6,"style","Use <-, not =, for assignment.","runs = listOMLRuns(task.id = 59L)  # must be specified with the task, setup and/or implementation ID","assignment_linter"
"vignettes/OpenML.Rmd",263,81,"style","Lines should not be more than 80 characters.","runs = listOMLRuns(task.id = 59L)  # must be specified with the task, setup and/or implementation ID","line_length_linter"
"vignettes/OpenML.Rmd",266,1,"style","Variable and function name style should be snake_case or symbols.","run.results = listOMLRunEvaluations(task.id = 59L)","object_name_linter"
"vignettes/OpenML.Rmd",266,13,"style","Use <-, not =, for assignment.","run.results = listOMLRunEvaluations(task.id = 59L)","assignment_linter"
"vignettes/OpenML.Rmd",287,1,"style","Variable and function name style should be snake_case or symbols.","iris.data = getOMLDataSet(data.id = 61L)  # the iris data set has the data set ID 61","object_name_linter"
"vignettes/OpenML.Rmd",287,11,"style","Use <-, not =, for assignment.","iris.data = getOMLDataSet(data.id = 61L)  # the iris data set has the data set ID 61","assignment_linter"
"vignettes/OpenML.Rmd",287,81,"style","Lines should not be more than 80 characters.","iris.data = getOMLDataSet(data.id = 61L)  # the iris data set has the data set ID 61","line_length_linter"
"vignettes/OpenML.Rmd",293,6,"style","Use <-, not =, for assignment.","task = getOMLTask(task.id = 59L)","assignment_linter"
"vignettes/OpenML.Rmd",309,1,"style","Variable and function name style should be snake_case or symbols.","iris.data = task$input$data.set$data","object_name_linter"
"vignettes/OpenML.Rmd",309,11,"style","Use <-, not =, for assignment.","iris.data = task$input$data.set$data","assignment_linter"
"vignettes/OpenML.Rmd",316,6,"style","Use <-, not =, for assignment.","flow = getOMLFlow(flow.id = 2700L)","assignment_linter"
"vignettes/OpenML.Rmd",325,1,"style","Variable and function name style should be snake_case or symbols.","task.list = listOMLRuns(task.id = 59L)","object_name_linter"
"vignettes/OpenML.Rmd",325,11,"style","Use <-, not =, for assignment.","task.list = listOMLRuns(task.id = 59L)","assignment_linter"
"vignettes/OpenML.Rmd",327,5,"style","Use <-, not =, for assignment.","run = getOMLRun(run.id = 524027L)","assignment_linter"
"vignettes/OpenML.Rmd",355,6,"style","Use <-, not =, for assignment.","task = getOMLTask(task.id = 59L)","assignment_linter"
"vignettes/OpenML.Rmd",357,5,"style","Use <-, not =, for assignment.","lrn = makeLearner(""classif.rpart"")","assignment_linter"
"vignettes/OpenML.Rmd",358,1,"style","Variable and function name style should be snake_case or symbols.","run.mlr = runTaskMlr(task, lrn)","object_name_linter"
"vignettes/OpenML.Rmd",358,9,"style","Use <-, not =, for assignment.","run.mlr = runTaskMlr(task, lrn)","assignment_linter"
"vignettes/OpenML.Rmd",380,5,"style","Use <-, not =, for assignment.","dsc = ""Daily air quality measurements in New York, May to September 1973.","assignment_linter"
"vignettes/OpenML.Rmd",382,5,"style","Use <-, not =, for assignment.","cit = ""Chambers, J. M., Cleveland, W. S., Kleiner, B. and Tukey, P. A. (1983)","assignment_linter"
"vignettes/OpenML.Rmd",385,6,"style","Use <-, not =, for assignment.","desc = makeOMLDataSetDescription(name = ""airquality"",","assignment_linter"
"vignettes/OpenML.Rmd",387,81,"style","Lines should not be more than 80 characters.","  creator = ""New York State Department of Conservation (ozone data) and the National","line_length_linter"
"vignettes/OpenML.Rmd",392,81,"style","Lines should not be more than 80 characters.","  url = ""https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html"",","line_length_linter"
"vignettes/OpenML.Rmd",397,1,"style","Variable and function name style should be snake_case or symbols.","air.data = makeOMLDataSet(desc = desc,","object_name_linter"
"vignettes/OpenML.Rmd",397,10,"style","Use <-, not =, for assignment.","air.data = makeOMLDataSet(desc = desc,","assignment_linter"
"vignettes/OpenML.Rmd",406,2,"style","Commented code should be removed.","#dataset.id = uploadOMLDataSet(air.data)","commented_code_linter"
"vignettes/OpenML.Rmd",420,5,"style","Use <-, not =, for assignment.","lrn = makeLearner(""classif.randomForest"")","assignment_linter"
"vignettes/OpenML.Rmd",421,1,"style","Variable and function name style should be snake_case or symbols.","flow.id = uploadOMLFlow(lrn)","object_name_linter"
"vignettes/OpenML.Rmd",421,9,"style","Use <-, not =, for assignment.","flow.id = uploadOMLFlow(lrn)","assignment_linter"
"vignettes/OpenML.Rmd",432,10,"style","Use <-, not =, for assignment.","learners = list(","assignment_linter"
"vignettes/OpenML.Rmd",437,1,"style","Variable and function name style should be snake_case or symbols.","task.ids = c(57, 59, 2382)","object_name_linter"
"vignettes/OpenML.Rmd",437,10,"style","Use <-, not =, for assignment.","task.ids = c(57, 59, 2382)","assignment_linter"
"vignettes/OpenML.Rmd",440,10,"style","Use <-, not =, for assignment.","    task = getOMLTask(id)","assignment_linter"
"vignettes/OpenML.Rmd",441,9,"style","Use <-, not =, for assignment.","    res = runTaskMlr(task, lrn)$run","assignment_linter"
"vignettes/OpenML.Rmd",442,5,"style","Variable and function name style should be snake_case or symbols.","    run.id = uploadOMLRun(res)  # upload results","object_name_linter"
"vignettes/OpenML.Rmd",442,12,"style","Use <-, not =, for assignment.","    run.id = uploadOMLRun(res)  # upload results","assignment_linter"
