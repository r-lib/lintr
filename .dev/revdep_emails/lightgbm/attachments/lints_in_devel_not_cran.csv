"filename","line_number","column_number","type","message","line","linter"
"demo/basic_walkthrough.R",11,81,"style","Lines should not be more than 80 characters.","# The loaded data is stored in sparseMatrix, and label is a numeric vector in {0,1}","line_length_linter"
"demo/basic_walkthrough.R",25,81,"style","Lines should not be more than 80 characters.","# Note: we are putting in sparse matrix here, lightgbm naturally handles sparse input","line_length_linter"
"demo/basic_walkthrough.R",26,81,"style","Lines should not be more than 80 characters.","# Use sparse matrix when your feature is sparse (e.g. when you are using one-hot encoding vector)","line_length_linter"
"demo/basic_walkthrough.R",44,81,"style","Lines should not be more than 80 characters.","# You can also put in lgb.Dataset object, which stores label, data and other meta datas needed for advanced features","line_length_linter"
"demo/basic_walkthrough.R",82,81,"style","Lines should not be more than 80 characters.","# Since we do not have this file with us, the following line is just for illustration","line_length_linter"
"demo/basic_walkthrough.R",84,7,"style","Commented code should be removed.","#     data = ""agaricus.train.svm""","commented_code_linter"
"demo/basic_walkthrough.R",111,81,"style","Lines should not be more than 80 characters.","dtrain <- lgb.Dataset(data = train$data, label = train$label, free_raw_data = FALSE)","line_length_linter"
"demo/boost_from_prediction.R",8,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, data = agaricus.test$data, label = agaricus.test$label)","line_length_linter"
"demo/boost_from_prediction.R",24,81,"style","Lines should not be more than 80 characters.","# Note: we need the margin value instead of transformed prediction in set_init_score","line_length_linter"
"demo/categorical_features_rules.R",58,81,"style","Lines should not be more than 80 characters.","bank_test <- lgb.convert_with_rules(data = bank_test, rules = bank_rules$rules)$data","line_length_linter"
"demo/categorical_features_rules.R",70,81,"style","Lines should not be more than 80 characters.","# The categorical features can be passed to lgb.train to not copy and paste a lot","line_length_linter"
"demo/cross_validation.R",7,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, data = agaricus.test$data, label = agaricus.test$label)","line_length_linter"
"demo/cross_validation.R",52,81,"style","Lines should not be more than 80 characters.","# User-defined evaluation function returns a pair (metric_name, result, higher_better)","line_length_linter"
"demo/cross_validation.R",53,81,"style","Lines should not be more than 80 characters.","# NOTE: when you do customized loss function, the default prediction value is margin","line_length_linter"
"demo/cross_validation.R",55,81,"style","Lines should not be more than 80 characters.","# For example, we are doing logistic loss, the prediction is score before logistic transformation","line_length_linter"
"demo/cross_validation.R",56,81,"style","Lines should not be more than 80 characters.","# Keep this in mind when you use the customization, and maybe you need write customized evaluation function","line_length_linter"
"demo/early_stopping.R",9,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, data = agaricus.test$data, label = agaricus.test$label)","line_length_linter"
"demo/early_stopping.R",21,81,"style","Lines should not be more than 80 characters.","# User define objective function, given prediction, return gradient and second order gradient","line_length_linter"
"demo/early_stopping.R",31,81,"style","Lines should not be more than 80 characters.","# User-defined evaluation function returns a pair (metric_name, result, higher_better)","line_length_linter"
"demo/early_stopping.R",32,81,"style","Lines should not be more than 80 characters.","# NOTE: when you do customized loss function, the default prediction value is margin","line_length_linter"
"demo/early_stopping.R",34,81,"style","Lines should not be more than 80 characters.","# For example, we are doing logistic loss, the prediction is score before logistic transformation","line_length_linter"
"demo/early_stopping.R",36,81,"style","Lines should not be more than 80 characters.","# Keep this in mind when you use the customization, and maybe you need write customized evaluation function","line_length_linter"
"demo/efficient_many_training.R",2,81,"style","Lines should not be more than 80 characters.","# In the case of many trainings (like 100+ models), RAM will be eaten very quickly","line_length_linter"
"demo/efficient_many_training.R",5,81,"style","Lines should not be more than 80 characters.","# More results can be found here: https://github.com/microsoft/LightGBM/issues/879#issuecomment-326656580","line_length_linter"
"demo/efficient_many_training.R",7,81,"style","Lines should not be more than 80 characters.","# With reset=FALSE you get after 500 iterations (not 1000): OS reports 27GB usage, while R gc() reports 1.5GB.","line_length_linter"
"demo/efficient_many_training.R",9,81,"style","Lines should not be more than 80 characters.","# Doing reset=TRUE and calling gc() in the loop will have OS 1.3GB. Thanks for the latest tip.""","line_length_linter"
"demo/efficient_many_training.R",16,81,"style","Lines should not be more than 80 characters.","x_data <- matrix(rnorm(n = 100000000L, mean = 0.0, sd = 100.0), nrow = 1000000L, ncol = 100L)","line_length_linter"
"demo/efficient_many_training.R",23,81,"style","Lines should not be more than 80 characters.","# Loop through a training of 1000 models, please check your RAM on your task manager","line_length_linter"
"demo/leaf_stability.R",1,81,"style","Lines should not be more than 80 characters.","# We are going to look at how iterating too much might generate observation instability.","line_length_linter"
"demo/leaf_stability.R",9,81,"style","Lines should not be more than 80 characters.","# output of `RColorBrewer::brewer.pal(10, ""RdYlGn"")`, hardcooded here to avoid a dependency","line_length_linter"
"demo/leaf_stability.R",108,3,"style","Commented code should be removed.","# Z = logloss","commented_code_linter"
"demo/leaf_stability.R",124,81,"style","Lines should not be more than 80 characters.","new_data$Z <- -1.0 * (agaricus.test$label * log(new_data$Y) + (1L - agaricus.test$label) * log(1L - new_data$Y))","line_length_linter"
"demo/leaf_stability.R",140,81,"style","Lines should not be more than 80 characters.","# On the second plot, we clearly notice the lower the bin (the lower the leaf value), the higher the loss","line_length_linter"
"demo/leaf_stability.R",178,81,"style","Lines should not be more than 80 characters.","new_data2$Z <- -1.0 * (agaricus.test$label * log(new_data2$Y) + (1L - agaricus.test$label) * log(1L - new_data2$Y))","line_length_linter"
"demo/leaf_stability.R",194,81,"style","Lines should not be more than 80 characters.","# On the second plot, we clearly notice the lower the bin (the lower the leaf value), the higher the loss","line_length_linter"
"demo/leaf_stability.R",195,81,"style","Lines should not be more than 80 characters.","# On the third plot, it is clearly not smooth! We are severely overfitting the data, but the rules are","line_length_linter"
"demo/leaf_stability.R",234,81,"style","Lines should not be more than 80 characters.","new_data3$Z <- -1.0 * (agaricus.test$label * log(new_data3$Y) + (1L - agaricus.test$label) * log(1L - new_data3$Y))","line_length_linter"
"demo/leaf_stability.R",250,81,"style","Lines should not be more than 80 characters.","# On the third plot, it is clearly not smooth! We are severely overfitting the data, but the rules","line_length_linter"
"demo/leaf_stability.R",252,81,"style","Lines should not be more than 80 characters.","# However, if the rules were not true, the loss would explode. See the sudden spikes?","line_length_linter"
"demo/multiclass_custom_objective.R",17,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, data = test[, 1L:4L], label = test[, 5L])","line_length_linter"
"demo/multiclass_custom_objective.R",44,81,"style","Lines should not be more than 80 characters.","# User defined objective function, given prediction, return gradient and second order gradient","line_length_linter"
"demo/multiclass_custom_objective.R",48,81,"style","Lines should not be more than 80 characters.","    # preds is a matrix with rows corresponding to samples and columns corresponding to choices","line_length_linter"
"demo/multiclass.R",17,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, data = test[, 1L:4L], label = test[, 5L])","line_length_linter"
"demo/multiclass.R",37,81,"style","Lines should not be more than 80 characters.","# Order: obs1 class1, obs1 class2, obs1 class3, obs2 class1, obs2 class2, obs2 class3...","line_length_linter"
"demo/weight_param.R",9,81,"style","Lines should not be more than 80 characters.","# - Run 1: sum of weights equal to 6513 (x 1e-5) without adjusted regularization (not learning)","line_length_linter"
"demo/weight_param.R",10,81,"style","Lines should not be more than 80 characters.","# - Run 2: sum of weights equal to 6513 (x 1e-5) adjusted regularization (learning)","line_length_linter"
"demo/weight_param.R",23,81,"style","Lines should not be more than 80 characters.","dtest <- lgb.Dataset.create.valid(dtrain, test$data, label = test$label, weight = weights2)","line_length_linter"
"demo/weight_param.R",26,81,"style","Lines should not be more than 80 characters.","# Run 1: sum of weights equal to 6513 (x 1e-5) without adjusted regularization (not learning)","line_length_linter"
"demo/weight_param.R",28,81,"style","Lines should not be more than 80 characters.","# min_sum_hessian alone is bigger than the sum of weights, thus you will never learn anything","line_length_linter"
"demo/weight_param.R",50,81,"style","Lines should not be more than 80 characters.","# Run 2: sum of weights equal to 6513 (x 1e-5) with adjusted regularization (learning)","line_length_linter"
"demo/weight_param.R",51,81,"style","Lines should not be more than 80 characters.","# Adjusted regularization just consisting in multiplicating results by 1e4 (x10000)","line_length_linter"
"demo/weight_param.R",52,81,"style","Lines should not be more than 80 characters.","# Notice how it learns, there is no issue as we adjusted regularization ourselves","line_length_linter"
"inst/make-r-def.R",49,22,"warning","no visible global function definition for ‘shoQuote’","            , args = shoQuote(args)","object_usage_linter"
"R/aliases.R",50,13,"warning","no visible binding for global variable ‘LGBM_DumpParamAliases_R’","            LGBM_DumpParamAliases_R","object_usage_linter"
"R/lgb.cv.R",288,14,"warning","no visible global function definition for ‘cb_early_stop’","      , cb = cb_early_stop(","object_usage_linter"
"R/lgb.cv.R",583,7,"style","Variable and function name style should be snake_case or symbols.","      foldVector[y == dimnames(numInClass)$y[i]] <- sample(seqVector)","object_name_linter"
"R/lgb.train.R",253,14,"warning","no visible global function definition for ‘cb_early_stop’","      , cb = cb_early_stop(","object_usage_linter"
"tests/testthat/test_basic.R",1758,10,"style","Variable and function name style should be snake_case or symbols.","    mode(X) <- data_mode","object_name_linter"
"tests/testthat/test_basic.R",2591,5,"style","Variable and function name style should be snake_case or symbols.","    X[, 1L] <- rnorm(100L)","object_name_linter"
"tests/testthat/test_basic.R",2592,5,"style","Variable and function name style should be snake_case or symbols.","    X[, 2L] <- sample(seq_len(4L), size = 100L, replace = TRUE)","object_name_linter"
"tests/testthat/test_Predictor.R",51,18,"style","Variable and function name style should be snake_case or symbols.","    storage.mode(X_double) <- ""double""","object_name_linter"
"tests/testthat/test_Predictor.R",310,15,"style","Variable and function name style should be snake_case or symbols.","    row.names(Xcopy) <- NULL","object_name_linter"
"tests/testthat/test_Predictor.R",327,15,"style","Variable and function name style should be snake_case or symbols.","    row.names(Xcopy) <- NULL","object_name_linter"
"tests/testthat/test_Predictor.R",358,15,"style","Variable and function name style should be snake_case or symbols.","    row.names(X) <- paste(""rname"", seq(1L, nrow(X)), sep = """")","object_name_linter"
"tests/testthat/test_Predictor.R",373,15,"style","Variable and function name style should be snake_case or symbols.","    row.names(X) <- paste(""rname"", seq(1L, nrow(X)), sep = """")","object_name_linter"
"vignettes/basic_walkthrough.Rmd",59,1,"style","Variable and function name style should be snake_case or symbols.","X <- data.matrix(bank[, c(""age"", ""balance"")])","object_name_linter"
