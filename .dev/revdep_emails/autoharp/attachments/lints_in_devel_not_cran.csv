"filename","line_number","column_number","type","message","line","linter"
"inst/examples/question_sheets/sample_questions_01.Rmd",19,3,"style","Variable and function name style should be snake_case or symbols.","  U <- runif(n)","object_name_linter"
"inst/examples/question_sheets/sample_questions_01.Rmd",20,3,"style","Variable and function name style should be snake_case or symbols.","  X <- U^(1/4)","object_name_linter"
"inst/examples/question_sheets/sample_questions_01.Rmd",20,12,"style","Put spaces around all infix operators.","  X <- U^(1/4)","infix_spaces_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",12,3,"style","Variable and function name style should be snake_case or symbols.","  U <- runif(n)","object_name_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",13,3,"style","Variable and function name style should be snake_case or symbols.","  X <- U^(1/4)","object_name_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",13,12,"style","Put spaces around all infix operators.","  X <- U^(1/4)","infix_spaces_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",16,1,"style","Variable and function name style should be snake_case or symbols.","X <- rf(1e4)","object_name_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",20,1,"style","Variable and function name style should be snake_case or symbols.","lenX <- (length(X) == length(.X))","object_name_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","sd.X <- sd(X)","object_name_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",31,69,"style","Put spaces around all infix operators.","for_loop <- fapply(f1, detect_for_in_fn_def, fn_name = ""rf"", combine=TRUE, ","infix_spaces_linter"
"inst/examples/soln_templates/soln_template_01.Rmd",31,75,"style","Trailing whitespace is superfluous.","for_loop <- fapply(f1, detect_for_in_fn_def, fn_name = ""rf"", combine=TRUE, ","trailing_whitespace_linter"
"inst/examples/soln_templates/soln_template_02.Rmd",11,1,"style","Variable and function name style should be snake_case or symbols.","X <- c(1L, 3L, 5L, 7L,  9L, 11L)","object_name_linter"
"inst/examples/soln_templates/soln_template_02.Rmd",12,1,"style","Variable and function name style should be snake_case or symbols.","mean_X <- mean(X)","object_name_linter"
"inst/examples/soln_templates/soln_template_02.Rmd",16,1,"style","Variable and function name style should be snake_case or symbols.","last.X <- X[length(X)]","object_name_linter"
"R/check_correctness.R",15,31,"style","Any function spanning multiple lines should use curly braces.","                              function(x) paste0(as.character(x$srcref),","brace_linter"
"R/check_correctness.R",71,3,"warning","local variable ‘copy_out’ assigned but may not be used","  copy_out <- sapply(obj_to_copy,","object_usage_linter"
"R/check_runtime.R",20,64,"style","Put spaces around all infix operators.","check_runtime <- function(stud_fname, knit_root_dir, return_env=FALSE) {","infix_spaces_linter"
"R/examplify_to_r.R",21,56,"style","Put spaces around all infix operators.","examplify_to_r <- function(in_fname, out_fname, verbose=FALSE) {","infix_spaces_linter"
"R/forestharp_helpers.R",236,37,"style","Put spaces around all infix operators.","detect_growing <- function(th, count=FALSE, within_for=FALSE) {","infix_spaces_linter"
"R/forestharp_helpers.R",236,55,"style","Put spaces around all infix operators.","detect_growing <- function(th, count=FALSE, within_for=FALSE) {","infix_spaces_linter"
"R/forestharp.R",53,32,"style","Any function spanning multiple lines should use curly braces.","  all_trees <- lapply(all_exp, function(x)","brace_linter"
"R/forestharp.R",64,24,"style","Any function spanning multiple lines should use curly braces.","    lint_out <- Filter(function(x)","brace_linter"
"R/forestharp.R",67,24,"style","Any function spanning multiple lines should use curly braces.","    lint_out <- Filter(function(x)","brace_linter"
"R/generate_thumbnails.R",24,42,"style","Put spaces around all infix operators.","                                anonymise=FALSE) {","infix_spaces_linter"
"R/lang_2_tree_helpers.R",107,2,"style","Missing terminal newline.","}","trailing_blank_lines_linter"
"R/lum_local_match.R",25,3,"style","Either both or neither branch in `if`/`else` should use curly braces.","  else{","brace_linter"
"R/lum_local_match.R",25,7,"style","There should be a space before an opening curly brace.","  else{","brace_linter"
"R/nlp_related.R",15,54,"style","Put spaces around all infix operators.","rmd_to_token_count <- function(fname, include_actuals=TRUE) {","infix_spaces_linter"
"R/populate_soln_env.R",104,42,"style","Put spaces around all infix operators.","                              render_only=FALSE, output=NULL) {","infix_spaces_linter"
"R/populate_soln_env.R",104,56,"style","Put spaces around all infix operators.","                              render_only=FALSE, output=NULL) {","infix_spaces_linter"
"R/render_one.R",31,69,"style","Put spaces around all infix operators.","                       max_time_per_run = 120, permission_to_install=FALSE) {","infix_spaces_linter"
"R/render_one.R",135,7,"style","`else` should come on the same line as the previous `}`.","      else","brace_linter"
"R/reset_path.R",39,2,"style","Missing terminal newline.","}","trailing_blank_lines_linter"
"R/to_BFS.R",30,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/tree_kernel.R",20,34,"style","Put spaces around all infix operators.","tree_sim <- function(t1, t2, norm=FALSE, ...) {","infix_spaces_linter"
"R/tree_kernel.R",396,48,"style","Put spaces around all infix operators.","jaccard_treeharp <- function(th1, th2, weighted=FALSE) {","infix_spaces_linter"
"R/tree_routines.R",77,51,"style","Put spaces around all infix operators.","subtree_at <- function(obj, at_node, preserve_call=FALSE) {","infix_spaces_linter"
"R/tree_routines.R",99,13,"style","There should be a space before an opening curly brace.","      } else{","brace_linter"
"R/tree_routines.R",211,40,"style","Put spaces around all infix operators.","is_connected <- function(adj_list, root=1) {","infix_spaces_linter"
"R/tree_routines.R",255,53,"style","Put spaces around all infix operators.","is_cyclic_r <- function(adj_mat, node_v, parent_node=-1, visited_env) {","infix_spaces_linter"
"R/tree_routines.R",265,10,"style","There should be a space before an opening curly brace.","    }else{","brace_linter"
"R/tree_routines.R",470,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/utils.R",64,40,"style","Put spaces around all infix operators.","clean_dir <- function(dir_name, verbose=FALSE) {","infix_spaces_linter"
"R/utils.R",199,3,"style","Either both or neither branch in `if`/`else` should use curly braces.","  else {","brace_linter"
"R/write_html.R",2,46,"style","Only use double-quotes.","  as.character(shiny::tags$style(shiny::HTML('","single_quotes_linter"
"tests/testthat/example_01.R",2,11,"style","Missing terminal newline.","y <- 11:20","trailing_blank_lines_linter"
"tests/testthat/example_04.R",2,11,"style","Missing terminal newline.","y <- 11:19","trailing_blank_lines_linter"
"tests/testthat/soln_template_02.Rmd",7,1,"style","Variable and function name style should be snake_case or symbols.","X <- 1:10","object_name_linter"
"tests/testthat/soln_template_02.Rmd",8,1,"style","Variable and function name style should be snake_case or symbols.","Y <- LETTERS[1:5]","object_name_linter"
"tests/testthat/soln_template_02.Rmd",9,1,"style","Variable and function name style should be snake_case or symbols.","Z <- 10:15","object_name_linter"
"tests/testthat/soln_template_02.Rmd",14,1,"style","Variable and function name style should be snake_case or symbols.","Xmean <- mean(X)","object_name_linter"
"tests/testthat/soln_template_02.Rmd",15,1,"style","Variable and function name style should be snake_case or symbols.","Zmean <- mean(Z)","object_name_linter"
"tests/testthat/soln_template_02.Rmd",19,1,"style","Variable and function name style should be snake_case or symbols.","Y1 <- Y[3] # Note that it is character here.","object_name_linter"
