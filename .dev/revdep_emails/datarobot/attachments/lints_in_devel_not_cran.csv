"filename","line_number","column_number","type","message","line","linter"
"inst/doc/AdvancedTuning.Rmd",22,1,"style","Variable and function name style should be snake_case or symbols.","tuningJobId <- RunInteractiveTuning(myModel)","object_name_linter"
"inst/doc/AdvancedTuning.Rmd",28,1,"style","Variable and function name style should be snake_case or symbols.","tunedModel <- GetModelFromJobId(myModel$projectId, tuningJobId)","object_name_linter"
"inst/doc/AdvancedTuning.Rmd",54,1,"style","Variable and function name style should be snake_case or symbols.","myXGBModel <- GetModel(projectId, modelId)","object_name_linter"
"inst/doc/AdvancedTuning.Rmd",55,1,"style","Variable and function name style should be snake_case or symbols.","RunTune <- StartTuningSession(myXGBModel)","object_name_linter"
"inst/doc/AdvancedTuning.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","tuningJob <- RunTune(myXGBModel, colsample_bytree = 0.4, colsample_bylevel = 0.8)","object_name_linter"
"inst/doc/AdvancedTuning.Rmd",56,81,"style","Lines should not be more than 80 characters.","tuningJob <- RunTune(myXGBModel, colsample_bytree = 0.4, colsample_bylevel = 0.8)","line_length_linter"
"inst/doc/AdvancedTuning.Rmd",57,1,"style","Variable and function name style should be snake_case or symbols.","tunedModel <- GetModelFromJobId(projectId, tuningJob)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",37,81,"style","Lines should not be more than 80 characters.","ConnectToDataRobot(endpoint = ""http://<YOUR DR SERVER>/api/v2"", token = ""<YOUR API TOKEN>"")","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",46,1,"style","Variable and function name style should be snake_case or symbols.","lendingClubURL <- ""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv""","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",46,81,"style","Lines should not be more than 80 characters.","lendingClubURL <- ""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv""","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",79,1,"style","Variable and function name style should be snake_case or symbols.","allModels <- ListModels(project)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",81,1,"style","Variable and function name style should be snake_case or symbols.","modelFrame <- as.data.frame(allModels)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",83,27,"style","Only use double-quotes.","if (project$metric %in% c('AUC', 'Gini Norm')) {","single_quotes_linter"
"inst/doc/AdvancedVignette.Rmd",83,34,"style","Only use double-quotes.","if (project$metric %in% c('AUC', 'Gini Norm')) {","single_quotes_linter"
"inst/doc/AdvancedVignette.Rmd",84,3,"style","Variable and function name style should be snake_case or symbols.","  bestIndex <- which.max(metric)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",86,3,"style","Variable and function name style should be snake_case or symbols.","  bestIndex <- which.min(metric)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",88,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- allModels[[bestIndex]]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",93,1,"style","Variable and function name style should be snake_case or symbols.","allModels <- readRDS(""modelsModelInsights.rds"")","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",94,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- allModels[[1]]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",115,1,"style","Variable and function name style should be snake_case or symbols.","ValidationLiftChart <- GetLiftChart(bestModel, source = ""validation"")","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",122,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartPlot <- function(ValidationLiftChart, bins = 10) {","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",122,27,"style","Variable and function name style should be snake_case or symbols.","LiftChartPlot <- function(ValidationLiftChart, bins = 10) {","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",124,5,"style","Variable and function name style should be snake_case or symbols.","    ValidationLiftChart$bins <- rep(seq(bins), each = 60 / bins)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",125,5,"style","Variable and function name style should be snake_case or symbols.","    ValidationLiftChart <- data.table(ValidationLiftChart)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",133,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartData <- LiftChartPlot(ValidationLiftChart)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",142,3,"style","Commented code should be removed.","# dr_dark_blue <- ""#08233F""","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",143,3,"style","Commented code should be removed.","# dr_blue <- ""#1F77B4""","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",144,3,"style","Commented code should be removed.","# dr_orange <- ""#FF7F0E""","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",145,3,"style","Commented code should be removed.","# LiftChartData <- readRDS(""LiftChartDataVal.rds"")","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",146,3,"style","Commented code should be removed.","# par(bg = dr_dark_blue)","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",149,3,"style","Commented code should be removed.","# lines(LiftChartData$Predicted, col = dr_blue, pch = 20, type = ""b"")","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","AllLiftChart <- ListLiftCharts(bestModel)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",157,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartData <- LiftChartPlot(AllLiftChart[[""crossValidation""]])","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",166,3,"style","Commented code should be removed.","# LiftChartData <- readRDS(""LiftChartDataCV.rds"")","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",167,3,"style","Commented code should be removed.","# par(bg = dr_dark_blue)","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",170,3,"style","Commented code should be removed.","# lines(LiftChartData$Predicted, col = dr_blue, pch = 20, type = ""b"")","commented_code_linter"
"inst/doc/AdvancedVignette.Rmd",212,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocCurve <- GetRocCurve(bestModel)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",213,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocPoints <- ValidationRocCurve[[""rocPoints""]]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",216,81,"style","Lines should not be more than 80 characters.","plot(ValidationRocPoints$falsePositiveRate, ValidationRocPoints$truePositiveRate,","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",218,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",220,17,"style","Commas should always have a space after.","     ylim = c(0,1), xlim = c(0,1),","commas_linter"
"inst/doc/AdvancedVignette.Rmd",220,32,"style","Commas should always have a space after.","     ylim = c(0,1), xlim = c(0,1),","commas_linter"
"inst/doc/AdvancedVignette.Rmd",227,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocPoints <- readRDS(""ValidationRocPoints.rds"")","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",229,81,"style","Lines should not be more than 80 characters.","plot(ValidationRocPoints$falsePositiveRate, ValidationRocPoints$truePositiveRate,","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",231,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",240,1,"style","Variable and function name style should be snake_case or symbols.","AllRocCurve <- ListRocCurves(bestModel)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",241,1,"style","Variable and function name style should be snake_case or symbols.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",241,42,"style","Only use double-quotes.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","single_quotes_linter"
"inst/doc/AdvancedVignette.Rmd",241,63,"style","Only use double-quotes.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","single_quotes_linter"
"inst/doc/AdvancedVignette.Rmd",242,35,"style","Only use double-quotes.","saveRDS(CrossValidationRocPoints, 'CrossValidationRocPoints.rds')","single_quotes_linter"
"inst/doc/AdvancedVignette.Rmd",244,81,"style","Lines should not be more than 80 characters.","plot(CrossValidationRocPoints$falsePositiveRate, CrossValidationRocPoints$truePositiveRate,","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",246,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",253,1,"style","Variable and function name style should be snake_case or symbols.","CrossValidationRocPoints <- readRDS(""CrossValidationRocPoints.rds"")","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",255,81,"style","Lines should not be more than 80 characters.","plot(CrossValidationRocPoints$falsePositiveRate, CrossValidationRocPoints$truePositiveRate,","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",257,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",267,23,"style","Trailing whitespace is superfluous.","  ValidationRocPoints, ","trailing_whitespace_linter"
"inst/doc/AdvancedVignette.Rmd",278,81,"style","Lines should not be more than 80 characters.","threshold <- ValidationRocPoints$threshold[which.max(ValidationRocPoints$f1Score)]","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",284,81,"style","Lines should not be more than 80 characters.","ValidationRocPoints[ValidationRocPoints$threshold == tail(Filter(function(x) x > threshold,","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",285,81,"style","Lines should not be more than 80 characters.","                                                                 ValidationRocPoints$threshold),","line_length_linter"
"inst/doc/AdvancedVignette.Rmd",302,1,"style","Variable and function name style should be snake_case or symbols.","wordModels <- allModels[grep(""Word"", lapply(allModels, `[[`, ""modelType""))]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",303,1,"style","Variable and function name style should be snake_case or symbols.","wordModel <- wordModels[[1]]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",305,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- GetWordCloud(project, wordModel$modelId)","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",311,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- readRDS(""wordCloudModelInsights.rds"")","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",318,47,"style","Trailing whitespace is superfluous.","  colormap::colormap(c(""#255FEC"", ""#2DBEF9"")), ","trailing_whitespace_linter"
"inst/doc/AdvancedVignette.Rmd",320,29,"style","Trailing whitespace is superfluous.","    c(""#FFAC9D"", ""#D80909""), ","trailing_whitespace_linter"
"inst/doc/AdvancedVignette.Rmd",329,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- wordCloud[!wordCloud$isStopword, ]","object_name_linter"
"inst/doc/AdvancedVignette.Rmd",331,56,"style","Trailing whitespace is superfluous.","# Specify colors similar to what DataRobot produces for ","trailing_whitespace_linter"
"inst/doc/Calendars.Rmd",18,81,"style","Lines should not be more than 80 characters.","calendar <- read.csv(system.file(""extdata"", ""calendar.csv"", package = ""datarobot""))","line_length_linter"
"inst/doc/Calendars.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"inst/doc/Calendars.Rmd",72,1,"style","Variable and function name style should be snake_case or symbols.","newCalendar <- UpdateCalendar(calendar, name = ""newName"")","object_name_linter"
"inst/doc/Calendars.Rmd",88,81,"style","Lines should not be more than 80 characters.","project <- SetupProject(timeSeriesData, projectName = ""time series with calendar"")","line_length_linter"
"inst/doc/Calendars.Rmd",91,81,"style","Lines should not be more than 80 characters.","                                                  autopilotDataSelectionMethod = ""duration"",","line_length_linter"
"inst/doc/Calendars.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"inst/doc/ComparingSubsets.R",24,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima$insulin <- NULL","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",63,1,"style","Variable and function name style should be snake_case or symbols.","MissPctInsulin <- round(100 * length(which(PimaIndiansDiabetes$insulin == 0)) /","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","insulinMissing <- as.numeric(PimaIndiansDiabetes$insulin == 0)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",76,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima <- PimaIndiansDiabetes","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",77,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima$insulin <- NULL","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",78,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima$insulinMissing <- insulinMissing","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",84,1,"style","Variable and function name style should be snake_case or symbols.","insulinProject <- StartProject(dataSource = modifiedPima,","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",93,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelList <- ListModels(insulinProject)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",98,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelList <- readRDS(""insulinModelList.rds"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",99,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelFrame <- as.data.frame(insulinModelList, simple = FALSE)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",107,1,"style","Variable and function name style should be snake_case or symbols.","bestIndex <- which.min(insulinModelFrame$LogLoss.validation)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",108,1,"style","Variable and function name style should be snake_case or symbols.","worstIndex <- which.max(insulinModelFrame$LogLoss.validation)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",118,81,"style","Lines should not be more than 80 characters.","plot(insulinModelFrame$AUC.validation, xlab = ""Model number"", ylab = ""Area under the ROC curve"")","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",119,81,"style","Lines should not be more than 80 characters.","points(bestIndex, insulinModelFrame$AUC.validation[bestIndex], pch = 16, col = ""red"")","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",129,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(n = 9)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",130,1,"style","Variable and function name style should be snake_case or symbols.","modelList[[1]] <- insulinModelList","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",131,1,"style","Variable and function name style should be snake_case or symbols.","allVars <- colnames(modifiedPima)[1:8]","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",132,1,"style","Variable and function name style should be snake_case or symbols.","permFile <- tempfile(fileext = ""permFile.csv"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",134,3,"style","Variable and function name style should be snake_case or symbols.","  varName <- allVars[i]","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",136,3,"style","Variable and function name style should be snake_case or symbols.","  projName <- paste(""PermProject"",varName,sep="""")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",136,35,"style","Commas should always have a space after.","  projName <- paste(""PermProject"",varName,sep="""")","commas_linter"
"inst/doc/ComparingSubsets.Rmd",136,43,"style","Commas should always have a space after.","  projName <- paste(""PermProject"",varName,sep="""")","commas_linter"
"inst/doc/ComparingSubsets.Rmd",136,46,"style","Put spaces around all infix operators.","  projName <- paste(""PermProject"",varName,sep="""")","infix_spaces_linter"
"inst/doc/ComparingSubsets.Rmd",137,3,"style","Variable and function name style should be snake_case or symbols.","  permProject <- StartProject(permFile, projectName = projName, target = ""insulinMissing"", wait = TRUE)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",137,81,"style","Lines should not be more than 80 characters.","  permProject <- StartProject(permFile, projectName = projName, target = ""insulinMissing"", wait = TRUE)","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",138,3,"style","Variable and function name style should be snake_case or symbols.","  modelList[[i+1]] <- ListModels(permProject)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",138,15,"style","Put spaces around all infix operators.","  modelList[[i+1]] <- ListModels(permProject)","infix_spaces_linter"
"inst/doc/ComparingSubsets.Rmd",147,1,"style","Variable and function name style should be snake_case or symbols.","logLossDeltas <- readRDS(""insulinDeltaFrame.rds"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",151,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which.min(logLossDeltas$originalLogLoss)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",152,81,"style","Lines should not be more than 80 characters.","points(seq(1, 8, 1), logLossDeltas[bestRow, 1:8], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",164,1,"style","Variable and function name style should be snake_case or symbols.","AUCshiftFrame <- readRDS(""AUCshiftFrame.rds"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",165,1,"style","Variable and function name style should be snake_case or symbols.","sortIndex <- order(logLossDeltas$originalLogLoss)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",166,81,"style","Lines should not be more than 80 characters.","plot(AUCshiftFrame$originalAUC[sortIndex], xlab = ""Model number"", ylab = ""Area under ROC curve"")","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",174,1,"style","Variable and function name style should be snake_case or symbols.","missingInsulin <- as.numeric(PimaIndiansDiabetes$insulin == 0)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",175,1,"style","Variable and function name style should be snake_case or symbols.","missingTriceps <- as.numeric(PimaIndiansDiabetes$triceps == 0)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",198,1,"style","Variable and function name style should be snake_case or symbols.","lossIndex <- which(dataCar$claimcst0 > 0)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",199,1,"style","Variable and function name style should be snake_case or symbols.","keepVars <- c(""veh_value"", ""exposure"", ""claimcst0"", ""veh_body"", ""veh_age"",","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",201,1,"style","Variable and function name style should be snake_case or symbols.","lossFrame <- subset(dataCar, claimcst0 > 0, select = keepVars)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",222,1,"style","Variable and function name style should be snake_case or symbols.","lossPct <- round(100 * length(lossIndex) / nrow(dataCar), digits = 1)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",223,1,"style","Variable and function name style should be snake_case or symbols.","anomIndex <- which(lossFrame$claimcst0 == 200)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",224,1,"style","Variable and function name style should be snake_case or symbols.","anomPct <- round(100 * length(anomIndex) / length(lossIndex), digits = 1)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",235,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame <- lossFrame","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",236,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame$claimcst0 <- NULL","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",237,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame$anomaly <- anomaly","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",238,1,"style","Variable and function name style should be snake_case or symbols.","anomProject <- StartProject(anomFrame, projectName = ""AnomalyProject"", target = anomaly, wait = TRUE)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",238,81,"style","Lines should not be more than 80 characters.","anomProject <- StartProject(anomFrame, projectName = ""AnomalyProject"", target = anomaly, wait = TRUE)","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",239,1,"style","Variable and function name style should be snake_case or symbols.","anomalyModelList <- ListModels(anomProject)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",247,1,"style","Variable and function name style should be snake_case or symbols.","anomalyLeaderboard <- readRDS(""anomalyModelList.rds"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",248,1,"style","Variable and function name style should be snake_case or symbols.","anomalyLeaderFrame <- as.data.frame(anomalyLeaderboard, simple = FALSE)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",249,1,"style","Variable and function name style should be snake_case or symbols.","plotPct <- max(anomalyLeaderFrame$samplePct)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",250,81,"style","Lines should not be more than 80 characters.","plot(anomalyLeaderboard, pct = plotPct, orderDecreasing = TRUE, xlim = c(0, 0.45))","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",251,81,"style","Lines should not be more than 80 characters.","abline(v = min(anomalyLeaderFrame$LogLoss.validation), lty = 2, lwd = 2, col = ""magenta"")","line_length_linter"
"inst/doc/ComparingSubsets.Rmd",258,1,"style","Variable and function name style should be snake_case or symbols.","AAUC <- anomalyLeaderFrame$AUC.validation","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",259,1,"style","Variable and function name style should be snake_case or symbols.","samplePct <- anomalyLeaderFrame$samplePct","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",262,1,"style","Variable and function name style should be snake_case or symbols.","Index64 <- which(samplePct == sizes[3])","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",264,1,"style","Variable and function name style should be snake_case or symbols.","Index32 <- which(samplePct == sizes[2])","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",266,1,"style","Variable and function name style should be snake_case or symbols.","Index16 <- which(samplePct == sizes[1])","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",275,1,"style","Variable and function name style should be snake_case or symbols.","anomAUCDeltaFrame <- readRDS(""anomAUCDeltaFrame.rds"")","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",276,1,"style","Variable and function name style should be snake_case or symbols.","bestIndex <- which.min(anomalyLeaderFrame$LogLoss.validation)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",277,1,"style","Variable and function name style should be snake_case or symbols.","bestExpModel <- as.character(anomalyLeaderFrame$expandedModel)[bestIndex]","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",278,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which(anomAUCDeltaFrame$expandedModel == bestExpModel)","object_name_linter"
"inst/doc/ComparingSubsets.Rmd",282,14,"style","Put spaces around all infix operators.","         what=c(0, 1, 1, 1), ylim=c(-0.1, 0.1))","infix_spaces_linter"
"inst/doc/ComparingSubsets.Rmd",282,34,"style","Put spaces around all infix operators.","         what=c(0, 1, 1, 1), ylim=c(-0.1, 0.1))","infix_spaces_linter"
"inst/doc/ComparingSubsets.Rmd",283,81,"style","Lines should not be more than 80 characters.","points(seq(1, 7, 1), anomAUCDeltaFrame[bestRow, 1:7], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"inst/doc/ComplianceDocumentation.Rmd",59,81,"style","Lines should not be more than 80 characters.","UploadComplianceDocTemplate(name = ""myNewTemplate"", filename = ""path/to/modified_file.json"")","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",67,81,"style","Lines should not be more than 80 characters.","                      ""regularText"" = ""This dataset had a lot of Missing Values. See the chart below: {{missingValues}}"",","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",70,81,"style","Lines should not be more than 80 characters.","                      ""regularText"" = ""{{blueprintDiagram}} /n Blueprint for this model"",","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",72,81,"style","Lines should not be more than 80 characters.","UploadComplianceDocTemplate(name = ""myNewTemplateFromSections"", sections = sections)","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",78,1,"style","Variable and function name style should be snake_case or symbols.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplateFromSections"")[[1]]","object_name_linter"
"inst/doc/ComplianceDocumentation.Rmd",78,81,"style","Lines should not be more than 80 characters.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplateFromSections"")[[1]]","line_length_linter"
"inst/doc/ComplianceDocumentation.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplate"")[[1]]","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",26,81,"style","Lines should not be more than 80 characters.","lending <- read.csv(""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv"")","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",27,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""earliest_cr_line"",","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",43,81,"style","Lines should not be more than 80 characters.","                                             ""1989-12-01"", ConstructDurationString(days = 100))","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",44,81,"style","Lines should not be more than 80 characters.","backtest[[2]] <- CreateBacktestSpecification(1, ConstructDurationString(), ""1999-10-01"",","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",45,81,"style","Lines should not be more than 80 characters.","                                             ConstructDurationString(days = 100))","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",67,81,"style","Lines should not be more than 80 characters.","# Retrieve a datetime model. There is now a new retrieval function specific to datetime partitioning","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",71,1,"style","Variable and function name style should be snake_case or symbols.","scoreJobId <- ScoreBacktests(dt_model)","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","dtModelWithBt <- GetDatetimeModel(proj, dt_model$modelId)","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",78,81,"style","Lines should not be more than 80 characters.","# One has to request a `Frozen` model to keep the hyper-parameters static and avoid lookahead bias.","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",79,81,"style","Lines should not be more than 80 characters.","# Within the context of deployment, this can be used to retrain a resulting model on more recent data.","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",80,81,"style","Lines should not be more than 80 characters.","UpdateProject(proj, holdoutUnlocked = TRUE) # If retraining on 100% of the data, we need to unlock the holdout set.","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",81,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId_frozen   <- RequestFrozenDatetimeModel(dt_model,","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",82,81,"style","Lines should not be more than 80 characters.","                                                  trainingStartDate = as.Date(""1950/12/1""),","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",83,81,"style","Lines should not be more than 80 characters.","                                                  trainingEndDate = as.Date(""1998/3/1""))","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId  <- RequestNewDatetimeModel(proj, bps[[1]], trainingRowCount = 100)","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",91,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId   <- RequestNewDatetimeModel(proj, bps[[1]],","object_name_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",92,81,"style","Lines should not be more than 80 characters.","                                        trainingDuration = ConstructDurationString(months=10))","line_length_linter"
"inst/doc/DatetimePartitionedProjects.Rmd",92,90,"style","Put spaces around all infix operators.","                                        trainingDuration = ConstructDurationString(months=10))","infix_spaces_linter"
"inst/doc/Deployment.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","predictionServer <- ListPredictionServers()[[1]]","object_name_linter"
"inst/doc/Deployment.Rmd",34,81,"style","Lines should not be more than 80 characters.","                               description = ""A new deployment for demo purposes"",","line_length_linter"
"inst/doc/Deployment.Rmd",83,1,"style","Variable and function name style should be snake_case or symbols.","newModel <- ListModels(project)[[2]]","object_name_linter"
"inst/doc/Deployment.Rmd",96,1,"style","Variable and function name style should be snake_case or symbols.","newModel <- ListModels(project)[[2]]","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",49,81,"style","Lines should not be more than 80 characters.","ConnectToDataRobot(endpoint = ""YOUR-ENDPOINT-HERE"", token = ""YOUR-API_TOKEN-HERE"")","line_length_linter"
"inst/doc/IntroductionToDataRobot.Rmd",111,1,"style","Variable and function name style should be snake_case or symbols.","listOfBostonModels <- readRDS(""listOfBostonModels.rds"")","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",112,1,"style","Variable and function name style should be snake_case or symbols.","fullFrame <- as.data.frame(listOfBostonModels, simple = FALSE)","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",118,1,"style","Variable and function name style should be snake_case or symbols.","listOfBostonModels <- ListModels(project)","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",153,1,"style","Variable and function name style should be snake_case or symbols.","modelFrame <- as.data.frame(listOfBostonModels)","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",183,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- GetRecommendedModel(project)","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",184,1,"style","Variable and function name style should be snake_case or symbols.","bestPredictions <- Predict(bestModel, Boston)","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",202,1,"style","Variable and function name style should be snake_case or symbols.","bestPredictions <- readRDS(""bestPredictions.rds"")","object_name_linter"
"inst/doc/IntroductionToDataRobot.Rmd",203,33,"style","Put spaces around all infix operators.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","infix_spaces_linter"
"inst/doc/IntroductionToDataRobot.Rmd",203,61,"style","Put spaces around all infix operators.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","infix_spaces_linter"
"inst/doc/IntroductionToDataRobot.Rmd",203,81,"style","Lines should not be more than 80 characters.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","line_length_linter"
"inst/doc/Multiclass.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"inst/doc/Multiclass.Rmd",92,1,"style","Variable and function name style should be snake_case or symbols.","confusionChart <- GetConfusionChart(model, source = DataPartition$VALIDATION)","object_name_linter"
"inst/doc/PartialDependence.R",52,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame[, refIndex] <- grid[1]","object_name_linter"
"inst/doc/PartialDependence.R",55,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame[, refIndex] <- grid[i]","object_name_linter"
"inst/doc/PartialDependence.R",71,3,"style","Variable and function name style should be snake_case or symbols.","  hatFrame$prediction <- yHat","object_name_linter"
"inst/doc/PartialDependence.R",73,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(hatSum)[2] <- model$modelType","object_name_linter"
"inst/doc/PartialDependence.R",79,5,"style","Variable and function name style should be snake_case or symbols.","    hatFrame$prediction <- yHat","object_name_linter"
"inst/doc/PartialDependence.R",81,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upSum)[2] <- model$modelType","object_name_linter"
"inst/doc/PartialDependence.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","concreteFrame <- read.csv(system.file(""extdata"", ""concreteData.csv"", package = ""datarobot""))","object_name_linter"
"inst/doc/PartialDependence.Rmd",31,81,"style","Lines should not be more than 80 characters.","concreteFrame <- read.csv(system.file(""extdata"", ""concreteData.csv"", package = ""datarobot""))","line_length_linter"
"inst/doc/PartialDependence.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","myDRProject <- StartProject(concreteFrame, ""ConcreteProject"", target = ""strength"", wait = TRUE)","object_name_linter"
"inst/doc/PartialDependence.Rmd",43,81,"style","Lines should not be more than 80 characters.","myDRProject <- StartProject(concreteFrame, ""ConcreteProject"", target = ""strength"", wait = TRUE)","line_length_linter"
"inst/doc/PartialDependence.Rmd",48,1,"style","Variable and function name style should be snake_case or symbols.","concreteModels <- readRDS(""concreteModels.rds"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",49,1,"style","Variable and function name style should be snake_case or symbols.","fullFrame <- as.data.frame(concreteModels, simple = FALSE)","object_name_linter"
"inst/doc/PartialDependence.Rmd",50,1,"style","Variable and function name style should be snake_case or symbols.","modelsFrame <- as.data.frame(concreteModels)","object_name_linter"
"inst/doc/PartialDependence.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","concreteModels <- ListModels(myDRProject)","object_name_linter"
"inst/doc/PartialDependence.Rmd",80,1,"style","Variable and function name style should be snake_case or symbols.","poorCol <- c(""black"", ""red"", rep(""black"", 13))","object_name_linter"
"inst/doc/PartialDependence.Rmd",99,1,"style","Variable and function name style should be snake_case or symbols.","ridgeRows <- grep(""Ridge"", modelsFrame$modelType)","object_name_linter"
"inst/doc/PartialDependence.Rmd",104,1,"style","Variable and function name style should be snake_case or symbols.","goodCol <- c(rep(""black"", 3), ""red"", rep(""black"", 6), ""red"", rep(""black"", 3), ""red"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",104,81,"style","Lines should not be more than 80 characters.","goodCol <- c(rep(""black"", 3), ""red"", rep(""black"", 6), ""red"", rep(""black"", 3), ""red"")","line_length_linter"
"inst/doc/PartialDependence.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",156,32,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",156,44,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",156,54,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",156,63,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",156,81,"style","Lines should not be more than 80 characters.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","line_length_linter"
"inst/doc/PartialDependence.Rmd",158,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(covars == refCovar)","object_name_linter"
"inst/doc/PartialDependence.Rmd",159,3,"style","Variable and function name style should be snake_case or symbols.","  refVar <- covarFrame[, refIndex]","object_name_linter"
"inst/doc/PartialDependence.Rmd",168,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- covarFrame","object_name_linter"
"inst/doc/PartialDependence.Rmd",169,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame[, refIndex] <- grid[1]","object_name_linter"
"inst/doc/PartialDependence.Rmd",171,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame <- covarFrame","object_name_linter"
"inst/doc/PartialDependence.Rmd",172,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame[, refIndex] <- grid[i]","object_name_linter"
"inst/doc/PartialDependence.Rmd",173,5,"style","Variable and function name style should be snake_case or symbols.","    outFrame <- rbind.data.frame(outFrame, upFrame)","object_name_linter"
"inst/doc/PartialDependence.Rmd",184,1,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"inst/doc/PartialDependence.Rmd",184,24,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"inst/doc/PartialDependence.Rmd",184,36,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"inst/doc/PartialDependence.Rmd",184,46,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"inst/doc/PartialDependence.Rmd",185,24,"style","Variable and function name style should be snake_case or symbols.","                       numGrid = 100, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",185,39,"style","Variable and function name style should be snake_case or symbols.","                       numGrid = 100, plotRange = NULL) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",186,3,"style","Variable and function name style should be snake_case or symbols.","  augmentedFrame <- FullAverageDataset(covarFrame, refCovar,","object_name_linter"
"inst/doc/PartialDependence.Rmd",188,3,"style","Variable and function name style should be snake_case or symbols.","  nModels <- length(listOfModels)","object_name_linter"
"inst/doc/PartialDependence.Rmd",191,3,"style","Variable and function name style should be snake_case or symbols.","  yHat <- Predict(model, augmentedFrame)","object_name_linter"
"inst/doc/PartialDependence.Rmd",192,3,"style","Variable and function name style should be snake_case or symbols.","  hatFrame <- augmentedFrame","object_name_linter"
"inst/doc/PartialDependence.Rmd",193,3,"style","Variable and function name style should be snake_case or symbols.","  hatFrame$prediction <- yHat","object_name_linter"
"inst/doc/PartialDependence.Rmd",194,3,"style","Variable and function name style should be snake_case or symbols.","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_name_linter"
"inst/doc/PartialDependence.Rmd",194,13,"warning","no visible global function definition for ‘summaryBy’","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_usage_linter"
"inst/doc/PartialDependence.Rmd",194,81,"style","Lines should not be more than 80 characters.","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","line_length_linter"
"inst/doc/PartialDependence.Rmd",195,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(hatSum)[2] <- model$modelType","object_name_linter"
"inst/doc/PartialDependence.Rmd",199,5,"style","Variable and function name style should be snake_case or symbols.","    yHat <- Predict(model, augmentedFrame)","object_name_linter"
"inst/doc/PartialDependence.Rmd",200,5,"style","Variable and function name style should be snake_case or symbols.","    hatFrame <- augmentedFrame","object_name_linter"
"inst/doc/PartialDependence.Rmd",201,5,"style","Variable and function name style should be snake_case or symbols.","    hatFrame$prediction <- yHat","object_name_linter"
"inst/doc/PartialDependence.Rmd",202,5,"style","Variable and function name style should be snake_case or symbols.","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_name_linter"
"inst/doc/PartialDependence.Rmd",202,14,"warning","no visible global function definition for ‘summaryBy’","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_usage_linter"
"inst/doc/PartialDependence.Rmd",202,81,"style","Lines should not be more than 80 characters.","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","line_length_linter"
"inst/doc/PartialDependence.Rmd",203,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upSum)[2] <- model$modelType","object_name_linter"
"inst/doc/PartialDependence.Rmd",204,5,"style","Variable and function name style should be snake_case or symbols.","    hatSum <- merge(hatSum, upSum)","object_name_linter"
"inst/doc/PartialDependence.Rmd",215,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(concreteModels[[1]], concreteModels[[5]],","object_name_linter"
"inst/doc/PartialDependence.Rmd",217,1,"style","Variable and function name style should be snake_case or symbols.","agePDPframe <- PDPbuilder(concreteFrame[, 1:8], ""age"", modelList)","object_name_linter"
"inst/doc/PartialDependence.Rmd",223,1,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"inst/doc/PartialDependence.Rmd",223,20,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"inst/doc/PartialDependence.Rmd",223,29,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"inst/doc/PartialDependence.Rmd",224,20,"style","Variable and function name style should be snake_case or symbols.","                   lColors, ...) {","object_name_linter"
"inst/doc/PartialDependence.Rmd",225,3,"style","Variable and function name style should be snake_case or symbols.","  Rng <- range(Response)","object_name_linter"
"inst/doc/PartialDependence.Rmd",226,3,"style","Variable and function name style should be snake_case or symbols.","  nModels <- ncol(PDframe) - 1","object_name_linter"
"inst/doc/PartialDependence.Rmd",227,3,"style","Variable and function name style should be snake_case or symbols.","  modelNames <- colnames(PDframe)[2: (nModels + 1)]","object_name_linter"
"inst/doc/PartialDependence.Rmd",228,40,"style","Put spaces around all infix operators.","  plot(PDframe[, 1], PDframe[, 2], ylim=Rng, type = ""l"",","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",232,22,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",232,29,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",232,36,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",245,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",246,1,"style","Variable and function name style should be snake_case or symbols.","agePDPframe <- readRDS(""agePDPframe.rds"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",247,1,"style","Variable and function name style should be snake_case or symbols.","Response <- concreteFrame$strength","object_name_linter"
"inst/doc/PartialDependence.Rmd",249,1,"style","Variable and function name style should be snake_case or symbols.","lColors <- c(""limegreen"", ""black"", ""blue"", ""magenta"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",256,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",257,1,"style","Variable and function name style should be snake_case or symbols.","cementPDPframe <- readRDS(""cementPDPframe.rds"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",264,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",265,1,"style","Variable and function name style should be snake_case or symbols.","waterPDPframe <- readRDS(""waterPDPframe.rds"")","object_name_linter"
"inst/doc/PartialDependence.Rmd",272,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"inst/doc/PartialDependence.Rmd",273,1,"style","Variable and function name style should be snake_case or symbols.","blastPDPframe <- readRDS(""blastPDPframe.rds"")","object_name_linter"
"inst/doc/PredictionExplanations.Rmd",144,1,"error","Missing chunk end for chunk (maybe starting at line 144).","```{r results = ""asis"", message = FALSE, warning = FALSE, eval = FALSE}",NA
"inst/doc/RatingTables.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"inst/doc/RatingTables.Rmd",36,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"inst/doc/RatingTables.Rmd",37,1,"style","Variable and function name style should be snake_case or symbols.","ratingTables <- ListRatingTables(projectId)","object_name_linter"
"inst/doc/RatingTables.Rmd",38,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- ratingTables[[1]]","object_name_linter"
"inst/doc/RatingTables.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"inst/doc/RatingTables.Rmd",50,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"inst/doc/RatingTables.Rmd",51,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModels <- ListRatingTableModels(projectId)","object_name_linter"
"inst/doc/RatingTables.Rmd",52,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModel <- ratingTableModels[[1]]","object_name_linter"
"inst/doc/RatingTables.Rmd",53,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableId <- ratingTableModel$ratingTableId","object_name_linter"
"inst/doc/RatingTables.Rmd",54,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- GetRatingTable(projectId, ratingTableId)","object_name_linter"
"inst/doc/RatingTables.Rmd",59,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"inst/doc/RatingTables.Rmd",66,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"inst/doc/RatingTables.Rmd",67,1,"style","Variable and function name style should be snake_case or symbols.","modelId <- ""59dd0b01d9575702bec96e4""","object_name_linter"
"inst/doc/RatingTables.Rmd",68,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModel <- GetRatingTableModel(projectId, modelId)","object_name_linter"
"inst/doc/RatingTables.Rmd",69,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableId <- ratingTableModel$ratingTableId","object_name_linter"
"inst/doc/RatingTables.Rmd",70,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- GetRatingTable(projectId, ratingTableId)","object_name_linter"
"inst/doc/RatingTables.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"inst/doc/RatingTables.Rmd",94,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableJobId <- CreateRatingTable(project,","object_name_linter"
"inst/doc/RatingTables.Rmd",98,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTable <- GetRatingTableFromJobId(project, newRatingTableJobId)","object_name_linter"
"inst/doc/RatingTables.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"inst/doc/RatingTables.Rmd",113,1,"style","Variable and function name style should be snake_case or symbols.","newModelJobId <- RequestNewRatingTableModel(project, newRatingTable)","object_name_linter"
"inst/doc/RatingTables.Rmd",114,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableModel <- GetRatingTableModelFromJobId(project, newModelJobId)","object_name_linter"
"inst/doc/RatingTables.Rmd",119,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableModel <- readRDS(""ratingTableModel.RDS"")","object_name_linter"
"inst/doc/TimeSeries.Rmd",67,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",69,81,"style","Lines should not be more than 80 characters.","StartProject(dataSource = data, target = ""target"", partition = partition, metric = ""RMSE"")","line_length_linter"
"inst/doc/TimeSeries.Rmd",86,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",87,81,"style","Lines should not be more than 80 characters.","                                                  featureDerivationWindowStart = -24,","line_length_linter"
"inst/doc/TimeSeries.Rmd",88,81,"style","Lines should not be more than 80 characters.","                                                  featureDerivationWindowEnd = -12,","line_length_linter"
"inst/doc/TimeSeries.Rmd",104,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",136,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",138,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(""featureName"" = ""holiday"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",139,81,"style","Lines should not be more than 80 characters.","                                                                         ""knownInAdvance"" = TRUE))","line_length_linter"
"inst/doc/TimeSeries.Rmd",150,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",152,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(list(""featureName"" = ""holiday"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",153,81,"style","Lines should not be more than 80 characters.","                                                                              ""knownInAdvance"" = TRUE),","line_length_linter"
"inst/doc/TimeSeries.Rmd",154,81,"style","Lines should not be more than 80 characters.","                                                                         list(""featureName"" = ""weekend"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",155,81,"style","Lines should not be more than 80 characters.","                                                                              ""knownInAdvance"" = TRUE)))","line_length_linter"
"inst/doc/TimeSeries.Rmd",186,81,"style","Lines should not be more than 80 characters.","data <- read.csv(system.file(""extdata"", ""multiseries.csv"", package = ""datarobot""))","line_length_linter"
"inst/doc/TimeSeries.Rmd",187,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",189,81,"style","Lines should not be more than 80 characters.","                                                  multiseriesIdColumns = ""series_id"")","line_length_linter"
"inst/doc/TimeSeries.Rmd",219,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",221,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(list(""featureName"" = ""sales"",","line_length_linter"
"inst/doc/TimeSeries.Rmd",222,81,"style","Lines should not be more than 80 characters.","                                                                              ""doNotDerive"" = TRUE)))","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- GetTrainingPredictionsForModel(model, dataSubset = DataSubset$All)","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",26,81,"style","Lines should not be more than 80 characters.","trainingPredictions <- GetTrainingPredictionsForModel(model, dataSubset = DataSubset$All)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",27,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",32,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- readRDS(""trainingPredictions.rds"")","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",33,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",41,1,"style","Variable and function name style should be snake_case or symbols.","jobId <- RequestTrainingPredictions(model, dataSubset = DataSubset$All)","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- GetTrainingPredictionsFromJobId(projectId, jobId) # blocks until job complete","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",43,81,"style","Lines should not be more than 80 characters.","trainingPredictions <- GetTrainingPredictionsFromJobId(projectId, jobId) # blocks until job complete","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",44,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",49,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- readRDS(""trainingPredictions.rds"")","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",50,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- ListTrainingPredictions(projectId)","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",57,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictionId <- trainingPredictions[[1]]$id","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",58,1,"style","Variable and function name style should be snake_case or symbols.","trainingPrediction <- GetTrainingPredictions(projectId, trainingPredictionId)","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",59,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPrediction), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",63,1,"style","Variable and function name style should be snake_case or symbols.","trainingPrediction <- readRDS(""trainingPrediction.rds"")","object_name_linter"
"inst/doc/TrainingPredictions.Rmd",64,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPrediction), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"inst/doc/TrainingPredictions.Rmd",73,81,"style","Lines should not be more than 80 characters.","DownloadTrainingPredictions(projectId, trainingPredictionId, ""trainingPredictions.csv"")","line_length_linter"
"inst/doc/VariableImportance.R",51,3,"style","Variable and function name style should be snake_case or symbols.","  keepCols[5] <- metricNames[1]","object_name_linter"
"inst/doc/VariableImportance.R",52,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(outFrame) <- keepCols","object_name_linter"
"inst/doc/VariableImportance.R",58,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upFrame) <- c(""blueprintId"", metricNames[i])","object_name_linter"
"inst/doc/VariableImportance.Rmd",60,81,"style","Lines should not be more than 80 characters.","friedman <- read.csv(system.file(""extdata"", ""Friedman1.csv.gz"", package = ""datarobot""))","line_length_linter"
"inst/doc/VariableImportance.Rmd",61,1,"style","Variable and function name style should be snake_case or symbols.","originalProject <- StartProject(friedman, ""OriginalProject"", target = ""Y"", wait = TRUE)","object_name_linter"
"inst/doc/VariableImportance.Rmd",61,81,"style","Lines should not be more than 80 characters.","originalProject <- StartProject(friedman, ""OriginalProject"", target = ""Y"", wait = TRUE)","line_length_linter"
"inst/doc/VariableImportance.Rmd",62,1,"style","Variable and function name style should be snake_case or symbols.","originalModels <- ListModels(originalProject)","object_name_linter"
"inst/doc/VariableImportance.Rmd",70,1,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",70,27,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",70,41,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",70,50,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",72,3,"style","Variable and function name style should be snake_case or symbols.","  originalFile <- system.file(""extdata"", originalFile, package = ""datarobot"")","object_name_linter"
"inst/doc/VariableImportance.Rmd",74,3,"style","Variable and function name style should be snake_case or symbols.","  varNames <- colnames(dframe)","object_name_linter"
"inst/doc/VariableImportance.Rmd",75,3,"style","Variable and function name style should be snake_case or symbols.","  colIndex <- which(varNames == colName)","object_name_linter"
"inst/doc/VariableImportance.Rmd",76,15,"style","Commas should never have a space before.","  x <- dframe[ ,colIndex]","commas_linter"
"inst/doc/VariableImportance.Rmd",76,15,"style","Do not place spaces after square brackets.","  x <- dframe[ ,colIndex]","spaces_inside_linter"
"inst/doc/VariableImportance.Rmd",76,17,"style","Commas should always have a space after.","  x <- dframe[ ,colIndex]","commas_linter"
"inst/doc/VariableImportance.Rmd",78,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- dframe","object_name_linter"
"inst/doc/VariableImportance.Rmd",79,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame[ ,colIndex] <- y","object_name_linter"
"inst/doc/VariableImportance.Rmd",79,12,"style","Commas should never have a space before.","  outFrame[ ,colIndex] <- y","commas_linter"
"inst/doc/VariableImportance.Rmd",79,12,"style","Do not place spaces after square brackets.","  outFrame[ ,colIndex] <- y","spaces_inside_linter"
"inst/doc/VariableImportance.Rmd",79,14,"style","Commas should always have a space after.","  outFrame[ ,colIndex] <- y","commas_linter"
"inst/doc/VariableImportance.Rmd",80,46,"style","Put spaces around all infix operators.","  write.csv(outFrame, permutedFile, row.names=FALSE)","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(n = 11)","object_name_linter"
"inst/doc/VariableImportance.Rmd",88,1,"style","Variable and function name style should be snake_case or symbols.","modelList[[1]] <- originalModels","object_name_linter"
"inst/doc/VariableImportance.Rmd",89,1,"style","Variable and function name style should be snake_case or symbols.","permFile <- tempfile(fileext = ""permFile.csv"")","object_name_linter"
"inst/doc/VariableImportance.Rmd",91,3,"style","Variable and function name style should be snake_case or symbols.","  varName <- paste(""X"",i,sep="""")","object_name_linter"
"inst/doc/VariableImportance.Rmd",91,24,"style","Commas should always have a space after.","  varName <- paste(""X"",i,sep="""")","commas_linter"
"inst/doc/VariableImportance.Rmd",91,26,"style","Commas should always have a space after.","  varName <- paste(""X"",i,sep="""")","commas_linter"
"inst/doc/VariableImportance.Rmd",91,29,"style","Put spaces around all infix operators.","  varName <- paste(""X"",i,sep="""")","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",93,3,"style","Variable and function name style should be snake_case or symbols.","  projName <- paste(""PermProject"", varName, sep = """")","object_name_linter"
"inst/doc/VariableImportance.Rmd",94,3,"style","Variable and function name style should be snake_case or symbols.","  permProject <- StartProject(permFile, projectName = projName, target = ""Y"", wait = TRUE)","object_name_linter"
"inst/doc/VariableImportance.Rmd",94,81,"style","Lines should not be more than 80 characters.","  permProject <- StartProject(permFile, projectName = projName, target = ""Y"", wait = TRUE)","line_length_linter"
"inst/doc/VariableImportance.Rmd",95,3,"style","Variable and function name style should be snake_case or symbols.","  modelList[[i+1]] <- ListModels(permProject)","object_name_linter"
"inst/doc/VariableImportance.Rmd",95,15,"style","Put spaces around all infix operators.","  modelList[[i+1]] <- ListModels(permProject)","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",101,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- readRDS(""PermutationModelList.rds"")","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,1,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,30,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,45,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,62,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,75,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",116,81,"style","Lines should not be more than 80 characters.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","line_length_linter"
"inst/doc/VariableImportance.Rmd",124,5,"style","Variable and function name style should be snake_case or symbols.","    projectMetric <- compositeList[[1]][[1]]$projectMetric","object_name_linter"
"inst/doc/VariableImportance.Rmd",125,5,"style","Variable and function name style should be snake_case or symbols.","    matchMetric <- paste(projectMetric, ""validation"", sep = ""."")","object_name_linter"
"inst/doc/VariableImportance.Rmd",127,3,"style","Variable and function name style should be snake_case or symbols.","  getCols <- c(""modelType"", ""expandedModel"", ""samplePct"", ""blueprintId"", matchMetric)","object_name_linter"
"inst/doc/VariableImportance.Rmd",127,81,"style","Lines should not be more than 80 characters.","  getCols <- c(""modelType"", ""expandedModel"", ""samplePct"", ""blueprintId"", matchMetric)","line_length_linter"
"inst/doc/VariableImportance.Rmd",128,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- df[index, getCols]","object_name_linter"
"inst/doc/VariableImportance.Rmd",129,3,"style","Variable and function name style should be snake_case or symbols.","  keepCols <- getCols","object_name_linter"
"inst/doc/VariableImportance.Rmd",130,3,"style","Variable and function name style should be snake_case or symbols.","  keepCols[5] <- metricNames[1]","object_name_linter"
"inst/doc/VariableImportance.Rmd",131,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(outFrame) <- keepCols","object_name_linter"
"inst/doc/VariableImportance.Rmd",136,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame <- df[index, c(""blueprintId"", matchMetric)]","object_name_linter"
"inst/doc/VariableImportance.Rmd",137,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upFrame) <- c(""blueprintId"", metricNames[i])","object_name_linter"
"inst/doc/VariableImportance.Rmd",138,5,"style","Variable and function name style should be snake_case or symbols.","    outFrame <- merge(outFrame, upFrame, by = ""blueprintId"")","object_name_linter"
"inst/doc/VariableImportance.Rmd",147,1,"style","Variable and function name style should be snake_case or symbols.","metricNames <- c(""originalRMSE"", paste(""X"", seq(1, 10, 1), ""RMSE"", sep = """"))","object_name_linter"
"inst/doc/VariableImportance.Rmd",148,1,"style","Variable and function name style should be snake_case or symbols.","mergeFrame <- PermutationMerge(modelList, 16, metricNames)","object_name_linter"
"inst/doc/VariableImportance.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","BeanNames <- c(""None"", paste(""X"", seq(1, 10, 1), sep = """"))","object_name_linter"
"inst/doc/VariableImportance.Rmd",167,1,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",167,27,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",167,39,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",167,47,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",167,58,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",168,3,"style","Variable and function name style should be snake_case or symbols.","  allNames <- colnames(mergeFrame)","object_name_linter"
"inst/doc/VariableImportance.Rmd",169,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(allNames == refCol)","object_name_linter"
"inst/doc/VariableImportance.Rmd",170,3,"style","Variable and function name style should be snake_case or symbols.","  xRef <- mergeFrame[, refIndex]","object_name_linter"
"inst/doc/VariableImportance.Rmd",171,3,"style","Variable and function name style should be snake_case or symbols.","  permCols <- which(allNames %in% permNames)","object_name_linter"
"inst/doc/VariableImportance.Rmd",172,3,"style","Variable and function name style should be snake_case or symbols.","  xPerm <- mergeFrame[, permCols]","object_name_linter"
"inst/doc/VariableImportance.Rmd",176,3,"style","Variable and function name style should be snake_case or symbols.","  newIndex <- which(colnames(deltas) == ""New"")","object_name_linter"
"inst/doc/VariableImportance.Rmd",185,1,"style","Variable and function name style should be snake_case or symbols.","allNames <- colnames(mergeFrame)","object_name_linter"
"inst/doc/VariableImportance.Rmd",186,1,"style","Variable and function name style should be snake_case or symbols.","refCol <- allNames[5]","object_name_linter"
"inst/doc/VariableImportance.Rmd",187,1,"style","Variable and function name style should be snake_case or symbols.","permNames <- allNames[6:15]","object_name_linter"
"inst/doc/VariableImportance.Rmd",188,1,"style","Variable and function name style should be snake_case or symbols.","shiftNames <- paste(""X"", seq(1, 10, 1), sep = """")","object_name_linter"
"inst/doc/VariableImportance.Rmd",189,1,"style","Variable and function name style should be snake_case or symbols.","deltaFrame <- ComputeDeltas(mergeFrame, refCol, permNames, shiftNames)","object_name_linter"
"inst/doc/VariableImportance.Rmd",193,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",198,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which.min(deltaFrame$originalRMSE)","object_name_linter"
"inst/doc/VariableImportance.Rmd",199,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- mergeFrame$modelType[bestRow]","object_name_linter"
"inst/doc/VariableImportance.Rmd",200,81,"style","Lines should not be more than 80 characters.","points(seq(1, 10, 1), deltaFrame[bestRow, 1:10], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"inst/doc/VariableImportance.Rmd",219,1,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",219,27,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",219,39,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",219,47,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"inst/doc/VariableImportance.Rmd",221,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(vars == refCol)","object_name_linter"
"inst/doc/VariableImportance.Rmd",222,3,"style","Variable and function name style should be snake_case or symbols.","  refValue <- deltaFrame[, refIndex]","object_name_linter"
"inst/doc/VariableImportance.Rmd",223,11,"style","Put spaces around all infix operators.","  wts <- 1/refValue  # Performance-weights = reciprocal fitting measure","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",224,3,"style","Variable and function name style should be snake_case or symbols.","  deltasOnly <- deltaFrame[, -refIndex]","object_name_linter"
"inst/doc/VariableImportance.Rmd",225,3,"style","Variable and function name style should be snake_case or symbols.","  thisModel <- as.numeric(deltasOnly[oneIndex, ])","object_name_linter"
"inst/doc/VariableImportance.Rmd",226,34,"style","Put spaces around all infix operators.","  avg <- apply(deltasOnly, MARGIN=2, mean)","infix_spaces_linter"
"inst/doc/VariableImportance.Rmd",227,3,"style","Variable and function name style should be snake_case or symbols.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","object_name_linter"
"inst/doc/VariableImportance.Rmd",227,35,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","brace_linter"
"inst/doc/VariableImportance.Rmd",227,57,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","brace_linter"
"inst/doc/VariableImportance.Rmd",228,3,"style","Variable and function name style should be snake_case or symbols.","  wtAvg <- apply(deltasOnly, MARGIN = 2, WtAvgFunction, wts)","object_name_linter"
"inst/doc/VariableImportance.Rmd",229,3,"style","Variable and function name style should be snake_case or symbols.","  varImpFrame <- data.frame(average = avg,","object_name_linter"
"inst/doc/VariableImportance.Rmd",239,1,"style","Variable and function name style should be snake_case or symbols.","varImp <- varImpSummary(deltaFrame, ""originalRMSE"", bestRow)","object_name_linter"
"inst/doc/VariableImportance.Rmd",241,1,"style","Variable and function name style should be snake_case or symbols.","wtAvg <- round(varImp$weightedAverage, digits = 3)","object_name_linter"
"R/AdvancedTuning.R",80,1,"style","Variable and function names should not be longer than 30 characters.","summary.listOfDataRobotTuningParameters <- function(object, ...) {","object_length_linter"
"R/AdvancedTuning.R",171,11,"style","Variable and function name style should be snake_case or symbols.","  formals(tuningFunction) <- args","object_name_linter"
"R/AnomalyAssessment.R",5,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotAnomalyAssessmentRecord""","object_name_linter"
"R/AnomalyAssessment.R",12,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotShapFeatureContribution""","object_name_linter"
"R/AnomalyAssessment.R",18,3,"style","Variable and function name style should be snake_case or symbols.","  outList$timestamp <- parseRFC3339Timestamp(outList$timestamp)","object_name_linter"
"R/AnomalyAssessment.R",22,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotPredictionWithExplanationsRow""","object_name_linter"
"R/AnomalyAssessment.R",32,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotAnomalyAssessmentExplanations""","object_name_linter"
"R/AnomalyAssessment.R",43,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotPreviewBin""","object_name_linter"
"R/AnomalyAssessment.R",53,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotAnomalyAssessmentPredictionsPreview""","object_name_linter"
"R/ApplySchema.R",16,13,"style","Variable and function name style should be snake_case or symbols.","      names(outList) <- elements","object_name_linter"
"R/asDataFrame.R",44,47,"style","Variable and function name style should be snake_case or symbols.","as.data.frame.listOfBlueprints <- function(x, row.names = NULL,","object_name_linter"
"R/asDataFrame.R",68,14,"style","Variable and function name style should be snake_case or symbols.","    rownames(sumFrame) <- row.names","object_name_linter"
"R/asDataFrame.R",75,49,"style","Variable and function name style should be snake_case or symbols.","as.data.frame.listOfFeaturelists <- function(x, row.names = NULL,","object_name_linter"
"R/asDataFrame.R",84,11,"style","Variable and function name style should be snake_case or symbols.","    class(upFrame$features) <- ""list""","object_name_linter"
"R/asDataFrame.R",94,14,"style","Variable and function name style should be snake_case or symbols.","    rownames(sumFrame) <- row.names","object_name_linter"
"R/asDataFrame.R",151,16,"style","Variable and function name style should be snake_case or symbols.","      rownames(outFrame) <- row.names","object_name_linter"
"R/asDataFrame.R",185,16,"style","Variable and function name style should be snake_case or symbols.","      colnames(validFrame) <- paste(colnames(validFrame), ""validation"",","object_name_linter"
"R/asDataFrame.R",188,16,"style","Variable and function name style should be snake_case or symbols.","      colnames(crossFrame) <- paste(colnames(crossFrame),","object_name_linter"
"R/asDataFrame.R",191,16,"style","Variable and function name style should be snake_case or symbols.","      colnames(holdFrame) <- paste(colnames(holdFrame), ""holdout"", sep = ""."")","object_name_linter"
"R/asDataFrame.R",197,16,"style","Variable and function name style should be snake_case or symbols.","      rownames(outFrame) <- row.names","object_name_linter"
"R/asDataFrame.R",223,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(metricFrame) <- metricNames","object_name_linter"
"R/asDataFrame.R",239,49,"style","Variable and function name style should be snake_case or symbols.","as.data.frame.projectSummaryList <- function(x, row.names = NULL,","object_name_linter"
"R/asDataFrame.R",262,14,"style","Variable and function name style should be snake_case or symbols.","    rownames(outFrame) <- row.names","object_name_linter"
"R/asDataFrame.R",270,1,"style","Variable and function names should not be longer than 30 characters.","as.data.frame.listOfDataRobotPredictionDatasets <- function(x, row.names = NULL,","object_length_linter"
"R/asDataFrame.R",270,64,"style","Variable and function name style should be snake_case or symbols.","as.data.frame.listOfDataRobotPredictionDatasets <- function(x, row.names = NULL,","object_name_linter"
"R/asDataFrame.R",294,14,"style","Variable and function name style should be snake_case or symbols.","    rownames(sumFrame) <- row.names","object_name_linter"
"R/Blenders.R",69,11,"style","Variable and function name style should be snake_case or symbols.","    names(modelDetails)[idIndex] <- ""modelId""","object_name_linter"
"R/Blenders.R",70,5,"style","Variable and function name style should be snake_case or symbols.","    modelDetails$metrics <- ReformatMetrics(modelDetails$metrics)","object_name_linter"
"R/Blenders.R",75,7,"style","Variable and function name style should be snake_case or symbols.","      modelDetails$processes <- character(0)","object_name_linter"
"R/Blenders.R",163,9,"style","Variable and function name style should be snake_case or symbols.","  class(returnModel) <- ""dataRobotBlenderModel""","object_name_linter"
"R/Blenders.R",187,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotBlenderModel""","object_name_linter"
"R/Blueprints.R",27,9,"style","Variable and function name style should be snake_case or symbols.","  class(blueprintList) <- c(""listOfBlueprints"", ""listSubclass"")","object_name_linter"
"R/Calendars.R",57,3,"style","Variable and function name style should be snake_case or symbols.","  outList$id <- outList$Id","object_name_linter"
"R/Calendars.R",59,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotCalendar""","object_name_linter"
"R/ConfusionChart.R",82,3,"style","Variable and function name style should be snake_case or symbols.","  outList$data <- as.list(outList$data)","object_name_linter"
"R/ConnectToDataRobot.R",70,34,"warning","Conditional expressions require scalar logical operators (&& and ||)","  } else if (!is.na(envEndpoint) & !is.na(envToken)) {","vector_logic_linter"
"R/DataRobotRequests.R",193,22,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (endpoint == """" | token == """") {","vector_logic_linter"
"R/DataSources.R",50,3,"style","Variable and function name style should be snake_case or symbols.","  outList$params <- ApplySchema(outList$params, c(""dataSourceId"", ""table""))","object_name_linter"
"R/DataSources.R",51,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotDataSource""","object_name_linter"
"R/DataStores.R",48,3,"style","Variable and function name style should be snake_case or symbols.","  outList$params <- ApplySchema(outList$params, c(""driverId"", ""jdbcUrl""))","object_name_linter"
"R/DataStores.R",49,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotDataStore""","object_name_linter"
"R/DatetimeTrendPlots.R",140,5,"style","Variable and function name style should be snake_case or symbols.","    outList$backtestMetadata$training[] <- lapply(","object_name_linter"
"R/DatetimeTrendPlots.R",143,5,"style","Variable and function name style should be snake_case or symbols.","    outList$backtestMetadata$validation[] <- lapply(","object_name_linter"
"R/DatetimeTrendPlots.R",146,5,"style","Variable and function name style should be snake_case or symbols.","    outList$holdoutMetadata$training <- lapply(","object_name_linter"
"R/DatetimeTrendPlots.R",149,5,"style","Variable and function name style should be snake_case or symbols.","    outList$holdoutMetadata$validation <- lapply(","object_name_linter"
"R/DatetimeTrendPlots.R",290,9,"style","Variable and function name style should be snake_case or symbols.","        outList$calendarEvents$date <- do.call(","object_name_linter"
"R/DeploymentAccuracy.R",161,34,"style","Any function spanning multiple lines should use curly braces.","    responses <- lapply(metrics, function(m)","brace_linter"
"R/DeploymentMonitoringUtils.R",39,9,"style","Variable and function name style should be snake_case or symbols.","        periodContainer$period <- list()","object_name_linter"
"R/DeploymentMonitoringUtils.R",40,9,"style","Variable and function name style should be snake_case or symbols.","        periodContainer$period$start <- NA","object_name_linter"
"R/DeploymentMonitoringUtils.R",41,9,"style","Variable and function name style should be snake_case or symbols.","        periodContainer$period$end <- NA","object_name_linter"
"R/Drivers.R",47,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotDriver""","object_name_linter"
"R/FeatureAssociations.R",78,3,"style","Variable and function name style should be snake_case or symbols.","  outList$values <- as.data.frame(outList$values)","object_name_linter"
"R/FeatureAssociations.R",79,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(outList$values) <- c(""feature1"", ""feature2"", ""relativeFreq"")","object_name_linter"
"R/Featurelists.R",46,9,"style","Variable and function name style should be snake_case or symbols.","  names(featurelistInfo)[idIndex] <- ""featurelistId""","object_name_linter"
"R/Featurelists.R",78,3,"style","Variable and function name style should be snake_case or symbols.","  featurelistInfo$id <- NULL","object_name_linter"
"R/Features.R",149,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotFeatureInfo""","object_name_linter"
"R/Features.R",161,3,"style","Variable and function name style should be snake_case or symbols.","  outList$summary <- ApplySchema(outList$summary, descriptiveStatisticsElements)","object_name_linter"
"R/Features.R",230,39,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","                                }) }) }","brace_linter"
"R/GetPredictions.R",94,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/GetPredictions.R",97,27,"style","Any function spanning multiple lines should use curly braces.","                          function(x) stats::setNames(x$value,","brace_linter"
"R/GetPredictJobs.R",32,3,"style","Variable and function name style should be snake_case or symbols.","  predictJobStatus$id <- NULL","object_name_linter"
"R/ListModelJobs.R",58,11,"style","Variable and function name style should be snake_case or symbols.","    names(pendingList)[idIndex] <- ""modelJobId""","object_name_linter"
"R/MissingValuesReport.R",60,5,"style","Variable and function name style should be snake_case or symbols.","    inList[[i]]$feature <- NULL # Drop feature from within list","object_name_linter"
"R/MissingValuesReport.R",62,7,"style","Variable and function name style should be snake_case or symbols.","      inList[[i]]$tasks[[j]]$id <- names(inList[[i]]$tasks)[[j]]","object_name_linter"
"R/MissingValuesReport.R",63,7,"style","Variable and function name style should be snake_case or symbols.","      inList[[i]]$tasks[[j]]$name <- as.character(inList[[i]]$tasks[[j]]$name)","object_name_linter"
"R/MissingValuesReport.R",66,5,"style","Variable and function name style should be snake_case or symbols.","    inList[[i]]$tasks <- unname(inList[[i]]$tasks)","object_name_linter"
"R/ModelRecommendations.R",25,9,"style","Variable and function name style should be snake_case or symbols.","  class(modelRecommendations) <- c(""listOfModelRecommendations"", ""listSubclass"")","object_name_linter"
"R/ModelRecommendations.R",73,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotModelRecommendation""","object_name_linter"
"R/Models.R",91,11,"style","Variable and function name style should be snake_case or symbols.","    names(modelDetails)[names(modelDetails) == ""id""] <- ""modelId""","object_name_linter"
"R/Models.R",92,5,"style","Variable and function name style should be snake_case or symbols.","    modelDetails$metrics <- ReformatMetrics(modelDetails$metrics)","object_name_linter"
"R/Models.R",97,7,"style","Variable and function name style should be snake_case or symbols.","      modelDetails$processes <- character(0)","object_name_linter"
"R/Models.R",153,11,"style","Variable and function name style should be snake_case or symbols.","    names(modelDetails)[idIndex] <- ""modelId""","object_name_linter"
"R/Models.R",154,5,"style","Variable and function name style should be snake_case or symbols.","    modelDetails$metrics <- ReformatMetrics(modelDetails$metrics)","object_name_linter"
"R/Models.R",159,7,"style","Variable and function name style should be snake_case or symbols.","      modelDetails$processes <- character(0)","object_name_linter"
"R/Models.R",214,7,"style","`else` should come on the same line as the previous `}`.","      else if (identical(filter$isStarred, FALSE)) {","brace_linter"
"R/Models.R",248,9,"style","Variable and function name style should be snake_case or symbols.","  class(returnList) <- c(""listOfModels"", ""listSubclass"")","object_name_linter"
"R/Models.R",296,9,"style","Variable and function name style should be snake_case or symbols.","  class(returnModel) <- ""dataRobotModel""","object_name_linter"
"R/Models.R",348,9,"style","Variable and function name style should be snake_case or symbols.","  class(returnModel) <- ""dataRobotFrozenModel""","object_name_linter"
"R/Models.R",585,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotModel""","object_name_linter"
"R/Models.R",614,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotFrozenModel""","object_name_linter"
"R/Models.R",686,3,"style","Variable and function name style should be snake_case or symbols.","  outList$parameters <- lapply(outList$parameters, as.dataRobotNameValueSchema)","object_name_linter"
"R/Models.R",752,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotDatetimeModel""","object_name_linter"
"R/Models.R",763,5,"style","Variable and function name style should be snake_case or symbols.","    bodyFrame[fieldName] <- featurelist","object_name_linter"
"R/Models.R",768,11,"style","Variable and function name style should be snake_case or symbols.","    names(bodyFrame)[1] <- fieldName","object_name_linter"
"R/Models.R",885,11,"style","Variable and function name style should be snake_case or symbols.","    names(modelDetails)[names(modelDetails) == ""id""] <- ""modelId""","object_name_linter"
"R/Models.R",886,5,"style","Variable and function name style should be snake_case or symbols.","    modelDetails$metrics <- ReformatMetrics(modelDetails$metrics)","object_name_linter"
"R/Models.R",891,7,"style","Variable and function name style should be snake_case or symbols.","      modelDetails$processes <- character(0)","object_name_linter"
"R/Models.R",894,11,"style","Variable and function name style should be snake_case or symbols.","    class(modelDetails) <- ""dataRobotDatetimeModel""","object_name_linter"
"R/Models.R",942,9,"style","Variable and function name style should be snake_case or symbols.","  class(returnModel) <- ""dataRobotDatetimeModel""","object_name_linter"
"R/Models.R",1172,3,"warning","local variable ‘response’ assigned but may not be used","  response <- DataRobotGET(routeString, as = ""file"", filename = fileName,","object_usage_linter"
"R/ParetoFront.R",70,3,"style","Variable and function name style should be snake_case or symbols.","  outList$hyperparameters <- as.list(outList$hyperparameters)","object_name_linter"
"R/ParetoFront.R",71,3,"style","Variable and function name style should be snake_case or symbols.","  outList$solutions <- as.list(outList$solutions)","object_name_linter"
"R/Partitions.R",473,7,"style","Variable and function name style should be snake_case or symbols.","      outList$backtests <- as.dataRobotBacktestSpecification(outList$backtests)","object_name_linter"
"R/Partitions.R",689,3,"style","Variable and function name style should be snake_case or symbols.","  outList$backtests <- ApplySchema(outList$backtests, backtestElements)","object_name_linter"
"R/PredictionDatasets.R",228,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotPredictionDataset""","object_name_linter"
"R/PredictionDatasets.R",233,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- c(""listOfDataRobotPredictionDatasets"", ""listSubclass"")","object_name_linter"
"R/PredictionExplanations.R",107,9,"style","Variable and function name style should be snake_case or symbols.","  class(pseudoModel) <- ""dataRobotModel""","object_name_linter"
"R/PredictionExplanations.R",473,3,"style","Variable and function name style should be snake_case or symbols.","  outDf$prediction <- vapply(explains, `[[`, predictionType, ""prediction"")","object_name_linter"
"R/PredictionExplanations.R",494,7,"style","Variable and function name style should be snake_case or symbols.","      outDf[paste0(""class"", m, ""Label"")] <- labels","object_name_linter"
"R/PredictionExplanations.R",497,7,"style","Variable and function name style should be snake_case or symbols.","      outDf[paste0(""class"", m, ""Probability"")] <- values","object_name_linter"
"R/PredictionExplanations.R",508,5,"style","Variable and function name style should be snake_case or symbols.","    outDf[paste0(""explanation"", n, ""FeatureName"")] <-","object_name_linter"
"R/PredictionExplanations.R",522,5,"style","Variable and function name style should be snake_case or symbols.","    outDf[paste0(""explanation"", n, ""QualitativeStrength"")] <-","object_name_linter"
"R/PredictionExplanations.R",533,5,"style","Variable and function name style should be snake_case or symbols.","    outDf[paste0(""explanation"", n, ""Strength"")] <- if (length(strength) > 1) {","object_name_linter"
"R/PredictionExplanations.R",536,5,"style","Variable and function name style should be snake_case or symbols.","    outDf[paste0(""explanation"", n, ""Label"")] <-","object_name_linter"
"R/PrimeModels.R",99,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- c(""dataRobotPrimeModels"", ""data.frame"")","object_name_linter"
"R/PrimeModels.R",105,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- c(""dataRobotPrimeModel"")","object_name_linter"
"R/Projects.R",127,11,"style","Variable and function name style should be snake_case or symbols.","    names(projectSummaryData)[[idIndex]] <- ""projectId""","object_name_linter"
"R/Projects.R",129,11,"style","Variable and function name style should be snake_case or symbols.","    class(projectSummaryData) <- ""projectSummaryList""","object_name_linter"
"R/Projects.R",177,9,"style","Variable and function name style should be snake_case or symbols.","  names(projectDetails)[idIndex] <- ""projectId""","object_name_linter"
"R/Projects.R",183,9,"style","Variable and function name style should be snake_case or symbols.","  class(outProject) <- ""dataRobotProject""","object_name_linter"
"R/RatingTables.R",102,9,"style","Variable and function name style should be snake_case or symbols.","  class(ratingTables) <- c(""listOfRatingTables"", ""listSubclass"")","object_name_linter"
"R/RatingTables.R",258,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotRatingTableModel""","object_name_linter"
"R/RatingTables.R",268,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotRatingTable""","object_name_linter"
"R/ReformatMetrics.R",22,5,"style","Variable and function name style should be snake_case or symbols.","    outList[[i]] <- as.data.frame(lapply(metricsList[[i]], ReplaceFunction))","object_name_linter"
"R/ReformatMetrics.R",25,9,"style","Variable and function name style should be snake_case or symbols.","  names(outList) <- names(metricsList)","object_name_linter"
"R/ResidualsChart.R",48,3,"style","Variable and function name style should be snake_case or symbols.","  outList$data <- as.data.frame(outList$data)","object_name_linter"
"R/ResidualsChart.R",52,5,"style","Variable and function name style should be snake_case or symbols.","    outList$data[""rowNumber""] <- NA","object_name_linter"
"R/ResidualsChart.R",54,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(outList$data) <- c(""actual"",","object_name_linter"
"R/ResidualsChart.R",59,3,"style","Variable and function name style should be snake_case or symbols.","  outList$histogram$occurrences <- as.integer(outList$histogram$occurrences)","object_name_linter"
"R/ResidualsChart.R",60,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotResiduals""","object_name_linter"
"R/ServerData.R",6,3,"style","Variable and function name style should be snake_case or symbols.","  serverData$`next` <- NULL","object_name_linter"
"R/ServerData.R",7,3,"style","Variable and function name style should be snake_case or symbols.","  serverData$previous <- NULL","object_name_linter"
"R/SetupProject.R",41,5,"style","Variable and function name style should be snake_case or symbols.","    dataList$url <- dataSource","object_name_linter"
"R/SetupProject.R",43,5,"style","Variable and function name style should be snake_case or symbols.","    dataList$file <- UploadData(dataSource)","object_name_linter"
"R/SetupProject.R",186,9,"style","Variable and function name style should be snake_case or symbols.","  class(outList) <- ""dataRobotProject""","object_name_linter"
"R/StartAutopilot.R",124,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$metric <- metric","object_name_linter"
"R/StartAutopilot.R",125,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$weights <- weights","object_name_linter"
"R/StartAutopilot.R",126,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$mode <- mode","object_name_linter"
"R/StartAutopilot.R",127,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$quickrun <- quickrun","object_name_linter"
"R/StartAutopilot.R",128,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$seed <- seed","object_name_linter"
"R/StartAutopilot.R",136,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$offset <- offset","object_name_linter"
"R/StartAutopilot.R",137,3,"style","Variable and function name style should be snake_case or symbols.","  bodyList$exposure <- exposure","object_name_linter"
"R/TrainingPredictions.R",120,37,"style","Any function spanning multiple lines should use curly braces.","                                    function(x) stats::setNames(x$value,","brace_linter"
"R/utils.R",87,3,"style","Variable and function name style should be snake_case or symbols.","  out.vec[var.pos] <- var.nms","object_name_linter"
"R/utils.R",88,3,"style","Variable and function name style should be snake_case or symbols.","  out.vec[-var.pos] <- data.nms[!(data.nms %in% var.nms)]","object_name_linter"
"R/Validate.R",36,37,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!(is(model, ""dataRobotModel"") | is(model, ""dataRobotFrozenModel"") |","vector_logic_linter"
"R/Validate.R",36,73,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!(is(model, ""dataRobotModel"") | is(model, ""dataRobotFrozenModel"") |","vector_logic_linter"
"R/Validate.R",158,3,"style","`else` should come on the same line as the previous `}`.","  else if (!""associationId"" %in% names(actuals)) {","brace_linter"
"R/Validate.R",161,3,"style","`else` should come on the same line as the previous `}`.","  else if (max(nchar(actuals[[""associationId""]])) > 128) {","brace_linter"
"R/Validate.R",164,3,"style","`else` should come on the same line as the previous `}`.","  else if (!is.character(actuals[[""associationId""]])) {","brace_linter"
"R/Validate.R",167,3,"style","`else` should come on the same line as the previous `}`.","  else if (!""actualValue"" %in% names(actuals)) {","brace_linter"
"R/Validate.R",195,3,"style","`else` should come on the same line as the previous `}`.","  else if (!(""timeSeriesEligible"" %in% names(properties))) {","brace_linter"
"R/Validate.R",198,3,"style","`else` should come on the same line as the previous `}`.","  else if (!(""crossSeriesEligible"" %in% names(properties))) {","brace_linter"
"R/Validate.R",201,3,"style","`else` should come on the same line as the previous `}`.","  else if (!isTRUE(properties$timeSeriesEligible)) {","brace_linter"
"tests/testthat/helper-fixtures.R",14,1,"style","Variable and function name style should be snake_case or symbols.","fakeProjectJson$id <- fakeProject$projectId","object_name_linter"
"tests/testthat/helper-fixtures.R",16,7,"style","Variable and function name style should be snake_case or symbols.","class(fakeProjectJson) <- ""list""","object_name_linter"
"tests/testthat/test-StartAutopilot.R",66,55,"warning","no visible binding for global variable ‘projectUrl’","      getStub$onCall(7)$returns(httr:::response(url = projectUrl,","object_usage_linter"
"tests/testthat/test-StartAutopilot.R",71,55,"warning","no visible binding for global variable ‘projectUrl’","      getStub$onCall(5)$returns(httr:::response(url = projectUrl,","object_usage_linter"
"tests/testthat/test-StartAutopilot.R",76,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"tests/testthat/test-StartAutopilot.R",78,53,"warning","no visible binding for global variable ‘projectUrl’","    getStub$onCall(3)$returns(httr:::response(url = projectUrl,","object_usage_linter"
"tests/testthat/test-StartAutopilot.R",112,49,"warning","no visible binding for global variable ‘fakeEndpoint’","            ""datarobot:::Endpoint"" = function() fakeEndpoint,","object_usage_linter"
"tests/testthat/test-StartAutopilot.R",113,46,"warning","no visible binding for global variable ‘fakeToken’","            ""datarobot:::Token"" = function() fakeToken,","object_usage_linter"
"vignettes/AdvancedTuning.Rmd",22,1,"style","Variable and function name style should be snake_case or symbols.","tuningJobId <- RunInteractiveTuning(myModel)","object_name_linter"
"vignettes/AdvancedTuning.Rmd",28,1,"style","Variable and function name style should be snake_case or symbols.","tunedModel <- GetModelFromJobId(myModel$projectId, tuningJobId)","object_name_linter"
"vignettes/AdvancedTuning.Rmd",54,1,"style","Variable and function name style should be snake_case or symbols.","myXGBModel <- GetModel(projectId, modelId)","object_name_linter"
"vignettes/AdvancedTuning.Rmd",55,1,"style","Variable and function name style should be snake_case or symbols.","RunTune <- StartTuningSession(myXGBModel)","object_name_linter"
"vignettes/AdvancedTuning.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","tuningJob <- RunTune(myXGBModel, colsample_bytree = 0.4, colsample_bylevel = 0.8)","object_name_linter"
"vignettes/AdvancedTuning.Rmd",56,81,"style","Lines should not be more than 80 characters.","tuningJob <- RunTune(myXGBModel, colsample_bytree = 0.4, colsample_bylevel = 0.8)","line_length_linter"
"vignettes/AdvancedTuning.Rmd",57,1,"style","Variable and function name style should be snake_case or symbols.","tunedModel <- GetModelFromJobId(projectId, tuningJob)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",37,81,"style","Lines should not be more than 80 characters.","ConnectToDataRobot(endpoint = ""http://<YOUR DR SERVER>/api/v2"", token = ""<YOUR API TOKEN>"")","line_length_linter"
"vignettes/AdvancedVignette.Rmd",46,1,"style","Variable and function name style should be snake_case or symbols.","lendingClubURL <- ""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv""","object_name_linter"
"vignettes/AdvancedVignette.Rmd",46,81,"style","Lines should not be more than 80 characters.","lendingClubURL <- ""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv""","line_length_linter"
"vignettes/AdvancedVignette.Rmd",79,1,"style","Variable and function name style should be snake_case or symbols.","allModels <- ListModels(project)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",81,1,"style","Variable and function name style should be snake_case or symbols.","modelFrame <- as.data.frame(allModels)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",83,27,"style","Only use double-quotes.","if (project$metric %in% c('AUC', 'Gini Norm')) {","single_quotes_linter"
"vignettes/AdvancedVignette.Rmd",83,34,"style","Only use double-quotes.","if (project$metric %in% c('AUC', 'Gini Norm')) {","single_quotes_linter"
"vignettes/AdvancedVignette.Rmd",84,3,"style","Variable and function name style should be snake_case or symbols.","  bestIndex <- which.max(metric)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",86,3,"style","Variable and function name style should be snake_case or symbols.","  bestIndex <- which.min(metric)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",88,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- allModels[[bestIndex]]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",93,1,"style","Variable and function name style should be snake_case or symbols.","allModels <- readRDS(""modelsModelInsights.rds"")","object_name_linter"
"vignettes/AdvancedVignette.Rmd",94,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- allModels[[1]]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",115,1,"style","Variable and function name style should be snake_case or symbols.","ValidationLiftChart <- GetLiftChart(bestModel, source = ""validation"")","object_name_linter"
"vignettes/AdvancedVignette.Rmd",122,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartPlot <- function(ValidationLiftChart, bins = 10) {","object_name_linter"
"vignettes/AdvancedVignette.Rmd",122,27,"style","Variable and function name style should be snake_case or symbols.","LiftChartPlot <- function(ValidationLiftChart, bins = 10) {","object_name_linter"
"vignettes/AdvancedVignette.Rmd",124,5,"style","Variable and function name style should be snake_case or symbols.","    ValidationLiftChart$bins <- rep(seq(bins), each = 60 / bins)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",125,5,"style","Variable and function name style should be snake_case or symbols.","    ValidationLiftChart <- data.table(ValidationLiftChart)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",133,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartData <- LiftChartPlot(ValidationLiftChart)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",142,3,"style","Commented code should be removed.","# dr_dark_blue <- ""#08233F""","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",143,3,"style","Commented code should be removed.","# dr_blue <- ""#1F77B4""","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",144,3,"style","Commented code should be removed.","# dr_orange <- ""#FF7F0E""","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",145,3,"style","Commented code should be removed.","# LiftChartData <- readRDS(""LiftChartDataVal.rds"")","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",146,3,"style","Commented code should be removed.","# par(bg = dr_dark_blue)","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",149,3,"style","Commented code should be removed.","# lines(LiftChartData$Predicted, col = dr_blue, pch = 20, type = ""b"")","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","AllLiftChart <- ListLiftCharts(bestModel)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",157,1,"style","Variable and function name style should be snake_case or symbols.","LiftChartData <- LiftChartPlot(AllLiftChart[[""crossValidation""]])","object_name_linter"
"vignettes/AdvancedVignette.Rmd",166,3,"style","Commented code should be removed.","# LiftChartData <- readRDS(""LiftChartDataCV.rds"")","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",167,3,"style","Commented code should be removed.","# par(bg = dr_dark_blue)","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",170,3,"style","Commented code should be removed.","# lines(LiftChartData$Predicted, col = dr_blue, pch = 20, type = ""b"")","commented_code_linter"
"vignettes/AdvancedVignette.Rmd",212,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocCurve <- GetRocCurve(bestModel)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",213,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocPoints <- ValidationRocCurve[[""rocPoints""]]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",216,81,"style","Lines should not be more than 80 characters.","plot(ValidationRocPoints$falsePositiveRate, ValidationRocPoints$truePositiveRate,","line_length_linter"
"vignettes/AdvancedVignette.Rmd",218,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"vignettes/AdvancedVignette.Rmd",220,17,"style","Commas should always have a space after.","     ylim = c(0,1), xlim = c(0,1),","commas_linter"
"vignettes/AdvancedVignette.Rmd",220,32,"style","Commas should always have a space after.","     ylim = c(0,1), xlim = c(0,1),","commas_linter"
"vignettes/AdvancedVignette.Rmd",227,1,"style","Variable and function name style should be snake_case or symbols.","ValidationRocPoints <- readRDS(""ValidationRocPoints.rds"")","object_name_linter"
"vignettes/AdvancedVignette.Rmd",229,81,"style","Lines should not be more than 80 characters.","plot(ValidationRocPoints$falsePositiveRate, ValidationRocPoints$truePositiveRate,","line_length_linter"
"vignettes/AdvancedVignette.Rmd",231,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"vignettes/AdvancedVignette.Rmd",240,1,"style","Variable and function name style should be snake_case or symbols.","AllRocCurve <- ListRocCurves(bestModel)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",241,1,"style","Variable and function name style should be snake_case or symbols.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",241,42,"style","Only use double-quotes.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","single_quotes_linter"
"vignettes/AdvancedVignette.Rmd",241,63,"style","Only use double-quotes.","CrossValidationRocPoints <- AllRocCurve[['crossValidation']][['rocPoints']]","single_quotes_linter"
"vignettes/AdvancedVignette.Rmd",242,35,"style","Only use double-quotes.","saveRDS(CrossValidationRocPoints, 'CrossValidationRocPoints.rds')","single_quotes_linter"
"vignettes/AdvancedVignette.Rmd",244,81,"style","Lines should not be more than 80 characters.","plot(CrossValidationRocPoints$falsePositiveRate, CrossValidationRocPoints$truePositiveRate,","line_length_linter"
"vignettes/AdvancedVignette.Rmd",246,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"vignettes/AdvancedVignette.Rmd",253,1,"style","Variable and function name style should be snake_case or symbols.","CrossValidationRocPoints <- readRDS(""CrossValidationRocPoints.rds"")","object_name_linter"
"vignettes/AdvancedVignette.Rmd",255,81,"style","Lines should not be more than 80 characters.","plot(CrossValidationRocPoints$falsePositiveRate, CrossValidationRocPoints$truePositiveRate,","line_length_linter"
"vignettes/AdvancedVignette.Rmd",257,81,"style","Lines should not be more than 80 characters.","     xlab = ""False Positive Rate (Fallout)"", ylab = ""True Positive Rate (Sensitivity)"",","line_length_linter"
"vignettes/AdvancedVignette.Rmd",267,23,"style","Trailing whitespace is superfluous.","  ValidationRocPoints, ","trailing_whitespace_linter"
"vignettes/AdvancedVignette.Rmd",278,81,"style","Lines should not be more than 80 characters.","threshold <- ValidationRocPoints$threshold[which.max(ValidationRocPoints$f1Score)]","line_length_linter"
"vignettes/AdvancedVignette.Rmd",284,81,"style","Lines should not be more than 80 characters.","ValidationRocPoints[ValidationRocPoints$threshold == tail(Filter(function(x) x > threshold,","line_length_linter"
"vignettes/AdvancedVignette.Rmd",285,81,"style","Lines should not be more than 80 characters.","                                                                 ValidationRocPoints$threshold),","line_length_linter"
"vignettes/AdvancedVignette.Rmd",302,1,"style","Variable and function name style should be snake_case or symbols.","wordModels <- allModels[grep(""Word"", lapply(allModels, `[[`, ""modelType""))]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",303,1,"style","Variable and function name style should be snake_case or symbols.","wordModel <- wordModels[[1]]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",305,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- GetWordCloud(project, wordModel$modelId)","object_name_linter"
"vignettes/AdvancedVignette.Rmd",311,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- readRDS(""wordCloudModelInsights.rds"")","object_name_linter"
"vignettes/AdvancedVignette.Rmd",318,47,"style","Trailing whitespace is superfluous.","  colormap::colormap(c(""#255FEC"", ""#2DBEF9"")), ","trailing_whitespace_linter"
"vignettes/AdvancedVignette.Rmd",320,29,"style","Trailing whitespace is superfluous.","    c(""#FFAC9D"", ""#D80909""), ","trailing_whitespace_linter"
"vignettes/AdvancedVignette.Rmd",329,1,"style","Variable and function name style should be snake_case or symbols.","wordCloud <- wordCloud[!wordCloud$isStopword, ]","object_name_linter"
"vignettes/AdvancedVignette.Rmd",331,56,"style","Trailing whitespace is superfluous.","# Specify colors similar to what DataRobot produces for ","trailing_whitespace_linter"
"vignettes/Calendars.Rmd",18,81,"style","Lines should not be more than 80 characters.","calendar <- read.csv(system.file(""extdata"", ""calendar.csv"", package = ""datarobot""))","line_length_linter"
"vignettes/Calendars.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"vignettes/Calendars.Rmd",72,1,"style","Variable and function name style should be snake_case or symbols.","newCalendar <- UpdateCalendar(calendar, name = ""newName"")","object_name_linter"
"vignettes/Calendars.Rmd",88,81,"style","Lines should not be more than 80 characters.","project <- SetupProject(timeSeriesData, projectName = ""time series with calendar"")","line_length_linter"
"vignettes/Calendars.Rmd",91,81,"style","Lines should not be more than 80 characters.","                                                  autopilotDataSelectionMethod = ""duration"",","line_length_linter"
"vignettes/Calendars.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"vignettes/ComparingSubsets.Rmd",63,1,"style","Variable and function name style should be snake_case or symbols.","MissPctInsulin <- round(100 * length(which(PimaIndiansDiabetes$insulin == 0)) /","object_name_linter"
"vignettes/ComparingSubsets.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","insulinMissing <- as.numeric(PimaIndiansDiabetes$insulin == 0)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",76,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima <- PimaIndiansDiabetes","object_name_linter"
"vignettes/ComparingSubsets.Rmd",77,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima$insulin <- NULL","object_name_linter"
"vignettes/ComparingSubsets.Rmd",78,1,"style","Variable and function name style should be snake_case or symbols.","modifiedPima$insulinMissing <- insulinMissing","object_name_linter"
"vignettes/ComparingSubsets.Rmd",84,1,"style","Variable and function name style should be snake_case or symbols.","insulinProject <- StartProject(dataSource = modifiedPima,","object_name_linter"
"vignettes/ComparingSubsets.Rmd",93,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelList <- ListModels(insulinProject)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",98,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelList <- readRDS(""insulinModelList.rds"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",99,1,"style","Variable and function name style should be snake_case or symbols.","insulinModelFrame <- as.data.frame(insulinModelList, simple = FALSE)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",107,1,"style","Variable and function name style should be snake_case or symbols.","bestIndex <- which.min(insulinModelFrame$LogLoss.validation)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",108,1,"style","Variable and function name style should be snake_case or symbols.","worstIndex <- which.max(insulinModelFrame$LogLoss.validation)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",118,81,"style","Lines should not be more than 80 characters.","plot(insulinModelFrame$AUC.validation, xlab = ""Model number"", ylab = ""Area under the ROC curve"")","line_length_linter"
"vignettes/ComparingSubsets.Rmd",119,81,"style","Lines should not be more than 80 characters.","points(bestIndex, insulinModelFrame$AUC.validation[bestIndex], pch = 16, col = ""red"")","line_length_linter"
"vignettes/ComparingSubsets.Rmd",129,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(n = 9)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",130,1,"style","Variable and function name style should be snake_case or symbols.","modelList[[1]] <- insulinModelList","object_name_linter"
"vignettes/ComparingSubsets.Rmd",131,1,"style","Variable and function name style should be snake_case or symbols.","allVars <- colnames(modifiedPima)[1:8]","object_name_linter"
"vignettes/ComparingSubsets.Rmd",132,1,"style","Variable and function name style should be snake_case or symbols.","permFile <- tempfile(fileext = ""permFile.csv"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",134,3,"style","Variable and function name style should be snake_case or symbols.","  varName <- allVars[i]","object_name_linter"
"vignettes/ComparingSubsets.Rmd",136,3,"style","Variable and function name style should be snake_case or symbols.","  projName <- paste(""PermProject"",varName,sep="""")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",136,35,"style","Commas should always have a space after.","  projName <- paste(""PermProject"",varName,sep="""")","commas_linter"
"vignettes/ComparingSubsets.Rmd",136,43,"style","Commas should always have a space after.","  projName <- paste(""PermProject"",varName,sep="""")","commas_linter"
"vignettes/ComparingSubsets.Rmd",136,46,"style","Put spaces around all infix operators.","  projName <- paste(""PermProject"",varName,sep="""")","infix_spaces_linter"
"vignettes/ComparingSubsets.Rmd",137,3,"style","Variable and function name style should be snake_case or symbols.","  permProject <- StartProject(permFile, projectName = projName, target = ""insulinMissing"", wait = TRUE)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",137,81,"style","Lines should not be more than 80 characters.","  permProject <- StartProject(permFile, projectName = projName, target = ""insulinMissing"", wait = TRUE)","line_length_linter"
"vignettes/ComparingSubsets.Rmd",138,3,"style","Variable and function name style should be snake_case or symbols.","  modelList[[i+1]] <- ListModels(permProject)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",138,15,"style","Put spaces around all infix operators.","  modelList[[i+1]] <- ListModels(permProject)","infix_spaces_linter"
"vignettes/ComparingSubsets.Rmd",147,1,"style","Variable and function name style should be snake_case or symbols.","logLossDeltas <- readRDS(""insulinDeltaFrame.rds"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",151,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which.min(logLossDeltas$originalLogLoss)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",152,81,"style","Lines should not be more than 80 characters.","points(seq(1, 8, 1), logLossDeltas[bestRow, 1:8], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"vignettes/ComparingSubsets.Rmd",164,1,"style","Variable and function name style should be snake_case or symbols.","AUCshiftFrame <- readRDS(""AUCshiftFrame.rds"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",165,1,"style","Variable and function name style should be snake_case or symbols.","sortIndex <- order(logLossDeltas$originalLogLoss)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",166,81,"style","Lines should not be more than 80 characters.","plot(AUCshiftFrame$originalAUC[sortIndex], xlab = ""Model number"", ylab = ""Area under ROC curve"")","line_length_linter"
"vignettes/ComparingSubsets.Rmd",174,1,"style","Variable and function name style should be snake_case or symbols.","missingInsulin <- as.numeric(PimaIndiansDiabetes$insulin == 0)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",175,1,"style","Variable and function name style should be snake_case or symbols.","missingTriceps <- as.numeric(PimaIndiansDiabetes$triceps == 0)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",198,1,"style","Variable and function name style should be snake_case or symbols.","lossIndex <- which(dataCar$claimcst0 > 0)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",199,1,"style","Variable and function name style should be snake_case or symbols.","keepVars <- c(""veh_value"", ""exposure"", ""claimcst0"", ""veh_body"", ""veh_age"",","object_name_linter"
"vignettes/ComparingSubsets.Rmd",201,1,"style","Variable and function name style should be snake_case or symbols.","lossFrame <- subset(dataCar, claimcst0 > 0, select = keepVars)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",222,1,"style","Variable and function name style should be snake_case or symbols.","lossPct <- round(100 * length(lossIndex) / nrow(dataCar), digits = 1)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",223,1,"style","Variable and function name style should be snake_case or symbols.","anomIndex <- which(lossFrame$claimcst0 == 200)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",224,1,"style","Variable and function name style should be snake_case or symbols.","anomPct <- round(100 * length(anomIndex) / length(lossIndex), digits = 1)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",235,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame <- lossFrame","object_name_linter"
"vignettes/ComparingSubsets.Rmd",236,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame$claimcst0 <- NULL","object_name_linter"
"vignettes/ComparingSubsets.Rmd",237,1,"style","Variable and function name style should be snake_case or symbols.","anomFrame$anomaly <- anomaly","object_name_linter"
"vignettes/ComparingSubsets.Rmd",238,1,"style","Variable and function name style should be snake_case or symbols.","anomProject <- StartProject(anomFrame, projectName = ""AnomalyProject"", target = anomaly, wait = TRUE)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",238,81,"style","Lines should not be more than 80 characters.","anomProject <- StartProject(anomFrame, projectName = ""AnomalyProject"", target = anomaly, wait = TRUE)","line_length_linter"
"vignettes/ComparingSubsets.Rmd",239,1,"style","Variable and function name style should be snake_case or symbols.","anomalyModelList <- ListModels(anomProject)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",247,1,"style","Variable and function name style should be snake_case or symbols.","anomalyLeaderboard <- readRDS(""anomalyModelList.rds"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",248,1,"style","Variable and function name style should be snake_case or symbols.","anomalyLeaderFrame <- as.data.frame(anomalyLeaderboard, simple = FALSE)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",249,1,"style","Variable and function name style should be snake_case or symbols.","plotPct <- max(anomalyLeaderFrame$samplePct)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",250,81,"style","Lines should not be more than 80 characters.","plot(anomalyLeaderboard, pct = plotPct, orderDecreasing = TRUE, xlim = c(0, 0.45))","line_length_linter"
"vignettes/ComparingSubsets.Rmd",251,81,"style","Lines should not be more than 80 characters.","abline(v = min(anomalyLeaderFrame$LogLoss.validation), lty = 2, lwd = 2, col = ""magenta"")","line_length_linter"
"vignettes/ComparingSubsets.Rmd",258,1,"style","Variable and function name style should be snake_case or symbols.","AAUC <- anomalyLeaderFrame$AUC.validation","object_name_linter"
"vignettes/ComparingSubsets.Rmd",259,1,"style","Variable and function name style should be snake_case or symbols.","samplePct <- anomalyLeaderFrame$samplePct","object_name_linter"
"vignettes/ComparingSubsets.Rmd",262,1,"style","Variable and function name style should be snake_case or symbols.","Index64 <- which(samplePct == sizes[3])","object_name_linter"
"vignettes/ComparingSubsets.Rmd",264,1,"style","Variable and function name style should be snake_case or symbols.","Index32 <- which(samplePct == sizes[2])","object_name_linter"
"vignettes/ComparingSubsets.Rmd",266,1,"style","Variable and function name style should be snake_case or symbols.","Index16 <- which(samplePct == sizes[1])","object_name_linter"
"vignettes/ComparingSubsets.Rmd",275,1,"style","Variable and function name style should be snake_case or symbols.","anomAUCDeltaFrame <- readRDS(""anomAUCDeltaFrame.rds"")","object_name_linter"
"vignettes/ComparingSubsets.Rmd",276,1,"style","Variable and function name style should be snake_case or symbols.","bestIndex <- which.min(anomalyLeaderFrame$LogLoss.validation)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",277,1,"style","Variable and function name style should be snake_case or symbols.","bestExpModel <- as.character(anomalyLeaderFrame$expandedModel)[bestIndex]","object_name_linter"
"vignettes/ComparingSubsets.Rmd",278,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which(anomAUCDeltaFrame$expandedModel == bestExpModel)","object_name_linter"
"vignettes/ComparingSubsets.Rmd",282,14,"style","Put spaces around all infix operators.","         what=c(0, 1, 1, 1), ylim=c(-0.1, 0.1))","infix_spaces_linter"
"vignettes/ComparingSubsets.Rmd",282,34,"style","Put spaces around all infix operators.","         what=c(0, 1, 1, 1), ylim=c(-0.1, 0.1))","infix_spaces_linter"
"vignettes/ComparingSubsets.Rmd",283,81,"style","Lines should not be more than 80 characters.","points(seq(1, 7, 1), anomAUCDeltaFrame[bestRow, 1:7], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"vignettes/ComplianceDocumentation.Rmd",59,81,"style","Lines should not be more than 80 characters.","UploadComplianceDocTemplate(name = ""myNewTemplate"", filename = ""path/to/modified_file.json"")","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",67,81,"style","Lines should not be more than 80 characters.","                      ""regularText"" = ""This dataset had a lot of Missing Values. See the chart below: {{missingValues}}"",","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",70,81,"style","Lines should not be more than 80 characters.","                      ""regularText"" = ""{{blueprintDiagram}} /n Blueprint for this model"",","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",72,81,"style","Lines should not be more than 80 characters.","UploadComplianceDocTemplate(name = ""myNewTemplateFromSections"", sections = sections)","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",78,1,"style","Variable and function name style should be snake_case or symbols.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplateFromSections"")[[1]]","object_name_linter"
"vignettes/ComplianceDocumentation.Rmd",78,81,"style","Lines should not be more than 80 characters.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplateFromSections"")[[1]]","line_length_linter"
"vignettes/ComplianceDocumentation.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","myTemplate <- ListComplianceDocTemplates(namePart = ""myNewTemplate"")[[1]]","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",26,81,"style","Lines should not be more than 80 characters.","lending <- read.csv(""https://s3.amazonaws.com/datarobot_public_datasets/10K_Lending_Club_Loans.csv"")","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",27,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""earliest_cr_line"",","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",43,81,"style","Lines should not be more than 80 characters.","                                             ""1989-12-01"", ConstructDurationString(days = 100))","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",44,81,"style","Lines should not be more than 80 characters.","backtest[[2]] <- CreateBacktestSpecification(1, ConstructDurationString(), ""1999-10-01"",","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",45,81,"style","Lines should not be more than 80 characters.","                                             ConstructDurationString(days = 100))","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",67,81,"style","Lines should not be more than 80 characters.","# Retrieve a datetime model. There is now a new retrieval function specific to datetime partitioning","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",71,1,"style","Variable and function name style should be snake_case or symbols.","scoreJobId <- ScoreBacktests(dt_model)","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","dtModelWithBt <- GetDatetimeModel(proj, dt_model$modelId)","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",78,81,"style","Lines should not be more than 80 characters.","# One has to request a `Frozen` model to keep the hyper-parameters static and avoid lookahead bias.","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",79,81,"style","Lines should not be more than 80 characters.","# Within the context of deployment, this can be used to retrain a resulting model on more recent data.","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",80,81,"style","Lines should not be more than 80 characters.","UpdateProject(proj, holdoutUnlocked = TRUE) # If retraining on 100% of the data, we need to unlock the holdout set.","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",81,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId_frozen   <- RequestFrozenDatetimeModel(dt_model,","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",82,81,"style","Lines should not be more than 80 characters.","                                                  trainingStartDate = as.Date(""1950/12/1""),","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",83,81,"style","Lines should not be more than 80 characters.","                                                  trainingEndDate = as.Date(""1998/3/1""))","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId  <- RequestNewDatetimeModel(proj, bps[[1]], trainingRowCount = 100)","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",91,1,"style","Variable and function name style should be snake_case or symbols.","modelJobId   <- RequestNewDatetimeModel(proj, bps[[1]],","object_name_linter"
"vignettes/DatetimePartitionedProjects.Rmd",92,81,"style","Lines should not be more than 80 characters.","                                        trainingDuration = ConstructDurationString(months=10))","line_length_linter"
"vignettes/DatetimePartitionedProjects.Rmd",92,90,"style","Put spaces around all infix operators.","                                        trainingDuration = ConstructDurationString(months=10))","infix_spaces_linter"
"vignettes/Deployment.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","predictionServer <- ListPredictionServers()[[1]]","object_name_linter"
"vignettes/Deployment.Rmd",34,81,"style","Lines should not be more than 80 characters.","                               description = ""A new deployment for demo purposes"",","line_length_linter"
"vignettes/Deployment.Rmd",83,1,"style","Variable and function name style should be snake_case or symbols.","newModel <- ListModels(project)[[2]]","object_name_linter"
"vignettes/Deployment.Rmd",96,1,"style","Variable and function name style should be snake_case or symbols.","newModel <- ListModels(project)[[2]]","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",49,81,"style","Lines should not be more than 80 characters.","ConnectToDataRobot(endpoint = ""YOUR-ENDPOINT-HERE"", token = ""YOUR-API_TOKEN-HERE"")","line_length_linter"
"vignettes/IntroductionToDataRobot.Rmd",111,1,"style","Variable and function name style should be snake_case or symbols.","listOfBostonModels <- readRDS(""listOfBostonModels.rds"")","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",112,1,"style","Variable and function name style should be snake_case or symbols.","fullFrame <- as.data.frame(listOfBostonModels, simple = FALSE)","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",118,1,"style","Variable and function name style should be snake_case or symbols.","listOfBostonModels <- ListModels(project)","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",153,1,"style","Variable and function name style should be snake_case or symbols.","modelFrame <- as.data.frame(listOfBostonModels)","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",183,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- GetRecommendedModel(project)","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",184,1,"style","Variable and function name style should be snake_case or symbols.","bestPredictions <- Predict(bestModel, Boston)","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",202,1,"style","Variable and function name style should be snake_case or symbols.","bestPredictions <- readRDS(""bestPredictions.rds"")","object_name_linter"
"vignettes/IntroductionToDataRobot.Rmd",203,33,"style","Put spaces around all infix operators.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","infix_spaces_linter"
"vignettes/IntroductionToDataRobot.Rmd",203,61,"style","Put spaces around all infix operators.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","infix_spaces_linter"
"vignettes/IntroductionToDataRobot.Rmd",203,81,"style","Lines should not be more than 80 characters.","plot(medv, bestPredictions, xlab=""Observed medv value"", ylab=""Predicted medv value"",","line_length_linter"
"vignettes/Multiclass.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"vignettes/Multiclass.Rmd",92,1,"style","Variable and function name style should be snake_case or symbols.","confusionChart <- GetConfusionChart(model, source = DataPartition$VALIDATION)","object_name_linter"
"vignettes/PartialDependence.Rmd",31,1,"style","Variable and function name style should be snake_case or symbols.","concreteFrame <- read.csv(system.file(""extdata"", ""concreteData.csv"", package = ""datarobot""))","object_name_linter"
"vignettes/PartialDependence.Rmd",31,81,"style","Lines should not be more than 80 characters.","concreteFrame <- read.csv(system.file(""extdata"", ""concreteData.csv"", package = ""datarobot""))","line_length_linter"
"vignettes/PartialDependence.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","myDRProject <- StartProject(concreteFrame, ""ConcreteProject"", target = ""strength"", wait = TRUE)","object_name_linter"
"vignettes/PartialDependence.Rmd",43,81,"style","Lines should not be more than 80 characters.","myDRProject <- StartProject(concreteFrame, ""ConcreteProject"", target = ""strength"", wait = TRUE)","line_length_linter"
"vignettes/PartialDependence.Rmd",48,1,"style","Variable and function name style should be snake_case or symbols.","concreteModels <- readRDS(""concreteModels.rds"")","object_name_linter"
"vignettes/PartialDependence.Rmd",49,1,"style","Variable and function name style should be snake_case or symbols.","fullFrame <- as.data.frame(concreteModels, simple = FALSE)","object_name_linter"
"vignettes/PartialDependence.Rmd",50,1,"style","Variable and function name style should be snake_case or symbols.","modelsFrame <- as.data.frame(concreteModels)","object_name_linter"
"vignettes/PartialDependence.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","concreteModels <- ListModels(myDRProject)","object_name_linter"
"vignettes/PartialDependence.Rmd",80,1,"style","Variable and function name style should be snake_case or symbols.","poorCol <- c(""black"", ""red"", rep(""black"", 13))","object_name_linter"
"vignettes/PartialDependence.Rmd",99,1,"style","Variable and function name style should be snake_case or symbols.","ridgeRows <- grep(""Ridge"", modelsFrame$modelType)","object_name_linter"
"vignettes/PartialDependence.Rmd",104,1,"style","Variable and function name style should be snake_case or symbols.","goodCol <- c(rep(""black"", 3), ""red"", rep(""black"", 6), ""red"", rep(""black"", 3), ""red"")","object_name_linter"
"vignettes/PartialDependence.Rmd",104,81,"style","Lines should not be more than 80 characters.","goodCol <- c(rep(""black"", 3), ""red"", rep(""black"", 6), ""red"", rep(""black"", 3), ""red"")","line_length_linter"
"vignettes/PartialDependence.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",156,32,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",156,44,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",156,54,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",156,63,"style","Variable and function name style should be snake_case or symbols.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",156,81,"style","Lines should not be more than 80 characters.","FullAverageDataset <- function(covarFrame, refCovar, numGrid, plotRange = NULL) {","line_length_linter"
"vignettes/PartialDependence.Rmd",158,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(covars == refCovar)","object_name_linter"
"vignettes/PartialDependence.Rmd",159,3,"style","Variable and function name style should be snake_case or symbols.","  refVar <- covarFrame[, refIndex]","object_name_linter"
"vignettes/PartialDependence.Rmd",168,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- covarFrame","object_name_linter"
"vignettes/PartialDependence.Rmd",169,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame[, refIndex] <- grid[1]","object_name_linter"
"vignettes/PartialDependence.Rmd",171,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame <- covarFrame","object_name_linter"
"vignettes/PartialDependence.Rmd",172,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame[, refIndex] <- grid[i]","object_name_linter"
"vignettes/PartialDependence.Rmd",173,5,"style","Variable and function name style should be snake_case or symbols.","    outFrame <- rbind.data.frame(outFrame, upFrame)","object_name_linter"
"vignettes/PartialDependence.Rmd",184,1,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"vignettes/PartialDependence.Rmd",184,24,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"vignettes/PartialDependence.Rmd",184,36,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"vignettes/PartialDependence.Rmd",184,46,"style","Variable and function name style should be snake_case or symbols.","PDPbuilder <- function(covarFrame, refCovar, listOfModels,","object_name_linter"
"vignettes/PartialDependence.Rmd",185,24,"style","Variable and function name style should be snake_case or symbols.","                       numGrid = 100, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",185,39,"style","Variable and function name style should be snake_case or symbols.","                       numGrid = 100, plotRange = NULL) {","object_name_linter"
"vignettes/PartialDependence.Rmd",186,3,"style","Variable and function name style should be snake_case or symbols.","  augmentedFrame <- FullAverageDataset(covarFrame, refCovar,","object_name_linter"
"vignettes/PartialDependence.Rmd",188,3,"style","Variable and function name style should be snake_case or symbols.","  nModels <- length(listOfModels)","object_name_linter"
"vignettes/PartialDependence.Rmd",191,3,"style","Variable and function name style should be snake_case or symbols.","  yHat <- Predict(model, augmentedFrame)","object_name_linter"
"vignettes/PartialDependence.Rmd",192,3,"style","Variable and function name style should be snake_case or symbols.","  hatFrame <- augmentedFrame","object_name_linter"
"vignettes/PartialDependence.Rmd",193,3,"style","Variable and function name style should be snake_case or symbols.","  hatFrame$prediction <- yHat","object_name_linter"
"vignettes/PartialDependence.Rmd",194,3,"style","Variable and function name style should be snake_case or symbols.","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_name_linter"
"vignettes/PartialDependence.Rmd",194,13,"warning","no visible global function definition for ‘summaryBy’","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_usage_linter"
"vignettes/PartialDependence.Rmd",194,81,"style","Lines should not be more than 80 characters.","  hatSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","line_length_linter"
"vignettes/PartialDependence.Rmd",195,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(hatSum)[2] <- model$modelType","object_name_linter"
"vignettes/PartialDependence.Rmd",199,5,"style","Variable and function name style should be snake_case or symbols.","    yHat <- Predict(model, augmentedFrame)","object_name_linter"
"vignettes/PartialDependence.Rmd",200,5,"style","Variable and function name style should be snake_case or symbols.","    hatFrame <- augmentedFrame","object_name_linter"
"vignettes/PartialDependence.Rmd",201,5,"style","Variable and function name style should be snake_case or symbols.","    hatFrame$prediction <- yHat","object_name_linter"
"vignettes/PartialDependence.Rmd",202,5,"style","Variable and function name style should be snake_case or symbols.","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_name_linter"
"vignettes/PartialDependence.Rmd",202,14,"warning","no visible global function definition for ‘summaryBy’","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","object_usage_linter"
"vignettes/PartialDependence.Rmd",202,81,"style","Lines should not be more than 80 characters.","    upSum <- summaryBy(list(c(""prediction""), c(refCovar)), data = hatFrame, FUN = mean)","line_length_linter"
"vignettes/PartialDependence.Rmd",203,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upSum)[2] <- model$modelType","object_name_linter"
"vignettes/PartialDependence.Rmd",204,5,"style","Variable and function name style should be snake_case or symbols.","    hatSum <- merge(hatSum, upSum)","object_name_linter"
"vignettes/PartialDependence.Rmd",215,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(concreteModels[[1]], concreteModels[[5]],","object_name_linter"
"vignettes/PartialDependence.Rmd",217,1,"style","Variable and function name style should be snake_case or symbols.","agePDPframe <- PDPbuilder(concreteFrame[, 1:8], ""age"", modelList)","object_name_linter"
"vignettes/PartialDependence.Rmd",223,1,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"vignettes/PartialDependence.Rmd",223,20,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"vignettes/PartialDependence.Rmd",223,29,"style","Variable and function name style should be snake_case or symbols.","PDPlot <- function(PDframe, Response, ltypes,","object_name_linter"
"vignettes/PartialDependence.Rmd",224,20,"style","Variable and function name style should be snake_case or symbols.","                   lColors, ...) {","object_name_linter"
"vignettes/PartialDependence.Rmd",225,3,"style","Variable and function name style should be snake_case or symbols.","  Rng <- range(Response)","object_name_linter"
"vignettes/PartialDependence.Rmd",226,3,"style","Variable and function name style should be snake_case or symbols.","  nModels <- ncol(PDframe) - 1","object_name_linter"
"vignettes/PartialDependence.Rmd",227,3,"style","Variable and function name style should be snake_case or symbols.","  modelNames <- colnames(PDframe)[2: (nModels + 1)]","object_name_linter"
"vignettes/PartialDependence.Rmd",228,40,"style","Put spaces around all infix operators.","  plot(PDframe[, 1], PDframe[, 2], ylim=Rng, type = ""l"",","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",232,22,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",232,29,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",232,36,"style","Put spaces around all infix operators.","  abline(h = Rng, lty=3, lwd=2, col=""black"")","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",245,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",246,1,"style","Variable and function name style should be snake_case or symbols.","agePDPframe <- readRDS(""agePDPframe.rds"")","object_name_linter"
"vignettes/PartialDependence.Rmd",247,1,"style","Variable and function name style should be snake_case or symbols.","Response <- concreteFrame$strength","object_name_linter"
"vignettes/PartialDependence.Rmd",249,1,"style","Variable and function name style should be snake_case or symbols.","lColors <- c(""limegreen"", ""black"", ""blue"", ""magenta"")","object_name_linter"
"vignettes/PartialDependence.Rmd",256,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",257,1,"style","Variable and function name style should be snake_case or symbols.","cementPDPframe <- readRDS(""cementPDPframe.rds"")","object_name_linter"
"vignettes/PartialDependence.Rmd",264,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",265,1,"style","Variable and function name style should be snake_case or symbols.","waterPDPframe <- readRDS(""waterPDPframe.rds"")","object_name_linter"
"vignettes/PartialDependence.Rmd",272,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"vignettes/PartialDependence.Rmd",273,1,"style","Variable and function name style should be snake_case or symbols.","blastPDPframe <- readRDS(""blastPDPframe.rds"")","object_name_linter"
"vignettes/PredictionExplanations.Rmd",144,1,"error","Missing chunk end for chunk (maybe starting at line 144).","```{r results = ""asis"", message = FALSE, warning = FALSE, eval = FALSE}",NA
"vignettes/RatingTables.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","apiToken <- ""<YOUR API TOKEN GOES HERE>""","object_name_linter"
"vignettes/RatingTables.Rmd",36,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"vignettes/RatingTables.Rmd",37,1,"style","Variable and function name style should be snake_case or symbols.","ratingTables <- ListRatingTables(projectId)","object_name_linter"
"vignettes/RatingTables.Rmd",38,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- ratingTables[[1]]","object_name_linter"
"vignettes/RatingTables.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"vignettes/RatingTables.Rmd",50,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"vignettes/RatingTables.Rmd",51,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModels <- ListRatingTableModels(projectId)","object_name_linter"
"vignettes/RatingTables.Rmd",52,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModel <- ratingTableModels[[1]]","object_name_linter"
"vignettes/RatingTables.Rmd",53,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableId <- ratingTableModel$ratingTableId","object_name_linter"
"vignettes/RatingTables.Rmd",54,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- GetRatingTable(projectId, ratingTableId)","object_name_linter"
"vignettes/RatingTables.Rmd",59,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"vignettes/RatingTables.Rmd",66,1,"style","Variable and function name style should be snake_case or symbols.","projectId <- ""59dab74bbd2a54035786bfc0""","object_name_linter"
"vignettes/RatingTables.Rmd",67,1,"style","Variable and function name style should be snake_case or symbols.","modelId <- ""59dd0b01d9575702bec96e4""","object_name_linter"
"vignettes/RatingTables.Rmd",68,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableModel <- GetRatingTableModel(projectId, modelId)","object_name_linter"
"vignettes/RatingTables.Rmd",69,1,"style","Variable and function name style should be snake_case or symbols.","ratingTableId <- ratingTableModel$ratingTableId","object_name_linter"
"vignettes/RatingTables.Rmd",70,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- GetRatingTable(projectId, ratingTableId)","object_name_linter"
"vignettes/RatingTables.Rmd",75,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"vignettes/RatingTables.Rmd",94,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableJobId <- CreateRatingTable(project,","object_name_linter"
"vignettes/RatingTables.Rmd",98,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTable <- GetRatingTableFromJobId(project, newRatingTableJobId)","object_name_linter"
"vignettes/RatingTables.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","ratingTable <- readRDS(""ratingTable.rds"")","object_name_linter"
"vignettes/RatingTables.Rmd",113,1,"style","Variable and function name style should be snake_case or symbols.","newModelJobId <- RequestNewRatingTableModel(project, newRatingTable)","object_name_linter"
"vignettes/RatingTables.Rmd",114,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableModel <- GetRatingTableModelFromJobId(project, newModelJobId)","object_name_linter"
"vignettes/RatingTables.Rmd",119,1,"style","Variable and function name style should be snake_case or symbols.","newRatingTableModel <- readRDS(""ratingTableModel.RDS"")","object_name_linter"
"vignettes/TimeSeries.Rmd",67,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",69,81,"style","Lines should not be more than 80 characters.","StartProject(dataSource = data, target = ""target"", partition = partition, metric = ""RMSE"")","line_length_linter"
"vignettes/TimeSeries.Rmd",86,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",87,81,"style","Lines should not be more than 80 characters.","                                                  featureDerivationWindowStart = -24,","line_length_linter"
"vignettes/TimeSeries.Rmd",88,81,"style","Lines should not be more than 80 characters.","                                                  featureDerivationWindowEnd = -12,","line_length_linter"
"vignettes/TimeSeries.Rmd",104,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",136,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",138,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(""featureName"" = ""holiday"",","line_length_linter"
"vignettes/TimeSeries.Rmd",139,81,"style","Lines should not be more than 80 characters.","                                                                         ""knownInAdvance"" = TRUE))","line_length_linter"
"vignettes/TimeSeries.Rmd",150,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",152,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(list(""featureName"" = ""holiday"",","line_length_linter"
"vignettes/TimeSeries.Rmd",153,81,"style","Lines should not be more than 80 characters.","                                                                              ""knownInAdvance"" = TRUE),","line_length_linter"
"vignettes/TimeSeries.Rmd",154,81,"style","Lines should not be more than 80 characters.","                                                                         list(""featureName"" = ""weekend"",","line_length_linter"
"vignettes/TimeSeries.Rmd",155,81,"style","Lines should not be more than 80 characters.","                                                                              ""knownInAdvance"" = TRUE)))","line_length_linter"
"vignettes/TimeSeries.Rmd",186,81,"style","Lines should not be more than 80 characters.","data <- read.csv(system.file(""extdata"", ""multiseries.csv"", package = ""datarobot""))","line_length_linter"
"vignettes/TimeSeries.Rmd",187,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",189,81,"style","Lines should not be more than 80 characters.","                                                  multiseriesIdColumns = ""series_id"")","line_length_linter"
"vignettes/TimeSeries.Rmd",219,81,"style","Lines should not be more than 80 characters.","partition <- CreateDatetimePartitionSpecification(datetimePartitionColumn = ""timestamp"",","line_length_linter"
"vignettes/TimeSeries.Rmd",221,81,"style","Lines should not be more than 80 characters.","                                                  featureSettings = list(list(""featureName"" = ""sales"",","line_length_linter"
"vignettes/TimeSeries.Rmd",222,81,"style","Lines should not be more than 80 characters.","                                                                              ""doNotDerive"" = TRUE)))","line_length_linter"
"vignettes/TrainingPredictions.Rmd",26,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- GetTrainingPredictionsForModel(model, dataSubset = DataSubset$All)","object_name_linter"
"vignettes/TrainingPredictions.Rmd",26,81,"style","Lines should not be more than 80 characters.","trainingPredictions <- GetTrainingPredictionsForModel(model, dataSubset = DataSubset$All)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",27,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",32,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- readRDS(""trainingPredictions.rds"")","object_name_linter"
"vignettes/TrainingPredictions.Rmd",33,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",41,1,"style","Variable and function name style should be snake_case or symbols.","jobId <- RequestTrainingPredictions(model, dataSubset = DataSubset$All)","object_name_linter"
"vignettes/TrainingPredictions.Rmd",43,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- GetTrainingPredictionsFromJobId(projectId, jobId) # blocks until job complete","object_name_linter"
"vignettes/TrainingPredictions.Rmd",43,81,"style","Lines should not be more than 80 characters.","trainingPredictions <- GetTrainingPredictionsFromJobId(projectId, jobId) # blocks until job complete","line_length_linter"
"vignettes/TrainingPredictions.Rmd",44,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",49,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- readRDS(""trainingPredictions.rds"")","object_name_linter"
"vignettes/TrainingPredictions.Rmd",50,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPredictions), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictions <- ListTrainingPredictions(projectId)","object_name_linter"
"vignettes/TrainingPredictions.Rmd",57,1,"style","Variable and function name style should be snake_case or symbols.","trainingPredictionId <- trainingPredictions[[1]]$id","object_name_linter"
"vignettes/TrainingPredictions.Rmd",58,1,"style","Variable and function name style should be snake_case or symbols.","trainingPrediction <- GetTrainingPredictions(projectId, trainingPredictionId)","object_name_linter"
"vignettes/TrainingPredictions.Rmd",59,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPrediction), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",63,1,"style","Variable and function name style should be snake_case or symbols.","trainingPrediction <- readRDS(""trainingPrediction.rds"")","object_name_linter"
"vignettes/TrainingPredictions.Rmd",64,81,"style","Lines should not be more than 80 characters.","kable(head(trainingPrediction), longtable = TRUE, booktabs = TRUE, row.names = TRUE)","line_length_linter"
"vignettes/TrainingPredictions.Rmd",73,81,"style","Lines should not be more than 80 characters.","DownloadTrainingPredictions(projectId, trainingPredictionId, ""trainingPredictions.csv"")","line_length_linter"
"vignettes/VariableImportance.Rmd",60,81,"style","Lines should not be more than 80 characters.","friedman <- read.csv(system.file(""extdata"", ""Friedman1.csv.gz"", package = ""datarobot""))","line_length_linter"
"vignettes/VariableImportance.Rmd",61,1,"style","Variable and function name style should be snake_case or symbols.","originalProject <- StartProject(friedman, ""OriginalProject"", target = ""Y"", wait = TRUE)","object_name_linter"
"vignettes/VariableImportance.Rmd",61,81,"style","Lines should not be more than 80 characters.","originalProject <- StartProject(friedman, ""OriginalProject"", target = ""Y"", wait = TRUE)","line_length_linter"
"vignettes/VariableImportance.Rmd",62,1,"style","Variable and function name style should be snake_case or symbols.","originalModels <- ListModels(originalProject)","object_name_linter"
"vignettes/VariableImportance.Rmd",70,1,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"vignettes/VariableImportance.Rmd",70,27,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"vignettes/VariableImportance.Rmd",70,41,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"vignettes/VariableImportance.Rmd",70,50,"style","Variable and function name style should be snake_case or symbols.","PermuteColumn <- function(originalFile, colName, permutedFile, iseed = 317) {","object_name_linter"
"vignettes/VariableImportance.Rmd",72,3,"style","Variable and function name style should be snake_case or symbols.","  originalFile <- system.file(""extdata"", originalFile, package = ""datarobot"")","object_name_linter"
"vignettes/VariableImportance.Rmd",74,3,"style","Variable and function name style should be snake_case or symbols.","  varNames <- colnames(dframe)","object_name_linter"
"vignettes/VariableImportance.Rmd",75,3,"style","Variable and function name style should be snake_case or symbols.","  colIndex <- which(varNames == colName)","object_name_linter"
"vignettes/VariableImportance.Rmd",76,15,"style","Commas should never have a space before.","  x <- dframe[ ,colIndex]","commas_linter"
"vignettes/VariableImportance.Rmd",76,15,"style","Do not place spaces after square brackets.","  x <- dframe[ ,colIndex]","spaces_inside_linter"
"vignettes/VariableImportance.Rmd",76,17,"style","Commas should always have a space after.","  x <- dframe[ ,colIndex]","commas_linter"
"vignettes/VariableImportance.Rmd",78,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- dframe","object_name_linter"
"vignettes/VariableImportance.Rmd",79,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame[ ,colIndex] <- y","object_name_linter"
"vignettes/VariableImportance.Rmd",79,12,"style","Commas should never have a space before.","  outFrame[ ,colIndex] <- y","commas_linter"
"vignettes/VariableImportance.Rmd",79,12,"style","Do not place spaces after square brackets.","  outFrame[ ,colIndex] <- y","spaces_inside_linter"
"vignettes/VariableImportance.Rmd",79,14,"style","Commas should always have a space after.","  outFrame[ ,colIndex] <- y","commas_linter"
"vignettes/VariableImportance.Rmd",80,46,"style","Put spaces around all infix operators.","  write.csv(outFrame, permutedFile, row.names=FALSE)","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",87,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- list(n = 11)","object_name_linter"
"vignettes/VariableImportance.Rmd",88,1,"style","Variable and function name style should be snake_case or symbols.","modelList[[1]] <- originalModels","object_name_linter"
"vignettes/VariableImportance.Rmd",89,1,"style","Variable and function name style should be snake_case or symbols.","permFile <- tempfile(fileext = ""permFile.csv"")","object_name_linter"
"vignettes/VariableImportance.Rmd",91,3,"style","Variable and function name style should be snake_case or symbols.","  varName <- paste(""X"",i,sep="""")","object_name_linter"
"vignettes/VariableImportance.Rmd",91,24,"style","Commas should always have a space after.","  varName <- paste(""X"",i,sep="""")","commas_linter"
"vignettes/VariableImportance.Rmd",91,26,"style","Commas should always have a space after.","  varName <- paste(""X"",i,sep="""")","commas_linter"
"vignettes/VariableImportance.Rmd",91,29,"style","Put spaces around all infix operators.","  varName <- paste(""X"",i,sep="""")","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",93,3,"style","Variable and function name style should be snake_case or symbols.","  projName <- paste(""PermProject"", varName, sep = """")","object_name_linter"
"vignettes/VariableImportance.Rmd",94,3,"style","Variable and function name style should be snake_case or symbols.","  permProject <- StartProject(permFile, projectName = projName, target = ""Y"", wait = TRUE)","object_name_linter"
"vignettes/VariableImportance.Rmd",94,81,"style","Lines should not be more than 80 characters.","  permProject <- StartProject(permFile, projectName = projName, target = ""Y"", wait = TRUE)","line_length_linter"
"vignettes/VariableImportance.Rmd",95,3,"style","Variable and function name style should be snake_case or symbols.","  modelList[[i+1]] <- ListModels(permProject)","object_name_linter"
"vignettes/VariableImportance.Rmd",95,15,"style","Put spaces around all infix operators.","  modelList[[i+1]] <- ListModels(permProject)","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",101,1,"style","Variable and function name style should be snake_case or symbols.","modelList <- readRDS(""PermutationModelList.rds"")","object_name_linter"
"vignettes/VariableImportance.Rmd",116,1,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"vignettes/VariableImportance.Rmd",116,30,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"vignettes/VariableImportance.Rmd",116,45,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"vignettes/VariableImportance.Rmd",116,62,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"vignettes/VariableImportance.Rmd",116,75,"style","Variable and function name style should be snake_case or symbols.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","object_name_linter"
"vignettes/VariableImportance.Rmd",116,81,"style","Lines should not be more than 80 characters.","PermutationMerge <- function(compositeList, matchPct = NULL, metricNames, matchMetric = NULL) {","line_length_linter"
"vignettes/VariableImportance.Rmd",124,5,"style","Variable and function name style should be snake_case or symbols.","    projectMetric <- compositeList[[1]][[1]]$projectMetric","object_name_linter"
"vignettes/VariableImportance.Rmd",125,5,"style","Variable and function name style should be snake_case or symbols.","    matchMetric <- paste(projectMetric, ""validation"", sep = ""."")","object_name_linter"
"vignettes/VariableImportance.Rmd",127,3,"style","Variable and function name style should be snake_case or symbols.","  getCols <- c(""modelType"", ""expandedModel"", ""samplePct"", ""blueprintId"", matchMetric)","object_name_linter"
"vignettes/VariableImportance.Rmd",127,81,"style","Lines should not be more than 80 characters.","  getCols <- c(""modelType"", ""expandedModel"", ""samplePct"", ""blueprintId"", matchMetric)","line_length_linter"
"vignettes/VariableImportance.Rmd",128,3,"style","Variable and function name style should be snake_case or symbols.","  outFrame <- df[index, getCols]","object_name_linter"
"vignettes/VariableImportance.Rmd",129,3,"style","Variable and function name style should be snake_case or symbols.","  keepCols <- getCols","object_name_linter"
"vignettes/VariableImportance.Rmd",130,3,"style","Variable and function name style should be snake_case or symbols.","  keepCols[5] <- metricNames[1]","object_name_linter"
"vignettes/VariableImportance.Rmd",131,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(outFrame) <- keepCols","object_name_linter"
"vignettes/VariableImportance.Rmd",136,5,"style","Variable and function name style should be snake_case or symbols.","    upFrame <- df[index, c(""blueprintId"", matchMetric)]","object_name_linter"
"vignettes/VariableImportance.Rmd",137,14,"style","Variable and function name style should be snake_case or symbols.","    colnames(upFrame) <- c(""blueprintId"", metricNames[i])","object_name_linter"
"vignettes/VariableImportance.Rmd",138,5,"style","Variable and function name style should be snake_case or symbols.","    outFrame <- merge(outFrame, upFrame, by = ""blueprintId"")","object_name_linter"
"vignettes/VariableImportance.Rmd",147,1,"style","Variable and function name style should be snake_case or symbols.","metricNames <- c(""originalRMSE"", paste(""X"", seq(1, 10, 1), ""RMSE"", sep = """"))","object_name_linter"
"vignettes/VariableImportance.Rmd",148,1,"style","Variable and function name style should be snake_case or symbols.","mergeFrame <- PermutationMerge(modelList, 16, metricNames)","object_name_linter"
"vignettes/VariableImportance.Rmd",156,1,"style","Variable and function name style should be snake_case or symbols.","BeanNames <- c(""None"", paste(""X"", seq(1, 10, 1), sep = """"))","object_name_linter"
"vignettes/VariableImportance.Rmd",167,1,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"vignettes/VariableImportance.Rmd",167,27,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"vignettes/VariableImportance.Rmd",167,39,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"vignettes/VariableImportance.Rmd",167,47,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"vignettes/VariableImportance.Rmd",167,58,"style","Variable and function name style should be snake_case or symbols.","ComputeDeltas <- function(mergeFrame, refCol, permNames, shiftNames) {","object_name_linter"
"vignettes/VariableImportance.Rmd",168,3,"style","Variable and function name style should be snake_case or symbols.","  allNames <- colnames(mergeFrame)","object_name_linter"
"vignettes/VariableImportance.Rmd",169,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(allNames == refCol)","object_name_linter"
"vignettes/VariableImportance.Rmd",170,3,"style","Variable and function name style should be snake_case or symbols.","  xRef <- mergeFrame[, refIndex]","object_name_linter"
"vignettes/VariableImportance.Rmd",171,3,"style","Variable and function name style should be snake_case or symbols.","  permCols <- which(allNames %in% permNames)","object_name_linter"
"vignettes/VariableImportance.Rmd",172,3,"style","Variable and function name style should be snake_case or symbols.","  xPerm <- mergeFrame[, permCols]","object_name_linter"
"vignettes/VariableImportance.Rmd",176,3,"style","Variable and function name style should be snake_case or symbols.","  newIndex <- which(colnames(deltas) == ""New"")","object_name_linter"
"vignettes/VariableImportance.Rmd",185,1,"style","Variable and function name style should be snake_case or symbols.","allNames <- colnames(mergeFrame)","object_name_linter"
"vignettes/VariableImportance.Rmd",186,1,"style","Variable and function name style should be snake_case or symbols.","refCol <- allNames[5]","object_name_linter"
"vignettes/VariableImportance.Rmd",187,1,"style","Variable and function name style should be snake_case or symbols.","permNames <- allNames[6:15]","object_name_linter"
"vignettes/VariableImportance.Rmd",188,1,"style","Variable and function name style should be snake_case or symbols.","shiftNames <- paste(""X"", seq(1, 10, 1), sep = """")","object_name_linter"
"vignettes/VariableImportance.Rmd",189,1,"style","Variable and function name style should be snake_case or symbols.","deltaFrame <- ComputeDeltas(mergeFrame, refCol, permNames, shiftNames)","object_name_linter"
"vignettes/VariableImportance.Rmd",193,10,"style","Put spaces around all infix operators.","par(mfrow=c(1, 1))","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",198,1,"style","Variable and function name style should be snake_case or symbols.","bestRow <- which.min(deltaFrame$originalRMSE)","object_name_linter"
"vignettes/VariableImportance.Rmd",199,1,"style","Variable and function name style should be snake_case or symbols.","bestModel <- mergeFrame$modelType[bestRow]","object_name_linter"
"vignettes/VariableImportance.Rmd",200,81,"style","Lines should not be more than 80 characters.","points(seq(1, 10, 1), deltaFrame[bestRow, 1:10], pch = 16, col = ""limegreen"", cex = 1.5)","line_length_linter"
"vignettes/VariableImportance.Rmd",219,1,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"vignettes/VariableImportance.Rmd",219,27,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"vignettes/VariableImportance.Rmd",219,39,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"vignettes/VariableImportance.Rmd",219,47,"style","Variable and function name style should be snake_case or symbols.","varImpSummary <- function(deltaFrame, refCol, oneIndex) {","object_name_linter"
"vignettes/VariableImportance.Rmd",221,3,"style","Variable and function name style should be snake_case or symbols.","  refIndex <- which(vars == refCol)","object_name_linter"
"vignettes/VariableImportance.Rmd",222,3,"style","Variable and function name style should be snake_case or symbols.","  refValue <- deltaFrame[, refIndex]","object_name_linter"
"vignettes/VariableImportance.Rmd",223,11,"style","Put spaces around all infix operators.","  wts <- 1/refValue  # Performance-weights = reciprocal fitting measure","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",224,3,"style","Variable and function name style should be snake_case or symbols.","  deltasOnly <- deltaFrame[, -refIndex]","object_name_linter"
"vignettes/VariableImportance.Rmd",225,3,"style","Variable and function name style should be snake_case or symbols.","  thisModel <- as.numeric(deltasOnly[oneIndex, ])","object_name_linter"
"vignettes/VariableImportance.Rmd",226,34,"style","Put spaces around all infix operators.","  avg <- apply(deltasOnly, MARGIN=2, mean)","infix_spaces_linter"
"vignettes/VariableImportance.Rmd",227,3,"style","Variable and function name style should be snake_case or symbols.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","object_name_linter"
"vignettes/VariableImportance.Rmd",227,35,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","brace_linter"
"vignettes/VariableImportance.Rmd",227,57,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","  WtAvgFunction <- function(x, w) { sum(w * x) / sum(w) }","brace_linter"
"vignettes/VariableImportance.Rmd",228,3,"style","Variable and function name style should be snake_case or symbols.","  wtAvg <- apply(deltasOnly, MARGIN = 2, WtAvgFunction, wts)","object_name_linter"
"vignettes/VariableImportance.Rmd",229,3,"style","Variable and function name style should be snake_case or symbols.","  varImpFrame <- data.frame(average = avg,","object_name_linter"
"vignettes/VariableImportance.Rmd",239,1,"style","Variable and function name style should be snake_case or symbols.","varImp <- varImpSummary(deltaFrame, ""originalRMSE"", bestRow)","object_name_linter"
"vignettes/VariableImportance.Rmd",241,1,"style","Variable and function name style should be snake_case or symbols.","wtAvg <- round(varImp$weightedAverage, digits = 3)","object_name_linter"
