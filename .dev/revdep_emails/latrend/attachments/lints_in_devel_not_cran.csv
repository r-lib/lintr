"filename","line_number","column_number","type","message","line","linter"
"data-raw/latrendData.R",6,1,"style","Variable and function name style should be snake_case or symbols.","latrendData = generateLongData(","object_name_linter"
"data-raw/latrendData.R",6,13,"style","Use <-, not =, for assignment.","latrendData = generateLongData(","assignment_linter"
"data-raw/latrendData.R",11,8,"style","Only use double-quotes.","  id = 'Id',","single_quotes_linter"
"data-raw/latrendData.R",17,24,"style","Only use double-quotes.","  clusterNames = paste('Class', 1:3),","single_quotes_linter"
"data-raw/latrendData.R",22,42,"style","Only use double-quotes.","plotTrajectories(latrendData, response = 'Y')","single_quotes_linter"
"data-raw/latrendData.R",23,42,"style","Only use double-quotes.","plotTrajectories(latrendData, response = 'Y', cluster = 'Class', facet = FALSE)","single_quotes_linter"
"data-raw/latrendData.R",23,57,"style","Only use double-quotes.","plotTrajectories(latrendData, response = 'Y', cluster = 'Class', facet = FALSE)","single_quotes_linter"
"data-raw/latrendData.R",24,42,"style","Only use double-quotes.","plotTrajectories(latrendData, response = 'Y', cluster = 'Class', facet = TRUE)","single_quotes_linter"
"data-raw/latrendData.R",24,57,"style","Only use double-quotes.","plotTrajectories(latrendData, response = 'Y', cluster = 'Class', facet = TRUE)","single_quotes_linter"
"data-raw/osa-adherence-data.R",6,81,"style","Lines should not be more than 80 characters.","#' @description Generates data from the group definitions provided by M. Aloia et al. (2008).","line_length_linter"
"data-raw/osa-adherence-data.R",16,81,"style","Lines should not be more than 80 characters.","#' @param missing Whether to simulate measurements being missing (including drop-out)","line_length_linter"
"data-raw/osa-adherence-data.R",19,81,"style","Lines should not be more than 80 characters.","#' Mark S. Aloia, Matthew S. Goodwin, Wayne F. Velicer, J. Todd Arnedt, Molly Zimmerman, Jaime Skrekas, Sarah Harris, Richard P. Millman,","line_length_linter"
"data-raw/osa-adherence-data.R",20,81,"style","Lines should not be more than 80 characters.","#' Time Series Analysis of Treatment Adherence Patterns in Individuals with Obstructive Sleep Apnea, Annals of Behavioral Medicine,","line_length_linter"
"data-raw/osa-adherence-data.R",21,81,"style","Lines should not be more than 80 characters.","#' Volume 36, Issue 1, August 2008, Pages 44–53, https://doi.org/10.1007/s12160-008-9052-9","line_length_linter"
"data-raw/osa-adherence-data.R",22,19,"style","Use <-, not =, for assignment.","generate_osa_data = function(","assignment_linter"
"data-raw/osa-adherence-data.R",25,3,"style","Variable and function name style should be snake_case or symbols.","  nAggr = 14,","object_name_linter"
"data-raw/osa-adherence-data.R",37,3,"style","Variable and function name style should be snake_case or symbols.","  dropoutTimes = c(Inf, Inf, Inf, Inf, Inf, 90, 30),","object_name_linter"
"data-raw/osa-adherence-data.R",38,3,"style","Variable and function name style should be snake_case or symbols.","  sd.dropoutTimes = c(0, 0, 0, 0, 0, 30, 10),","object_name_linter"
"data-raw/osa-adherence-data.R",39,3,"style","Variable and function name style should be snake_case or symbols.","  attemptProbs = c(354, 344, 280, 299, 106, 55, 14) / pmin(dropoutTimes, 365),","object_name_linter"
"data-raw/osa-adherence-data.R",50,3,"style","Variable and function name style should be snake_case or symbols.","  sd.intercepts = c(","object_name_linter"
"data-raw/osa-adherence-data.R",68,3,"style","Variable and function name style should be snake_case or symbols.","  sd.slopes = c(","object_name_linter"
"data-raw/osa-adherence-data.R",86,3,"style","Variable and function name style should be snake_case or symbols.","  sd.quads = c(","object_name_linter"
"data-raw/osa-adherence-data.R",104,3,"style","Variable and function name style should be snake_case or symbols.","  sd.vars = c(","object_name_linter"
"data-raw/osa-adherence-data.R",122,3,"style","Variable and function name style should be snake_case or symbols.","  groupNames = c(","object_name_linter"
"data-raw/osa-adherence-data.R",123,5,"style","Only use double-quotes.","    'Good users',","single_quotes_linter"
"data-raw/osa-adherence-data.R",124,5,"style","Only use double-quotes.","    'Slow improvers',","single_quotes_linter"
"data-raw/osa-adherence-data.R",125,5,"style","Only use double-quotes.","    'Slow decliners',","single_quotes_linter"
"data-raw/osa-adherence-data.R",126,5,"style","Only use double-quotes.","    'Variable users',","single_quotes_linter"
"data-raw/osa-adherence-data.R",127,5,"style","Only use double-quotes.","    'Occasional attempters',","single_quotes_linter"
"data-raw/osa-adherence-data.R",128,5,"style","Only use double-quotes.","    'Early drop-outs',","single_quotes_linter"
"data-raw/osa-adherence-data.R",129,5,"style","Only use double-quotes.","    'Non-users'","single_quotes_linter"
"data-raw/osa-adherence-data.R",134,3,"style","Variable and function name style should be snake_case or symbols.","  groupCounts = floor(patients * props)","object_name_linter"
"data-raw/osa-adherence-data.R",134,15,"style","Use <-, not =, for assignment.","  groupCounts = floor(patients * props)","assignment_linter"
"data-raw/osa-adherence-data.R",135,3,"style","Variable and function name style should be snake_case or symbols.","  incrIdx = order((patients * props) %% 1) %>%","object_name_linter"
"data-raw/osa-adherence-data.R",135,11,"style","Use <-, not =, for assignment.","  incrIdx = order((patients * props) %% 1) %>%","assignment_linter"
"data-raw/osa-adherence-data.R",137,3,"style","Variable and function name style should be snake_case or symbols.","  groupCounts[incrIdx] = groupCounts[incrIdx] + 1 # increment the groups that were closest to receiving another patient","object_name_linter"
"data-raw/osa-adherence-data.R",137,24,"style","Use <-, not =, for assignment.","  groupCounts[incrIdx] = groupCounts[incrIdx] + 1 # increment the groups that were closest to receiving another patient","assignment_linter"
"data-raw/osa-adherence-data.R",137,81,"style","Lines should not be more than 80 characters.","  groupCounts[incrIdx] = groupCounts[incrIdx] + 1 # increment the groups that were closest to receiving another patient","line_length_linter"
"data-raw/osa-adherence-data.R",139,3,"style","Variable and function name style should be snake_case or symbols.","  groupNames = factor(groupNames, levels = groupNames)","object_name_linter"
"data-raw/osa-adherence-data.R",139,14,"style","Use <-, not =, for assignment.","  groupNames = factor(groupNames, levels = groupNames)","assignment_linter"
"data-raw/osa-adherence-data.R",142,3,"style","Variable and function name style should be snake_case or symbols.","  groupCoefs = data.table(","object_name_linter"
"data-raw/osa-adherence-data.R",142,14,"style","Use <-, not =, for assignment.","  groupCoefs = data.table(","assignment_linter"
"data-raw/osa-adherence-data.R",159,3,"style","Variable and function name style should be snake_case or symbols.","  patCoefs = groupCoefs[, .(","object_name_linter"
"data-raw/osa-adherence-data.R",159,12,"style","Use <-, not =, for assignment.","  patCoefs = groupCoefs[, .(","assignment_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,19,"warning","no visible binding for global variable ‘Patients’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,29,"warning","no visible binding for global variable ‘TDrop’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",160,36,"warning","no visible binding for global variable ‘Sd.TDrop’","    TDrop = rnorm(Patients, TDrop, Sd.TDrop) %>% round %>% pmax(7),","object_usage_linter"
"data-raw/osa-adherence-data.R",161,13,"warning","no visible binding for global variable ‘AProb’","    AProb = AProb,","object_usage_linter"
"data-raw/osa-adherence-data.R",162,33,"warning","no visible binding for global variable ‘Int’","    Intercept = rnorm(Patients, Int, Sd.Int) %>% pmax(0),","object_usage_linter"
"data-raw/osa-adherence-data.R",162,38,"warning","no visible binding for global variable ‘Sd.Int’","    Intercept = rnorm(Patients, Int, Sd.Int) %>% pmax(0),","object_usage_linter"
"data-raw/osa-adherence-data.R",163,29,"warning","no visible binding for global variable ‘Slope’","    Slope = rnorm(Patients, Slope, Sd.Slope),","object_usage_linter"
"data-raw/osa-adherence-data.R",163,36,"warning","no visible binding for global variable ‘Sd.Slope’","    Slope = rnorm(Patients, Slope, Sd.Slope),","object_usage_linter"
"data-raw/osa-adherence-data.R",164,28,"warning","no visible binding for global variable ‘Quad’","    Quad = rnorm(Patients, Quad, Sd.Quad),","object_usage_linter"
"data-raw/osa-adherence-data.R",164,34,"warning","no visible binding for global variable ‘Sd.Quad’","    Quad = rnorm(Patients, Quad, Sd.Quad),","object_usage_linter"
"data-raw/osa-adherence-data.R",165,32,"warning","no visible binding for global variable ‘Var’","    Variance = rnorm(Patients, Var, Sd.Var) %>% pmax(.75),","object_usage_linter"
"data-raw/osa-adherence-data.R",165,37,"warning","no visible binding for global variable ‘Sd.Var’","    Variance = rnorm(Patients, Var, Sd.Var) %>% pmax(.75),","object_usage_linter"
"data-raw/osa-adherence-data.R",166,13,"warning","no visible binding for global variable ‘R’","    R = rep(R, Patients)","object_usage_linter"
"data-raw/osa-adherence-data.R",167,11,"warning","no visible binding for global variable ‘Group’","  ), by = Group]","object_usage_linter"
"data-raw/osa-adherence-data.R",170,3,"style","Variable and function name style should be snake_case or symbols.","  genTs = function(N,","object_name_linter"
"data-raw/osa-adherence-data.R",170,9,"style","Use <-, not =, for assignment.","  genTs = function(N,","assignment_linter"
"data-raw/osa-adherence-data.R",170,20,"style","Variable and function name style should be snake_case or symbols.","  genTs = function(N,","object_name_linter"
"data-raw/osa-adherence-data.R",171,5,"style","Variable and function name style should be snake_case or symbols.","    Intercept,","object_name_linter"
"data-raw/osa-adherence-data.R",172,5,"style","Variable and function name style should be snake_case or symbols.","    Slope,","object_name_linter"
"data-raw/osa-adherence-data.R",173,5,"style","Variable and function name style should be snake_case or symbols.","    Quad,","object_name_linter"
"data-raw/osa-adherence-data.R",174,5,"style","Variable and function name style should be snake_case or symbols.","    Variance,","object_name_linter"
"data-raw/osa-adherence-data.R",175,5,"style","Variable and function name style should be snake_case or symbols.","    R,","object_name_linter"
"data-raw/osa-adherence-data.R",176,5,"style","Variable and function name style should be snake_case or symbols.","    AProb,","object_name_linter"
"data-raw/osa-adherence-data.R",177,5,"style","Variable and function name style should be snake_case or symbols.","    TDrop,","object_name_linter"
"data-raw/osa-adherence-data.R",179,7,"style","Use <-, not =, for assignment.","    y = as.numeric(Intercept + times * Slope + times ^ 2 * Quad + arima.sim(list(ar = R),","assignment_linter"
"data-raw/osa-adherence-data.R",179,81,"style","Lines should not be more than 80 characters.","    y = as.numeric(Intercept + times * Slope + times ^ 2 * Quad + arima.sim(list(ar = R),","line_length_linter"
"data-raw/osa-adherence-data.R",183,5,"style","Variable and function name style should be snake_case or symbols.","    skipMask = !rbinom(length(times), size = 1, prob = AProb)","object_name_linter"
"data-raw/osa-adherence-data.R",183,14,"style","Use <-, not =, for assignment.","    skipMask = !rbinom(length(times), size = 1, prob = AProb)","assignment_linter"
"data-raw/osa-adherence-data.R",184,17,"style","Use <-, not =, for assignment.","    y[skipMask] = 0","assignment_linter"
"data-raw/osa-adherence-data.R",187,7,"style","Variable and function name style should be snake_case or symbols.","      obsMask = times <= TDrop","object_name_linter"
"data-raw/osa-adherence-data.R",187,15,"style","Use <-, not =, for assignment.","      obsMask = times <= TDrop","assignment_linter"
"data-raw/osa-adherence-data.R",190,24,"style","Use <-, not =, for assignment.","      y[times > TDrop] = 0","assignment_linter"
"data-raw/osa-adherence-data.R",195,3,"style","Variable and function name style should be snake_case or symbols.","  patNames = paste0('P', 1:patients)","object_name_linter"
"data-raw/osa-adherence-data.R",195,12,"style","Use <-, not =, for assignment.","  patNames = paste0('P', 1:patients)","assignment_linter"
"data-raw/osa-adherence-data.R",195,21,"style","Only use double-quotes.","  patNames = paste0('P', 1:patients)","single_quotes_linter"
"data-raw/osa-adherence-data.R",196,11,"style","Use <-, not =, for assignment.","  alldata = patCoefs[, do.call(genTs, .SD), by = .(Group, Id = factor(patNames, levels = patNames))] %>%","assignment_linter"
"data-raw/osa-adherence-data.R",196,52,"warning","no visible binding for global variable ‘Group’","  alldata = patCoefs[, do.call(genTs, .SD), by = .(Group, Id = factor(patNames, levels = patNames))] %>%","object_usage_linter"
"data-raw/osa-adherence-data.R",196,81,"style","Lines should not be more than 80 characters.","  alldata = patCoefs[, do.call(genTs, .SD), by = .(Group, Id = factor(patNames, levels = patNames))] %>%","line_length_linter"
"data-raw/osa-adherence-data.R",200,3,"style","Variable and function name style should be snake_case or symbols.","  groupTrajs = groupCoefs[, .(","object_name_linter"
"data-raw/osa-adherence-data.R",200,14,"style","Use <-, not =, for assignment.","  groupTrajs = groupCoefs[, .(","assignment_linter"
"data-raw/osa-adherence-data.R",202,19,"warning","no visible binding for global variable ‘Int’","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","object_usage_linter"
"data-raw/osa-adherence-data.R",202,33,"warning","no visible binding for global variable ‘Slope’","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","object_usage_linter"
"data-raw/osa-adherence-data.R",202,53,"warning","no visible binding for global variable ‘Quad’","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","object_usage_linter"
"data-raw/osa-adherence-data.R",202,64,"warning","no visible binding for global variable ‘AProb’","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","object_usage_linter"
"data-raw/osa-adherence-data.R",202,81,"style","Lines should not be more than 80 characters.","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","line_length_linter"
"data-raw/osa-adherence-data.R",202,90,"warning","no visible binding for global variable ‘TDrop’","    Usage = (pmax(Int + times * Slope + times ^ 2 * Quad, 0) * AProb) %>% ifelse(times > TDrop, 0, .)","object_usage_linter"
"data-raw/osa-adherence-data.R",203,13,"warning","no visible binding for global variable ‘Group’","    ), by = Group]","object_usage_linter"
"data-raw/osa-adherence-data.R",205,20,"style","Only use double-quotes.","  setattr(alldata, 'patCoefs', patCoefs)","single_quotes_linter"
"data-raw/osa-adherence-data.R",206,20,"style","Only use double-quotes.","  setattr(alldata, 'groupCoefs', groupCoefs)","single_quotes_linter"
"data-raw/osa-adherence-data.R",207,20,"style","Only use double-quotes.","  setattr(alldata, 'groupTrajs', groupTrajs)","single_quotes_linter"
"data-raw/osa-adherence-data.R",211,13,"style","Use <-, not =, for assignment.","    alldata = transformToAverage(alldata, binSize = nAggr)","assignment_linter"
"data-raw/osa-adherence-data.R",211,15,"warning","no visible global function definition for ‘transformToAverage’","    alldata = transformToAverage(alldata, binSize = nAggr)","object_usage_linter"
"data-raw/osa-adherence-data.R",217,1,"style","Variable and function name style should be snake_case or symbols.","transformToAverage = function(data, binSize = 14) {","object_name_linter"
"data-raw/osa-adherence-data.R",217,20,"style","Use <-, not =, for assignment.","transformToAverage = function(data, binSize = 14) {","assignment_linter"
"data-raw/osa-adherence-data.R",217,37,"style","Variable and function name style should be snake_case or symbols.","transformToAverage = function(data, binSize = 14) {","object_name_linter"
"data-raw/osa-adherence-data.R",218,8,"style","Use <-, not =, for assignment.","  bins = seq(min(data$Time), max(data$Time), by = binSize)","assignment_linter"
"data-raw/osa-adherence-data.R",219,11,"style","Use <-, not =, for assignment.","  bindata = data[, .(Usage = mean(Usage), Time = max(Time)),","assignment_linter"
"data-raw/osa-adherence-data.R",219,35,"warning","no visible binding for global variable ‘Usage’","  bindata = data[, .(Usage = mean(Usage), Time = max(Time)),","object_usage_linter"
"data-raw/osa-adherence-data.R",221,7,"warning","no visible binding for global variable ‘Group’","      Group,","object_usage_linter"
"data-raw/osa-adherence-data.R",226,3,"style","Variable and function name style should be snake_case or symbols.","  groupTrajs = attr(data, 'groupTrajs')","object_name_linter"
"data-raw/osa-adherence-data.R",226,14,"style","Use <-, not =, for assignment.","  groupTrajs = attr(data, 'groupTrajs')","assignment_linter"
"data-raw/osa-adherence-data.R",226,27,"style","Only use double-quotes.","  groupTrajs = attr(data, 'groupTrajs')","single_quotes_linter"
"data-raw/osa-adherence-data.R",227,3,"style","Variable and function name style should be snake_case or symbols.","  bingroupTrajs = groupTrajs[, .(Usage = mean(Usage)),","object_name_linter"
"data-raw/osa-adherence-data.R",227,17,"style","Use <-, not =, for assignment.","  bingroupTrajs = groupTrajs[, .(Usage = mean(Usage)),","assignment_linter"
"data-raw/osa-adherence-data.R",227,47,"warning","no visible binding for global variable ‘Usage’","  bingroupTrajs = groupTrajs[, .(Usage = mean(Usage)),","object_usage_linter"
"data-raw/osa-adherence-data.R",229,7,"warning","no visible binding for global variable ‘Group’","      Group,","object_usage_linter"
"data-raw/osa-adherence-data.R",232,22,"warning","no visible binding for global variable ‘Bin’","    .[, Time := bins[Bin]]","object_usage_linter"
"data-raw/osa-adherence-data.R",234,20,"style","Only use double-quotes.","  setattr(bindata, 'groupTrajs', bingroupTrajs)","single_quotes_linter"
"data-raw/osa-adherence-data.R",239,9,"style","Use <-, not =, for assignment.","dataset = generate_osa_data(patients = 500, seed = 1)","assignment_linter"
"data-raw/osa-adherence-data.R",240,21,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,27,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,35,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,42,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,54,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,65,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,75,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",240,81,"style","Lines should not be more than 80 characters.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","line_length_linter"
"data-raw/osa-adherence-data.R",240,85,"style","Only use double-quotes.","setnames(dataset, c('Id', 'Time', 'Bin', 'Usage'), c('Patient', 'MaxDay', 'Biweek', 'UsageHours'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",241,24,"style","Only use double-quotes.","setcolorder(dataset, c('Patient', 'Biweek', 'MaxDay', 'UsageHours', 'Group'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",241,35,"style","Only use double-quotes.","setcolorder(dataset, c('Patient', 'Biweek', 'MaxDay', 'UsageHours', 'Group'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",241,45,"style","Only use double-quotes.","setcolorder(dataset, c('Patient', 'Biweek', 'MaxDay', 'UsageHours', 'Group'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",241,55,"style","Only use double-quotes.","setcolorder(dataset, c('Patient', 'Biweek', 'MaxDay', 'UsageHours', 'Group'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",241,69,"style","Only use double-quotes.","setcolorder(dataset, c('Patient', 'Biweek', 'MaxDay', 'UsageHours', 'Group'))","single_quotes_linter"
"data-raw/osa-adherence-data.R",244,32,"style","Only use double-quotes.","plotTrajectories(dataset, id = 'Patient', time = 'Biweek', response = 'UsageHours', cluster = 'Group', facet = TRUE)","single_quotes_linter"
"data-raw/osa-adherence-data.R",244,50,"style","Only use double-quotes.","plotTrajectories(dataset, id = 'Patient', time = 'Biweek', response = 'UsageHours', cluster = 'Group', facet = TRUE)","single_quotes_linter"
"data-raw/osa-adherence-data.R",244,71,"style","Only use double-quotes.","plotTrajectories(dataset, id = 'Patient', time = 'Biweek', response = 'UsageHours', cluster = 'Group', facet = TRUE)","single_quotes_linter"
"data-raw/osa-adherence-data.R",244,81,"style","Lines should not be more than 80 characters.","plotTrajectories(dataset, id = 'Patient', time = 'Biweek', response = 'UsageHours', cluster = 'Group', facet = TRUE)","line_length_linter"
"data-raw/osa-adherence-data.R",244,95,"style","Only use double-quotes.","plotTrajectories(dataset, id = 'Patient', time = 'Biweek', response = 'UsageHours', cluster = 'Group', facet = TRUE)","single_quotes_linter"
"data-raw/osa-adherence-data.R",248,1,"style","Variable and function name style should be snake_case or symbols.","OSA.adherence = as.data.frame(dataset)","object_name_linter"
"data-raw/osa-adherence-data.R",248,15,"style","Use <-, not =, for assignment.","OSA.adherence = as.data.frame(dataset)","assignment_linter"
"R/assert.R",109,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/assert.R",341,7,"warning","no visible binding for global variable ‘Dupe’","    .[Dupe == TRUE]","object_usage_linter"
"R/assert.R",371,7,"warning","no visible binding for global variable ‘Moments’","    .[Moments < min]","object_usage_linter"
"R/assert.R",402,7,"warning","no visible binding for global variable ‘HasMult’","    .[HasMult == TRUE]","object_usage_linter"
"R/assert.R",407,7,"warning","no visible global function definition for ‘nroW’","      nroW(dtMult),","object_usage_linter"
"R/assert.R",413,9,"warning","no visible binding for global variable ‘IsEqualLen’","      .[IsEqualLen == FALSE]","object_usage_linter"
"R/assert.R",438,7,"warning","no visible binding for global variable ‘NaCount’","    .[NaCount > 0]","object_usage_linter"
"R/formula.R",31,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/generics.R",467,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/matrix.R",85,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.factor(times)) {","brace_linter"
"R/matrix.R",90,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.character(times)) {","brace_linter"
"R/method.R",364,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.list(args)) {","brace_linter"
"R/method.R",671,12,"warning","no visible binding for global variable ‘label’","    object$label","object_usage_linter"
"R/method.R",1088,12,"warning","no visible binding for global variable ‘response’","    object$response","object_usage_linter"
"R/method.R",1154,3,"style","`else` should come on the same line as the previous `}`.","  else if (inherits(object, what = classes)) {","brace_linter"
"R/methods.R",123,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model-transform.R",367,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/model-transform.R",388,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model-transform.R",405,7,"style","`else` should come on the same line as the previous `}`.","      else {","brace_linter"
"R/model.R",438,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model.R",938,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model.R",963,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model.R",991,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.numeric(predList[[1]])) {","brace_linter"
"R/model.R",1004,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model.R",1106,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/model.R",1381,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/modelKML.R",48,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/modelLMKM.R",59,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/models.R",53,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.lcModels(x)) {","brace_linter"
"R/models.R",56,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.lcModel(x)) {","brace_linter"
"R/models.R",59,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.list(x)) {","brace_linter"
"R/models.R",63,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/models.R",156,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/models.R",247,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/modelWeightedPartition.R",42,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.function(clusterNames)) {","brace_linter"
"R/random.R",12,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/test.R",410,3,"style","`else` should come on the same line as the previous `}`.","  else if (!isFALSE(error)) {","brace_linter"
"tests/testthat/setup-init.R",160,17,"warning","no visible global function definition for ‘is.ggplot’","    expect_true(is.ggplot(plot(object)))","object_usage_linter"
"tests/testthat/test-formula.R",9,28,"style","Put spaces around all infix operators.","  expect_true(hasResponse(A~0))","infix_spaces_linter"
"tests/testthat/test-formula.R",10,36,"style","Put spaces around all infix operators.","  expect_true(hasResponse(I(log(A))~B))","infix_spaces_linter"
"tests/testthat/test-formula.R",17,29,"style","Put spaces around all infix operators.","  expect_true(hasIntercept(A~1))","infix_spaces_linter"
"tests/testthat/test-formula.R",18,30,"style","Put spaces around all infix operators.","  expect_false(hasIntercept(A~-1))","infix_spaces_linter"
"tests/testthat/test-formula.R",25,34,"style","Put spaces around all infix operators.","  expect_true(hasSingleResponse(A~0))","infix_spaces_linter"
"tests/testthat/test-formula.R",26,34,"style","Put spaces around all infix operators.","  expect_true(hasSingleResponse(A~B))","infix_spaces_linter"
"tests/testthat/test-formula.R",43,27,"style","Put spaces around all infix operators.","  expect_null(getREterms(A~B))","infix_spaces_linter"
"tests/testthat/test-formula.R",44,29,"style","Put spaces around all infix operators.","  expect_length(getREterms(A~B + (1 | C)), 1)","infix_spaces_linter"
"tests/testthat/test-formula.R",45,29,"style","Put spaces around all infix operators.","  expect_length(getREterms(A~B + (1 | C) + (1 | D)), 2)","infix_spaces_linter"
"tests/testthat/test-formula.R",62,28,"style","Put spaces around all infix operators.","  expect_equal(getREterms(A~B + (1 | C))[[1]] %>% REtermAsFormula, ~1)","infix_spaces_linter"
"tests/testthat/test-formula.R",63,28,"style","Put spaces around all infix operators.","  expect_equal(getREterms(A~B + (D | C))[[1]] %>% REtermAsFormula, ~D)","infix_spaces_linter"
"tests/testthat/test-formula.R",64,28,"style","Put spaces around all infix operators.","  expect_equal(getREterms(A~B + (-1 + D | C))[[1]] %>% REtermAsFormula, ~-1 + D)","infix_spaces_linter"
"tests/testthat/test-formula.R",74,30,"style","Put spaces around all infix operators.","  expect_true(hasCovariates(A~B))","infix_spaces_linter"
"tests/testthat/test-formula.R",76,30,"style","Put spaces around all infix operators.","  expect_true(hasCovariates(A~poly(A, 2)))","infix_spaces_linter"
"tests/testthat/test-formula.R",77,31,"style","Put spaces around all infix operators.","  expect_false(hasCovariates(A~0))","infix_spaces_linter"
"tests/testthat/test-formula.R",78,31,"style","Put spaces around all infix operators.","  expect_false(hasCovariates(A~1))","infix_spaces_linter"
"tests/testthat/test-formula.R",84,32,"style","Put spaces around all infix operators.","  expect_length(getCovariates(A~0), 0)","infix_spaces_linter"
"tests/testthat/test-formula.R",85,32,"style","Put spaces around all infix operators.","  expect_length(getCovariates(A~1), 0)","infix_spaces_linter"
"tests/testthat/test-formula.R",101,31,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A, ~B), Z~A + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",101,41,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A, ~B), Z~A + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",102,31,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A + B, ~B), Z~A + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",102,45,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A + B, ~B), Z~A + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",103,31,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A + C, ~B), Z~A + C + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",103,45,"style","Put spaces around all infix operators.","  expect_equal(merge.formula(Z~A + C, ~B), Z~A + C + B)","infix_spaces_linter"
"tests/testthat/test-formula.R",104,35,"style","Put spaces around all infix operators.","  expect_error(merge.formula(~A, Z~B))","infix_spaces_linter"
"tests/testthat/test-formula.R",111,42,"style","Put spaces around all infix operators.","  expect_false(hasResponse(dropResponse(A~0)))","infix_spaces_linter"
"tests/testthat/test-formula.R",112,43,"style","Put spaces around all infix operators.","  expect_false(hasIntercept(dropResponse(A~0)))","infix_spaces_linter"
"tests/testthat/test-formula.R",113,30,"style","Put spaces around all infix operators.","  expect_equal(dropResponse(A~1), ~1)","infix_spaces_linter"
"tests/testthat/test-formula.R",114,30,"style","Put spaces around all infix operators.","  expect_equal(dropResponse(A~B), ~B)","infix_spaces_linter"
"tests/testthat/test-formula.R",115,35,"style","Put spaces around all infix operators.","  expect_equal(dropResponse(A + B ~C), ~C)","infix_spaces_linter"
"tests/testthat/test-formula.R",120,44,"style","Put spaces around all infix operators.","  expect_false(hasIntercept(dropIntercept(A~0)))","infix_spaces_linter"
"tests/testthat/test-formula.R",121,44,"style","Put spaces around all infix operators.","  expect_false(hasIntercept(dropIntercept(A~B)))","infix_spaces_linter"
"tests/testthat/test-method.R",15,11,"style","Put spaces around all infix operators.","  form = A~B,","infix_spaces_linter"
"vignettes/demo.Rmd",28,23,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/demo.Rmd",28,34,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/demo.Rmd",28,41,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/demo.Rmd",28,49,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/demo.Rmd",28,81,"style","Lines should not be more than 80 characters.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","line_length_linter"
"vignettes/demo.Rmd",64,1,"style","Variable and function name style should be snake_case or symbols.","kmlMethod <- lcMethodKML(response = ""Y"", nClusters = 2, nbRedrawing = 1)","object_name_linter"
"vignettes/demo.Rmd",74,1,"style","Variable and function name style should be snake_case or symbols.","kmlModel <- latrend(kmlMethod, data = latrendData)","object_name_linter"
"vignettes/demo.Rmd",86,1,"style","Variable and function name style should be snake_case or symbols.","kmlMethods <- lcMethods(kmlMethod, nClusters = 1:8)","object_name_linter"
"vignettes/demo.Rmd",94,1,"style","Variable and function name style should be snake_case or symbols.","kmlModels <- latrendBatch(kmlMethods, data = latrendData, verbose = FALSE)","object_name_linter"
"vignettes/demo.Rmd",107,1,"style","Variable and function name style should be snake_case or symbols.","kmlModel4 <- subset(kmlModels, nClusters == 4, drop = TRUE)","object_name_linter"
"vignettes/demo.Rmd",144,1,"style","Variable and function name style should be snake_case or symbols.","gbtmMethod <- lcMethodLcmmGBTM(fixed = Y ~ bs(Time), mixture = fixed)","object_name_linter"
"vignettes/demo.Rmd",151,1,"style","Variable and function name style should be snake_case or symbols.","gbtmMethods <- lcMethods(gbtmMethod, nClusters = 1:5)","object_name_linter"
"vignettes/demo.Rmd",153,1,"style","Variable and function name style should be snake_case or symbols.","gbtmModels <- latrendBatch(gbtmMethods, data = latrendData, verbose = FALSE)","object_name_linter"
"vignettes/demo.Rmd",162,1,"style","Variable and function name style should be snake_case or symbols.","bestGbtmModel <- subset(gbtmModels, nClusters == 3, drop=TRUE)","object_name_linter"
"vignettes/demo.Rmd",162,57,"style","Put spaces around all infix operators.","bestGbtmModel <- subset(gbtmModels, nClusters == 3, drop=TRUE)","infix_spaces_linter"
"vignettes/demo.Rmd",170,1,"style","Variable and function name style should be snake_case or symbols.","gmmMethod <- lcMethodLcmmGMM(fixed = Y ~ poly(Time, 2, raw = TRUE), mixture = fixed, idiag = TRUE)","object_name_linter"
"vignettes/demo.Rmd",170,81,"style","Lines should not be more than 80 characters.","gmmMethod <- lcMethodLcmmGMM(fixed = Y ~ poly(Time, 2, raw = TRUE), mixture = fixed, idiag = TRUE)","line_length_linter"
"vignettes/demo.Rmd",176,1,"style","Variable and function name style should be snake_case or symbols.","gmmMethods <- lcMethods(gmmMethod, nClusters = 1:5)","object_name_linter"
"vignettes/demo.Rmd",178,1,"style","Variable and function name style should be snake_case or symbols.","gmmModels <- latrendBatch(gmmMethods, latrendData, verbose = FALSE)","object_name_linter"
"vignettes/demo.Rmd",186,1,"style","Variable and function name style should be snake_case or symbols.","bestGmmModel <- subset(gmmModels, nClusters == 3, drop=TRUE)","object_name_linter"
"vignettes/demo.Rmd",186,55,"style","Put spaces around all infix operators.","bestGmmModel <- subset(gmmModels, nClusters == 3, drop=TRUE)","infix_spaces_linter"
"vignettes/demo.Rmd",207,43,"style","Only use double-quotes.","metric(list(bestGbtmModel, bestGmmModel), 'WMAE')","single_quotes_linter"
"vignettes/demo.Rmd",211,45,"style","Only use double-quotes.","externalMetric(bestGbtmModel, bestGmmModel, 'WMMAE')","single_quotes_linter"
"vignettes/demo.Rmd",216,45,"style","Only use double-quotes.","externalMetric(bestGbtmModel, bestGmmModel, 'adjustedRand')","single_quotes_linter"
"vignettes/demo.Rmd",230,1,"style","Variable and function name style should be snake_case or symbols.","refTrajAssigns <- aggregate(Class ~ Id, data = latrendData, FUN = data.table::first)","object_name_linter"
"vignettes/demo.Rmd",230,81,"style","Lines should not be more than 80 characters.","refTrajAssigns <- aggregate(Class ~ Id, data = latrendData, FUN = data.table::first)","line_length_linter"
"vignettes/demo.Rmd",231,1,"style","Variable and function name style should be snake_case or symbols.","refModel <- lcModelPartition(data = latrendData, response = ""Y"", trajectoryAssignments = refTrajAssigns$Class)","object_name_linter"
"vignettes/demo.Rmd",231,81,"style","Lines should not be more than 80 characters.","refModel <- lcModelPartition(data = latrendData, response = ""Y"", trajectoryAssignments = refTrajAssigns$Class)","line_length_linter"
"vignettes/implement.Rmd",22,23,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/implement.Rmd",22,34,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/implement.Rmd",22,41,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/implement.Rmd",22,81,"style","Lines should not be more than 80 characters.","  eval = all(vapply(c('ggplot2', 'kml', 'lcmm'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","line_length_linter"
"vignettes/implement.Rmd",47,23,"style","Trailing whitespace is superfluous.","  latrend.id = ""Traj"", ","trailing_whitespace_linter"
"vignettes/implement.Rmd",57,21,"style","Trailing whitespace is superfluous.","  sizes = c(40, 60), ","trailing_whitespace_linter"
"vignettes/implement.Rmd",61,20,"style","Trailing whitespace is superfluous.","  cluster = ~ Time, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",66,6,"style","Trailing whitespace is superfluous.",") %>% ","trailing_whitespace_linter"
"vignettes/implement.Rmd",107,20,"style","Trailing whitespace is superfluous.","  factor(int > 1.7, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",108,34,"style","Trailing whitespace is superfluous.","         levels = c(FALSE, TRUE), ","trailing_whitespace_linter"
"vignettes/implement.Rmd",122,18,"style","Trailing whitespace is superfluous.","  response = ""Y"", ","trailing_whitespace_linter"
"vignettes/implement.Rmd",123,33,"style","Trailing whitespace is superfluous.","  stratify = Intercept[1] > 1.7, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",135,1,"style","Variable and function name style should be snake_case or symbols.","repStep <- function(method, data, verbose) {","object_name_linter"
"vignettes/implement.Rmd",137,72,"warning","no visible binding for global variable ‘Traj’","  coefdata <- dt[, lm(Y ~ Time, .SD) %>% coef() %>% as.list(), keyby = Traj]","object_usage_linter"
"vignettes/implement.Rmd",148,1,"style","Variable and function name style should be snake_case or symbols.","clusStep <- function(method, data, repMat, envir, verbose) {","object_name_linter"
"vignettes/implement.Rmd",148,36,"style","Variable and function name style should be snake_case or symbols.","clusStep <- function(method, data, repMat, envir, verbose) {","object_name_linter"
"vignettes/implement.Rmd",152,32,"style","Trailing whitespace is superfluous.","    response = method$response, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",154,17,"style","Trailing whitespace is superfluous.","    data = data, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",164,1,"style","Variable and function name style should be snake_case or symbols.","m.twostep <- lcMethodFeature(","object_name_linter"
"vignettes/implement.Rmd",165,18,"style","Trailing whitespace is superfluous.","  response = ""Y"", ","trailing_whitespace_linter"
"vignettes/implement.Rmd",166,32,"style","Trailing whitespace is superfluous.","  representationStep = repStep, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",172,1,"style","Variable and function name style should be snake_case or symbols.","model.twostep <- latrend(m.twostep, data = casedata)","object_name_linter"
"vignettes/implement.Rmd",183,1,"style","Variable and function name style should be snake_case or symbols.","repStep.gen <- function(method, data, verbose) {","object_name_linter"
"vignettes/implement.Rmd",185,81,"style","Lines should not be more than 80 characters.","  coefdata <- dt[, lm(method$formula, .SD) %>% coef() %>% as.list(), keyby = c(method$id)]","line_length_linter"
"vignettes/implement.Rmd",192,1,"style","Variable and function name style should be snake_case or symbols.","clusStep.gen <- function(method, data, repMat, envir, verbose) {","object_name_linter"
"vignettes/implement.Rmd",192,40,"style","Variable and function name style should be snake_case or symbols.","clusStep.gen <- function(method, data, repMat, envir, verbose) {","object_name_linter"
"vignettes/implement.Rmd",198,17,"style","Trailing whitespace is superfluous.","    data = data, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",208,1,"style","Variable and function name style should be snake_case or symbols.","m.twostepgen <- lcMethodFeature(","object_name_linter"
"vignettes/implement.Rmd",210,36,"style","Trailing whitespace is superfluous.","  representationStep = repStep.gen, ","trailing_whitespace_linter"
"vignettes/implement.Rmd",217,1,"style","Variable and function name style should be snake_case or symbols.","model.twostepgen <- latrend(m.twostepgen, formula = Y ~ Time, nClusters = 2, casedata)","object_name_linter"
"vignettes/implement.Rmd",217,81,"style","Lines should not be more than 80 characters.","model.twostepgen <- latrend(m.twostepgen, formula = Y ~ Time, nClusters = 2, casedata)","line_length_linter"
"vignettes/implement.Rmd",235,1,"style","Variable and function name style should be snake_case or symbols.","lcMethodSimpleGBTM <- function(...) {","object_name_linter"
"vignettes/implement.Rmd",236,6,"style","Use <-, not =, for assignment.","  mc = match.call()","assignment_linter"
"vignettes/implement.Rmd",237,12,"style","Use <-, not =, for assignment.","  mc$Class = 'lcMethodSimpleGBTM'","assignment_linter"
"vignettes/implement.Rmd",237,14,"style","Only use double-quotes.","  mc$Class = 'lcMethodSimpleGBTM'","single_quotes_linter"
"vignettes/implement.Rmd",254,43,"style","Trailing whitespace is superfluous.","setMethod(""getName"", ""lcMethodSimpleGBTM"", ","trailing_whitespace_linter"
"vignettes/implement.Rmd",264,81,"style","Lines should not be more than 80 characters.","setMethod(""prepareData"", ""lcMethodSimpleGBTM"", function(method, data, verbose, ...) {","line_length_linter"
"vignettes/implement.Rmd",274,81,"style","Lines should not be more than 80 characters.","setMethod(""fit"", ""lcMethodSimpleGBTM"", function(method, data, envir, verbose, ...) {","line_length_linter"
"vignettes/implement.Rmd",286,1,"style","Trailing whitespace is superfluous.","  ","trailing_whitespace_linter"
"vignettes/implement.Rmd",288,1,"style","Trailing whitespace is superfluous.","  ","trailing_whitespace_linter"
"vignettes/implement.Rmd",290,25,"style","Trailing whitespace is superfluous.","    ""lcModelSimpleGBTM"", ","trailing_whitespace_linter"
"vignettes/implement.Rmd",315,81,"style","Lines should not be more than 80 characters.","fitted.lcModelSimpleGBTM <- function(object, clusters = trajectoryAssignments(object)) {","line_length_linter"
"vignettes/implement.Rmd",316,3,"style","Variable and function name style should be snake_case or symbols.","  predNames <- paste0(""pred_m"", 1:nClusters(object))","object_name_linter"
"vignettes/implement.Rmd",317,3,"style","Variable and function name style should be snake_case or symbols.","  predMat <- as.matrix(object@model$pred[predNames])","object_name_linter"
"vignettes/implement.Rmd",318,12,"style","Variable and function name style should be snake_case or symbols.","  colnames(predMat) <- clusterNames(object)","object_name_linter"
"vignettes/implement.Rmd",326,38,"style","Only use double-quotes.","    object, newdata, cluster, what = 'mu', ...)","single_quotes_linter"
"vignettes/implement.Rmd",327,1,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","{","brace_linter"
"vignettes/implement.Rmd",328,3,"style","Variable and function name style should be snake_case or symbols.","  predMat = lcmm::predictY(object@model, newdata = newdata)$pred %>%","object_name_linter"
"vignettes/implement.Rmd",328,11,"style","Use <-, not =, for assignment.","  predMat = lcmm::predictY(object@model, newdata = newdata)$pred %>%","assignment_linter"
"vignettes/implement.Rmd",331,3,"style","Variable and function name style should be snake_case or symbols.","  clusIdx = match(cluster, clusterNames(object))","object_name_linter"
"vignettes/implement.Rmd",331,11,"style","Use <-, not =, for assignment.","  clusIdx = match(cluster, clusterNames(object))","assignment_linter"
"vignettes/simulation.Rmd",23,23,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'simTool', 'dplyr', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/simulation.Rmd",23,34,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'simTool', 'dplyr', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/simulation.Rmd",23,45,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'simTool', 'dplyr', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/simulation.Rmd",23,54,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'simTool', 'dplyr', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/simulation.Rmd",23,81,"style","Lines should not be more than 80 characters.","  eval = all(vapply(c('ggplot2', 'simTool', 'dplyr', 'mclustcomp'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","line_length_linter"
"vignettes/simulation.Rmd",66,1,"style","Variable and function name style should be snake_case or symbols.","dataGen <- function(numTraj, ..., data.seed) {","object_name_linter"
"vignettes/simulation.Rmd",66,21,"style","Variable and function name style should be snake_case or symbols.","dataGen <- function(numTraj, ..., data.seed) {","object_name_linter"
"vignettes/simulation.Rmd",66,35,"style","Variable and function name style should be snake_case or symbols.","dataGen <- function(numTraj, ..., data.seed) {","object_name_linter"
"vignettes/simulation.Rmd",91,1,"style","Variable and function name style should be snake_case or symbols.","exampleData <- dataGen(numTraj = 200, randomScale = .1, data.seed = 1)","object_name_linter"
"vignettes/simulation.Rmd",101,1,"style","Variable and function name style should be snake_case or symbols.","dataGrid <- simTool::expand_tibble(","object_name_linter"
"vignettes/simulation.Rmd",118,1,"style","Variable and function name style should be snake_case or symbols.","kmlMethodGrid <- simTool::expand_tibble(","object_name_linter"
"vignettes/simulation.Rmd",134,1,"style","Variable and function name style should be snake_case or symbols.","fitGCKM <- function(type, ...) {","object_name_linter"
"vignettes/simulation.Rmd",139,1,"style","Trailing whitespace is superfluous.","  ","trailing_whitespace_linter"
"vignettes/simulation.Rmd",146,1,"style","Variable and function name style should be snake_case or symbols.","gckmMethodGrid <- simTool::expand_tibble(","object_name_linter"
"vignettes/simulation.Rmd",157,1,"style","Variable and function name style should be snake_case or symbols.","methodGrid <- dplyr::bind_rows(kmlMethodGrid, gckmMethodGrid)","object_name_linter"
"vignettes/simulation.Rmd",166,1,"style","Variable and function name style should be snake_case or symbols.","analyzeModel <- function(model) {","object_name_linter"
"vignettes/simulation.Rmd",168,3,"style","Variable and function name style should be snake_case or symbols.","  refModel <- lcModelPartition(data, response = ""Y"", trajectoryAssignments = ""Class"")","object_name_linter"
"vignettes/simulation.Rmd",168,81,"style","Lines should not be more than 80 characters.","  refModel <- lcModelPartition(data, response = ""Y"", trajectoryAssignments = ""Class"")","line_length_linter"
"vignettes/simulation.Rmd",169,1,"style","Trailing whitespace is superfluous.","  ","trailing_whitespace_linter"
"vignettes/simulation.Rmd",182,24,"style","Trailing whitespace is superfluous.","  data_grid = dataGrid, ","trailing_whitespace_linter"
"vignettes/simulation.Rmd",196,1,"style","Variable and function name style should be snake_case or symbols.","resultsTable <- as.data.table(result$simulation)","object_name_linter"
"vignettes/simulation.Rmd",204,81,"style","Lines should not be more than 80 characters.","resultsTable[, .(K = nClusters[which.min(BIC)]), keyby = .(numTraj, randomScales, data.seed, method)]","line_length_linter"
"vignettes/simulation.Rmd",213,81,"style","Lines should not be more than 80 characters.","resultsTable[nClusters > 1, .(ARI = mean(ARI)), keyby = .(nClusters, numTraj, randomScales, method)]","line_length_linter"
"vignettes/simulation.Rmd",217,81,"style","Lines should not be more than 80 characters.","resultsTable[nClusters > 1, .(ARI = mean(ARI)), keyby = .(randomScales, nClusters, method)]","line_length_linter"
"vignettes/simulation.Rmd",225,81,"style","Lines should not be more than 80 characters.","resultsTable[randomScales == .1, .(WMAE = mean(WMAE)), keyby = .(nClusters, method)]","line_length_linter"
"vignettes/validation.Rmd",29,23,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'mclustcomp', 'caret'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/validation.Rmd",29,34,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'mclustcomp', 'caret'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/validation.Rmd",29,41,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'mclustcomp', 'caret'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/validation.Rmd",29,55,"style","Only use double-quotes.","  eval = all(vapply(c('ggplot2', 'kml', 'mclustcomp', 'caret'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","single_quotes_linter"
"vignettes/validation.Rmd",29,81,"style","Lines should not be more than 80 characters.","  eval = all(vapply(c('ggplot2', 'kml', 'mclustcomp', 'caret'), requireNamespace, FUN.VALUE = TRUE, quietly = TRUE)) # needed to prevent errors for _R_CHECK_DEPENDS_ONLY_=true despite VignetteDepends declaration","line_length_linter"
"vignettes/validation.Rmd",64,1,"style","Variable and function name style should be snake_case or symbols.","repModels <- latrendRep(kml, data = latrendData, .rep=10)","object_name_linter"
"vignettes/validation.Rmd",64,54,"style","Put spaces around all infix operators.","repModels <- latrendRep(kml, data = latrendData, .rep=10)","infix_spaces_linter"
"vignettes/validation.Rmd",69,1,"style","Variable and function name style should be snake_case or symbols.","repSelfMetrics <- metric(repModels, name = c(""BIC"", ""WMAE"", ""APPA""))","object_name_linter"
"vignettes/validation.Rmd",81,1,"style","Variable and function name style should be snake_case or symbols.","bestRepModel <- min(repModels, ""BIC"")","object_name_linter"
"vignettes/validation.Rmd",88,1,"style","Variable and function name style should be snake_case or symbols.","simMat <- externalMetric(repModels, name = ""adjustedRand"")","object_name_linter"
"vignettes/validation.Rmd",98,1,"style","Variable and function name style should be snake_case or symbols.","bootModels <- latrendBoot(kml, data = latrendData, samples = 10)","object_name_linter"
"vignettes/validation.Rmd",103,1,"style","Variable and function name style should be snake_case or symbols.","bootMetrics <- metric(bootModels, name = c(""BIC"", ""WMAE"", ""APPA""))","object_name_linter"
"vignettes/validation.Rmd",119,1,"style","Variable and function name style should be snake_case or symbols.","trainModels <- latrendCV(kml, data = latrendData, folds = 10, seed = 1)","object_name_linter"
"vignettes/validation.Rmd",127,1,"style","Variable and function name style should be snake_case or symbols.","dataFolds <- createTrainDataFolds(latrendData, folds = 10)","object_name_linter"
"vignettes/validation.Rmd",128,1,"style","Variable and function name style should be snake_case or symbols.","foldModels <- latrendBatch(kml, data = dataFolds)","object_name_linter"
"vignettes/validation.Rmd",133,1,"style","Variable and function name style should be snake_case or symbols.","testDataFolds <- createTestDataFolds(latrendData, dataFolds)","object_name_linter"
