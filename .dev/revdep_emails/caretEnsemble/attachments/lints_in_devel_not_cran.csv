"filename","line_number","column_number","type","message","line","linter"
"R/caretEnsemble.R",93,9,"style","Variable and function name style should be snake_case or symbols.","  names(modRes)[2:3] <- c(metric, paste0(metric, ""SD""))","object_name_linter"
"R/caretEnsemble.R",307,8,"style","There should be a space before an opening curly brace.","  }else{","brace_linter"
"R/caretEnsemble.R",325,5,"style","Variable and function name style should be snake_case or symbols.","    datList[[i]] <- model$models[[i]]$trainingData","object_name_linter"
"R/caretEnsemble.R",408,3,"style","Variable and function name style should be snake_case or symbols.","  wghtFrame$method <- row.names(wghtFrame)","object_name_linter"
"R/caretEnsemble.R",409,9,"style","Variable and function name style should be snake_case or symbols.","  names(wghtFrame) <- c(""weights"", ""method"")","object_name_linter"
"R/caretList.R",233,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/caretList.R",238,9,"style","Variable and function name style should be snake_case or symbols.","  names(modelList) <- names(tuneList)","object_name_linter"
"R/caretList.R",245,9,"style","Variable and function name style should be snake_case or symbols.","  class(modelList) <- c(""caretList"")","object_name_linter"
"R/caretList.R",344,13,"style","There should be a space before an opening curly brace.","      } else{","brace_linter"
"R/caretList.R",349,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/caretStack.R",67,18,"style","Put spaces around all infix operators.","  object, newdata=NULL,","infix_spaces_linter"
"R/caretStack.R",68,5,"style","Put spaces around all infix operators.","  se=FALSE, level=0.95,","infix_spaces_linter"
"R/caretStack.R",68,18,"style","Put spaces around all infix operators.","  se=FALSE, level=0.95,","infix_spaces_linter"
"R/caretStack.R",69,17,"style","Put spaces around all infix operators.","  return_weights=FALSE,","infix_spaces_linter"
"R/caretStack.R",84,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/caretStack.R",87,9,"style","There should be a space before an opening curly brace.","  } else{","brace_linter"
"R/caretStack.R",110,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"R/helper_functions.R",61,27,"style","Compound semicolons are discouraged. Replace them by a newline.","    w <- w[i <- !is.na(x)]; x <- x[i]","semicolon_linter"
"tests/testthat/test-caretList.R",49,9,"style","Variable and function name style should be snake_case or symbols.","  names(tuneList) <- all_models","object_name_linter"
"tests/testthat/test-caretList.R",50,9,"style","Variable and function name style should be snake_case or symbols.","  names(tuneList)[c(1, 5, 10)] <- """"","object_name_linter"
"tests/testthat/test-caretList.R",155,9,"style","Variable and function name style should be snake_case or symbols.","  class(modelList) <- ""list""","object_name_linter"
"tests/testthat/test-classSelection.R",109,15,"style","Any function spanning multiple lines should use curly braces.","  refactor <- function(d) factor(","brace_linter"
"tests/testthat/test-ensemble.R",141,9,"style","Variable and function name style should be snake_case or symbols.","  class(nestedList) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensemble.R",149,3,"style","Variable and function name style should be snake_case or symbols.","  X_reg_new[2, 3] <- NA","object_name_linter"
"tests/testthat/test-ensemble.R",150,3,"style","Variable and function name style should be snake_case or symbols.","  X_reg_new[25, 3] <- NA","object_name_linter"
"tests/testthat/test-ensemble.R",197,3,"style","Variable and function name style should be snake_case or symbols.","  custom.rf$method <- ""custom.rf""","object_name_linter"
"tests/testthat/test-ensemble.R",200,3,"style","Variable and function name style should be snake_case or symbols.","  custom.rpart$method <- ""custom.rpart""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",20,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",36,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",58,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",93,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",138,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",181,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",203,14,"style","Variable and function name style should be snake_case or symbols.","  attributes(mr2.tmp1) <- NULL","object_name_linter"
"tests/testthat/test-ensembleMethods.R",242,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.subset) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",257,9,"style","Variable and function name style should be snake_case or symbols.","  class(models.class2) <- ""caretList""","object_name_linter"
"tests/testthat/test-ensembleMethods.R",260,3,"style","Variable and function name style should be snake_case or symbols.","  newDat[2, 2] <- NA","object_name_linter"
"tests/testthat/test-ensembleMethods.R",261,3,"style","Variable and function name style should be snake_case or symbols.","  newDat[3, 3] <- NA","object_name_linter"
"tests/testthat/test-ensembleMethods.R",262,3,"style","Variable and function name style should be snake_case or symbols.","  newDat[4, 4] <- NA","object_name_linter"
"tests/testthat/test-ensembleMethods.R",289,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"tests/testthat/test-ensembleMethods.R",296,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"tests/testthat/test-ensembleMethods.R",318,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"tests/testthat/test-ensembleMethods.R",325,11,"style","There should be a space before an opening curly brace.","    } else{","brace_linter"
"vignettes/caretEnsemble-intro.Rmd",33,1,"style","Variable and function name style should be snake_case or symbols.","inTrain <- createDataPartition(y = Sonar$Class, p = .75, list = FALSE)","object_name_linter"
"vignettes/caretEnsemble-intro.Rmd",34,19,"style","Do not place spaces after square brackets.","training <- Sonar[ inTrain,]","spaces_inside_linter"
"vignettes/caretEnsemble-intro.Rmd",34,28,"style","Commas should always have a space after.","training <- Sonar[ inTrain,]","commas_linter"
"vignettes/caretEnsemble-intro.Rmd",35,27,"style","Commas should always have a space after.","testing <- Sonar[-inTrain,]","commas_linter"
"vignettes/caretEnsemble-intro.Rmd",37,9,"style","Put spaces around all infix operators.","  method=""boot"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",38,9,"style","Put spaces around all infix operators.","  number=25,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",39,18,"style","Put spaces around all infix operators.","  savePredictions=""final"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",40,13,"style","Put spaces around all infix operators.","  classProbs=TRUE,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",41,8,"style","Put spaces around all infix operators.","  index=createResample(training$Class, 25),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",42,18,"style","Put spaces around all infix operators.","  summaryFunction=twoClassSummary","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",52,8,"style","Put spaces around all infix operators.","  Class~., data=training,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",52,16,"style","Put spaces around all infix operators.","  Class~., data=training,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",53,12,"style","Put spaces around all infix operators.","  trControl=my_control,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",54,13,"style","Put spaces around all infix operators.","  methodList=c(""glm"", ""rpart"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",60,47,"style","Put spaces around all infix operators.","p <- as.data.frame(predict(model_list, newdata=head(testing)))","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",78,8,"style","Put spaces around all infix operators.","  Class~., data=training,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",78,16,"style","Put spaces around all infix operators.","  Class~., data=training,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",79,12,"style","Put spaces around all infix operators.","  trControl=my_control,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",80,9,"style","Put spaces around all infix operators.","  metric=""ROC"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",81,13,"style","Put spaces around all infix operators.","  methodList=c(""glm"", ""rpart""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",82,11,"style","Put spaces around all infix operators.","  tuneList=list(","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",83,8,"style","Put spaces around all infix operators.","    rf1=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=2)),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",83,30,"style","Put spaces around all infix operators.","    rf1=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=2)),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",83,45,"style","Put spaces around all infix operators.","    rf1=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=2)),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",83,62,"style","Put spaces around all infix operators.","    rf1=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=2)),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,8,"style","Put spaces around all infix operators.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,30,"style","Put spaces around all infix operators.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,45,"style","Put spaces around all infix operators.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,62,"style","Put spaces around all infix operators.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,78,"style","Put spaces around all infix operators.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",84,81,"style","Lines should not be more than 80 characters.","    rf2=caretModelSpec(method=""rf"", tuneGrid=data.frame(.mtry=10), preProcess=""pca""),","line_length_linter"
"vignettes/caretEnsemble-intro.Rmd",85,7,"style","Put spaces around all infix operators.","    nn=caretModelSpec(method=""nnet"", tuneLength=2, trace=FALSE)","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",85,29,"style","Put spaces around all infix operators.","    nn=caretModelSpec(method=""nnet"", tuneLength=2, trace=FALSE)","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",85,48,"style","Put spaces around all infix operators.","    nn=caretModelSpec(method=""nnet"", tuneLength=2, trace=FALSE)","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",85,57,"style","Put spaces around all infix operators.","    nn=caretModelSpec(method=""nnet"", tuneLength=2, trace=FALSE)","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",108,14,"style","Trailing whitespace is superfluous.","  model_list, ","trailing_whitespace_linter"
"vignettes/caretEnsemble-intro.Rmd",109,9,"style","Put spaces around all infix operators.","  metric=""ROC"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",110,12,"style","Put spaces around all infix operators.","  trControl=trainControl(","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",111,11,"style","Put spaces around all infix operators.","    number=2,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",112,20,"style","Put spaces around all infix operators.","    summaryFunction=twoClassSummary,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",113,15,"style","Put spaces around all infix operators.","    classProbs=TRUE","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",121,51,"style","Put spaces around all infix operators.","model_preds <- lapply(model_list, predict, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",121,65,"style","Put spaces around all infix operators.","model_preds <- lapply(model_list, predict, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",122,51,"style","Commas should always have a space after.","model_preds <- lapply(model_preds, function(x) x[,""M""])","commas_linter"
"vignettes/caretEnsemble-intro.Rmd",124,46,"style","Put spaces around all infix operators.","ens_preds <- predict(greedy_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",124,60,"style","Put spaces around all infix operators.","ens_preds <- predict(greedy_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",147,9,"style","Put spaces around all infix operators.","  method=""glm"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",148,9,"style","Put spaces around all infix operators.","  metric=""ROC"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",149,12,"style","Put spaces around all infix operators.","  trControl=trainControl(","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",150,11,"style","Put spaces around all infix operators.","    method=""boot"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",151,11,"style","Put spaces around all infix operators.","    number=10,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",152,20,"style","Put spaces around all infix operators.","    savePredictions=""final"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",153,15,"style","Put spaces around all infix operators.","    classProbs=TRUE,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",154,20,"style","Put spaces around all infix operators.","    summaryFunction=twoClassSummary","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",158,55,"style","Put spaces around all infix operators.","model_preds2$ensemble <- predict(glm_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",158,69,"style","Put spaces around all infix operators.","model_preds2$ensemble <- predict(glm_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",159,1,"style","Variable and function name style should be snake_case or symbols.","CF <- coef(glm_ensemble$ens_model$finalModel)[-1]","object_name_linter"
"vignettes/caretEnsemble-intro.Rmd",161,3,"style","Put spaces around all infix operators.","CF/sum(CF)","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",175,9,"style","Put spaces around all infix operators.","  method=""gbm"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",176,10,"style","Put spaces around all infix operators.","  verbose=FALSE,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",177,13,"style","Put spaces around all infix operators.","  tuneLength=10,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",178,9,"style","Put spaces around all infix operators.","  metric=""ROC"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",179,12,"style","Put spaces around all infix operators.","  trControl=trainControl(","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",180,11,"style","Put spaces around all infix operators.","    method=""boot"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",181,11,"style","Put spaces around all infix operators.","    number=10,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",182,20,"style","Put spaces around all infix operators.","    savePredictions=""final"",","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",183,15,"style","Put spaces around all infix operators.","    classProbs=TRUE,","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",184,20,"style","Put spaces around all infix operators.","    summaryFunction=twoClassSummary","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",188,55,"style","Put spaces around all infix operators.","model_preds3$ensemble <- predict(gbm_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
"vignettes/caretEnsemble-intro.Rmd",188,69,"style","Put spaces around all infix operators.","model_preds3$ensemble <- predict(gbm_ensemble, newdata=testing, type=""prob"")","infix_spaces_linter"
