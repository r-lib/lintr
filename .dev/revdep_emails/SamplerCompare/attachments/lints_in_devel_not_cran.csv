"filename","line_number","column_number","type","message","line","linter"
"inst/doc/sc-intro.Rnw",53,12,"style","Only use double-quotes.","dir.create('Figures', showWarnings=FALSE)","single_quotes_linter"
"inst/doc/sc-intro.Rnw",53,35,"style","Put spaces around all infix operators.","dir.create('Figures', showWarnings=FALSE)","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",54,23,"style","Only use double-quotes.","capture.output(source('Code/ex-compare-samplers.Rfrag'),","single_quotes_linter"
"inst/doc/sc-intro.Rnw",55,7,"style","Put spaces around all infix operators.","  file='Figures/ex-compare-samplers.txt')","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",55,8,"style","Only use double-quotes.","  file='Figures/ex-compare-samplers.txt')","single_quotes_linter"
"inst/doc/sc-intro.Rnw",56,23,"style","Only use double-quotes.","capture.output(source('Code/ex-compare-results.Rfrag'),","single_quotes_linter"
"inst/doc/sc-intro.Rnw",57,7,"style","Put spaces around all infix operators.","  file='Figures/ex-compare-results.txt')","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",57,8,"style","Only use double-quotes.","  file='Figures/ex-compare-results.txt')","single_quotes_linter"
"inst/doc/sc-intro.Rnw",59,5,"style","Only use double-quotes.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","single_quotes_linter"
"inst/doc/sc-intro.Rnw",59,45,"style","Put spaces around all infix operators.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",59,54,"style","Put spaces around all infix operators.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",60,52,"style","Put spaces around all infix operators.","print(comparison.plot(sampler.comparison, base_size=8))","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",63,8,"style","Only use double-quotes.","source('Code/ex-metropolis.Rfrag')","single_quotes_linter"
"inst/doc/sc-intro.Rnw",64,8,"style","Only use double-quotes.","source('Code/ex-beta.Rfrag')","single_quotes_linter"
"inst/doc/sc-intro.Rnw",65,8,"style","Only use double-quotes.","source('Code/ex-final.Rfrag')","single_quotes_linter"
"inst/doc/sc-intro.Rnw",66,23,"style","Only use double-quotes.","capture.output(source('Code/ex-final-compare.Rfrag'),","single_quotes_linter"
"inst/doc/sc-intro.Rnw",67,7,"style","Put spaces around all infix operators.","  file='Figures/ex-final-compare.txt')","infix_spaces_linter"
"inst/doc/sc-intro.Rnw",67,8,"style","Only use double-quotes.","  file='Figures/ex-final-compare.txt')","single_quotes_linter"
"R/00dist-util.R",200,7,"style","Variable and function name style should be snake_case or symbols.","      X[obs, ] <- step$x","object_name_linter"
"R/00dist-util.R",214,19,"style","Variable and function name style should be snake_case or symbols.","    attr(sampler, ""name.expr"") <- name.expr","object_name_linter"
"R/act.R",33,3,"style","Variable and function name style should be snake_case or symbols.","  order.max <- NULL","object_name_linter"
"R/act.R",40,5,"style","Variable and function name style should be snake_case or symbols.","    pi.var <- A$asy.var.coef","object_name_linter"
"R/act.R",45,5,"style","Variable and function name style should be snake_case or symbols.","    order.max <- floor(A$order * 0.7)","object_name_linter"
"R/act.R",65,5,"style","Variable and function name style should be snake_case or symbols.","    pi.sim <- AX[i, ]","object_name_linter"
"R/act.R",68,7,"style","Variable and function name style should be snake_case or symbols.","      act.sim[i] <- Inf","object_name_linter"
"R/act.R",70,7,"style","Variable and function name style should be snake_case or symbols.","      act.sim[i] <- (1 - sum(pi.sim * acf.sim)) / (1 - sum(pi.sim)) ^ 2","object_name_linter"
"R/act.R",75,3,"style","Variable and function name style should be snake_case or symbols.","  act.sim[is.na(act.sim)] <- Inf","object_name_linter"
"R/act.R",104,3,"style","Variable and function name style should be snake_case or symbols.","  max.i <- which.max(unlist(acts[""act"", ]))","object_name_linter"
"R/basic-slice.R",13,3,"style","Variable and function name style should be snake_case or symbols.","  X[1, ] <- x0","object_name_linter"
"R/basic-slice.R",75,5,"style","Variable and function name style should be snake_case or symbols.","    X[obs, ] <- x1","object_name_linter"
"R/basic-slice.R",85,6,"style","Variable and function name style should be snake_case or symbols.","attr(hyperrectangle.sample, ""name"") <- ""Hyperrectangle""","object_name_linter"
"R/basic-slice.R",95,6,"style","Variable and function name style should be snake_case or symbols.","attr(nograd.hyperrectangle.sample, ""name"") <- ""Hyperrectangle (no grad)""","object_name_linter"
"R/basic-slice.R",105,3,"style","Variable and function name style should be snake_case or symbols.","  X[1, ] <- x0","object_name_linter"
"R/basic-slice.R",157,5,"style","Variable and function name style should be snake_case or symbols.","    X[obs, ] <- x1","object_name_linter"
"R/basic-slice.R",167,6,"style","Variable and function name style should be snake_case or symbols.","attr(stepout.slice.sample, ""name"") <- ""Step-out Slice""","object_name_linter"
"R/basic-slice.R",176,6,"style","Variable and function name style should be snake_case or symbols.","attr(interval.slice.sample, ""name"") <- ""Interval Slice""","object_name_linter"
"R/c-samplers.R",41,19,"style","Variable and function name style should be snake_case or symbols.","    attr(sampler, ""name.expression"") <- name.expression","object_name_linter"
"R/c-samplers.R",49,1,"style","Variable and function name style should be snake_case or symbols.","raw.symbol <- function(symbol) {","object_name_linter"
"R/c-samplers.R",64,35,"style","Variable and function name style should be snake_case or symbols.","                                  min.dimension = 1) {","object_name_linter"
"R/c-samplers.R",72,6,"style","Variable and function name style should be snake_case or symbols.","attr(shrinking.rank.sample, ""name"") <- ""Shrinking Rank""","object_name_linter"
"R/c-samplers.R",85,6,"style","Variable and function name style should be snake_case or symbols.","attr(nonadaptive.crumb.sample, ""name"") <- ""Nonadaptive Crumb""","object_name_linter"
"R/comparison-plot.R",48,5,"style","Variable and function name style should be snake_case or symbols.","    RSinf$lim <- max(RSfinite$evals * RSfinite$act)","object_name_linter"
"R/comparison-plot.R",60,1,"style","Variable and function name style should be snake_case or symbols.","log.breaks <- function(data, base) {","object_name_linter"
"R/comparison-plot.R",61,3,"warning","local variable ‘breaks’ assigned but may not be used","  breaks <- base ^ seq(floor(min(log(data, base = base))),","object_usage_linter"
"R/cov-match.R",125,6,"style","Variable and function name style should be snake_case or symbols.","attr(cov.match.sample, ""name"") <- ""Cov. Matching""","object_name_linter"
"R/distributions.R",31,3,"style","Variable and function name style should be snake_case or symbols.","  log.det <- sum(log(eigen(sigma, only.values = TRUE)$values))","object_name_linter"
"R/distributions.R",36,3,"style","Variable and function name style should be snake_case or symbols.","  log.density <- function(x) {","object_name_linter"
"R/distributions.R",67,3,"warning","local variable ‘ds’ assigned but may not be used","  ds <- make.dist(ndim, name, name.expression, log.density,","object_usage_linter"
"R/distributions.R",115,3,"style","Variable and function name style should be snake_case or symbols.","  log.density <- function(x) {","object_name_linter"
"R/distributions.R",246,21,"style","Any function spanning multiple lines should use curly braces.","      log.density = function(x)","brace_linter"
"R/distributions.R",248,26,"style","Any function spanning multiple lines should use curly braces.","      grad.log.density = function(x)","brace_linter"
"R/metropolis.R",31,7,"style","Variable and function name style should be snake_case or symbols.","      X[obs / target.dist$ndim, ] <- x0","object_name_linter"
"R/metropolis.R",38,6,"style","Variable and function name style should be snake_case or symbols.","attr(multivariate.metropolis.sample, ""name"") <- ""Multivariate Metropolis""","object_name_linter"
"R/metropolis.R",47,3,"style","Variable and function name style should be snake_case or symbols.","  X[1, ] <- x0","object_name_linter"
"R/metropolis.R",68,5,"style","Variable and function name style should be snake_case or symbols.","    X[obs, ] <- x0                           # coordinates updated, save state","object_name_linter"
"R/metropolis.R",75,6,"style","Variable and function name style should be snake_case or symbols.","attr(univar.metropolis.sample, ""name"") <- ""Univariate Metropolis""","object_name_linter"
"R/metropolis.R",97,3,"style","Variable and function name style should be snake_case or symbols.","  sample.cov <- NULL","object_name_linter"
"R/metropolis.R",129,7,"style","Variable and function name style should be snake_case or symbols.","      X[obs / ndim, ] <- x0","object_name_linter"
"R/metropolis.R",136,7,"style","Variable and function name style should be snake_case or symbols.","      sample.cov <- obs.scatter / obs - tcrossprod(obs.sum / obs)","object_name_linter"
"R/metropolis.R",148,6,"style","Variable and function name style should be snake_case or symbols.","attr(adaptive.metropolis.sample, ""name"") <- ""Adaptive Metropolis""","object_name_linter"
"R/oblique-hyperrect.R",13,3,"style","Variable and function name style should be snake_case or symbols.","  X[1, ] <- x0","object_name_linter"
"R/oblique-hyperrect.R",79,7,"style","Variable and function name style should be snake_case or symbols.","      L[wt < 0] <- wt[wt < 0]","object_name_linter"
"R/oblique-hyperrect.R",80,7,"style","Variable and function name style should be snake_case or symbols.","      U[wt > 0] <- wt[wt > 0]","object_name_linter"
"R/oblique-hyperrect.R",84,5,"style","Variable and function name style should be snake_case or symbols.","    X[obs, ] <- x1","object_name_linter"
"R/oblique-hyperrect.R",90,6,"style","Variable and function name style should be snake_case or symbols.","attr(oblique.hyperrect.sample, ""name"") <- ""Oblique Hyperrect""","object_name_linter"
"R/oblique-hyperrect.R",97,6,"style","Variable and function name style should be snake_case or symbols.","attr(cheat.oblique.hyperrect.sample, ""name"") <- ""Cheat Oblique Hyperrect""","object_name_linter"
"R/univar-eigen.R",9,3,"style","Variable and function name style should be snake_case or symbols.","  X[1, ] <- x0","object_name_linter"
"R/univar-eigen.R",52,7,"style","Variable and function name style should be snake_case or symbols.","      which.eig <- floor(1 + ndim * runif(1))","object_name_linter"
"R/univar-eigen.R",108,7,"style","Variable and function name style should be snake_case or symbols.","      X[obs / nthin, ] <- x1","object_name_linter"
"R/univar-eigen.R",118,6,"style","Variable and function name style should be snake_case or symbols.","attr(univar.eigen.sample, ""name"") <- ""Univar Eigen""","object_name_linter"
"R/univar-eigen.R",128,6,"style","Variable and function name style should be snake_case or symbols.","attr(cheat.univar.eigen.sample, ""name"") <- ""Cheat Univar Eigen""","object_name_linter"
"tests/test-samplers.R",11,1,"style","Variable and function name style should be snake_case or symbols.","all.samplers <- list(","object_name_linter"
"vignettes/sc-intro.Rnw",53,12,"style","Only use double-quotes.","dir.create('Figures', showWarnings=FALSE)","single_quotes_linter"
"vignettes/sc-intro.Rnw",53,35,"style","Put spaces around all infix operators.","dir.create('Figures', showWarnings=FALSE)","infix_spaces_linter"
"vignettes/sc-intro.Rnw",54,23,"style","Only use double-quotes.","capture.output(source('Code/ex-compare-samplers.Rfrag'),","single_quotes_linter"
"vignettes/sc-intro.Rnw",55,7,"style","Put spaces around all infix operators.","  file='Figures/ex-compare-samplers.txt')","infix_spaces_linter"
"vignettes/sc-intro.Rnw",55,8,"style","Only use double-quotes.","  file='Figures/ex-compare-samplers.txt')","single_quotes_linter"
"vignettes/sc-intro.Rnw",56,23,"style","Only use double-quotes.","capture.output(source('Code/ex-compare-results.Rfrag'),","single_quotes_linter"
"vignettes/sc-intro.Rnw",57,7,"style","Put spaces around all infix operators.","  file='Figures/ex-compare-results.txt')","infix_spaces_linter"
"vignettes/sc-intro.Rnw",57,8,"style","Only use double-quotes.","  file='Figures/ex-compare-results.txt')","single_quotes_linter"
"vignettes/sc-intro.Rnw",59,5,"style","Only use double-quotes.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","single_quotes_linter"
"vignettes/sc-intro.Rnw",59,45,"style","Put spaces around all infix operators.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","infix_spaces_linter"
"vignettes/sc-intro.Rnw",59,54,"style","Put spaces around all infix operators.","pdf('Figures/ex-comparison-plot.pdf', height=4, width=4)","infix_spaces_linter"
"vignettes/sc-intro.Rnw",60,52,"style","Put spaces around all infix operators.","print(comparison.plot(sampler.comparison, base_size=8))","infix_spaces_linter"
"vignettes/sc-intro.Rnw",63,8,"style","Only use double-quotes.","source('Code/ex-metropolis.Rfrag')","single_quotes_linter"
"vignettes/sc-intro.Rnw",64,8,"style","Only use double-quotes.","source('Code/ex-beta.Rfrag')","single_quotes_linter"
"vignettes/sc-intro.Rnw",65,8,"style","Only use double-quotes.","source('Code/ex-final.Rfrag')","single_quotes_linter"
"vignettes/sc-intro.Rnw",66,23,"style","Only use double-quotes.","capture.output(source('Code/ex-final-compare.Rfrag'),","single_quotes_linter"
"vignettes/sc-intro.Rnw",67,7,"style","Put spaces around all infix operators.","  file='Figures/ex-final-compare.txt')","infix_spaces_linter"
"vignettes/sc-intro.Rnw",67,8,"style","Only use double-quotes.","  file='Figures/ex-final-compare.txt')","single_quotes_linter"
