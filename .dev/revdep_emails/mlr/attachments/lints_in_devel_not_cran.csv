"filename","line_number","column_number","type","message","line","linter"
"inst/makeData.R",96,1,"style","Variable and function name style should be snake_case or CamelCase.","fuelSubset$UVVIS = scale(fuelSubset$UVVIS, scale = FALSE)","object_name_linter"
"inst/makeData.R",97,1,"style","Variable and function name style should be snake_case or CamelCase.","fuelSubset$NIR = scale(fuelSubset$NIR, scale = FALSE)","object_name_linter"
"R/analyzeFeatSelResult.R",95,33,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.na(ctrl$max.features) & (length(x) == ctrl$max.features)) {","vector_logic_linter"
"R/batchmark.R",59,5,"style","Variable and function name style should be snake_case or CamelCase.","    apply.fun = getAlgoFun(learner, measures, models, keep.extract)","object_name_linter"
"R/benchmark.R",67,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(results.by.task[[taskname]]) = grid$learner[grid$task == taskname]","object_name_linter"
"R/BenchmarkResult_operators.R",125,7,"style","Variable and function name style should be snake_case or CamelCase.","      drop.tasks = length(task.ids) == 1L","object_name_linter"
"R/BenchmarkResult_operators.R",126,7,"style","Variable and function name style should be snake_case or CamelCase.","      drop.learners = length(learner.ids) == 1L","object_name_linter"
"R/BenchmarkResult_operators.R",127,22,"warning","Conditional expressions require scalar logical operators (&& and ||)","      if (drop.tasks | drop.learners) {","vector_logic_linter"
"R/BenchmarkResult_operators.R",129,24,"warning","Conditional expressions require scalar logical operators (&& and ||)","        if (drop.tasks & drop.learners) {","vector_logic_linter"
"R/BenchmarkResult_operators.R",132,24,"warning","Conditional expressions require scalar logical operators (&& and ||)","        if (drop.tasks & !drop.learners) {","vector_logic_linter"
"R/BenchmarkResult_operators.R",135,25,"warning","Conditional expressions require scalar logical operators (&& and ||)","        if (!drop.tasks & drop.learners) {","vector_logic_linter"
"R/calculateConfusionMatrix.R",83,3,"style","Variable and function name style should be snake_case or CamelCase.","  row.err = rowSums(mt)","object_name_linter"
"R/calculateConfusionMatrix.R",84,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.err = colSums(mt)","object_name_linter"
"R/calculateConfusionMatrix.R",158,5,"style","Variable and function name style should be snake_case or CamelCase.","    col.err = x$relative.col[k + 1, ]","object_name_linter"
"R/calculateConfusionMatrix.R",159,5,"style","Variable and function name style should be snake_case or CamelCase.","    row.err = x$relative.row[, k + 1]","object_name_linter"
"R/calculateConfusionMatrix.R",183,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/checkLearner.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    missing.props = setdiff(props, learner.props)","object_name_linter"
"R/configureMlr.R",74,3,"style","Variable and function name style should be snake_case or CamelCase.","  any.change = FALSE","object_name_linter"
"R/configureMlr.R",78,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",83,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",88,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",93,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",98,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",103,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",108,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/configureMlr.R",113,5,"style","Variable and function name style should be snake_case or CamelCase.","    any.change = TRUE","object_name_linter"
"R/evalOptimizationState.R",15,3,"style","Variable and function name style should be snake_case or CamelCase.","  log.fun = control$log.fun","object_name_linter"
"R/evalOptimizationState.R",50,7,"style","Variable and function name style should be snake_case or CamelCase.","      th.args$pred = r$pred","object_name_linter"
"R/evalOptimizationState.R",51,7,"style","Variable and function name style should be snake_case or CamelCase.","      th.args$measure = measures[[1L]]","object_name_linter"
"R/extractFDAFeatures.R",68,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.fds = which(names(feat.methods) == ""all"")","object_name_linter"
"R/extractFDAFeatures.R",71,5,"style","Variable and function name style should be snake_case or CamelCase.","    feat.methods[all.fds] = NULL","object_name_linter"
"R/extractFDAFeaturesMethods.R",389,23,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (is.null(refs) | is.integer(refs)) {","vector_logic_linter"
"R/extractFDAFeaturesMethods.R",526,26,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (is.null(dim(df)) | vals$res.level == 1L) {","vector_logic_linter"
"R/FeatSelControl.R",106,3,"style","Variable and function name style should be snake_case or CamelCase.","  max.features = asCount(max.features, na.ok = TRUE, positive = TRUE)","object_name_linter"
"R/FeatSelControl.R",108,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunFeatSel","object_name_linter"
"R/FeatSelControl.R",110,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunTuneMemory","object_name_linter"
"R/FeatSelControlExhaustive.R",5,3,"style","Variable and function name style should be snake_case or CamelCase.","  log.fun = ""default"") {","object_name_linter"
"R/FeatSelControlGA.R",4,24,"style","Variable and function name style should be snake_case or CamelCase.","  maxit = NA_integer_, max.features = NA_integer_, comma = FALSE, mu = 10L, lambda,","object_name_linter"
"R/FeatSelControlGA.R",6,3,"style","Variable and function name style should be snake_case or CamelCase.","  log.fun = ""default"") {","object_name_linter"
"R/FeatSelControlSequential.R",4,53,"style","Variable and function name style should be snake_case or CamelCase.","  alpha = 0.01, beta = -0.001, maxit = NA_integer_, max.features = NA_integer_,","object_name_linter"
"R/FilterEnsemble.R",56,3,"warning","local variable ‘tag2df’ assigned but may not be used","  tag2df = function(tags, prefix = """") {","object_usage_linter"
"R/FilterEnsemble.R",113,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(fval.ens) = c(""name"", ""value"")","object_name_linter"
"R/FilterEnsemble.R",117,5,"style","Variable and function name style should be snake_case or CamelCase.","    fval.ens$filter = ""E-min""","object_name_linter"
"R/FilterEnsemble.R",146,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(fval.ens) = c(""name"", ""value"")","object_name_linter"
"R/FilterEnsemble.R",150,5,"style","Variable and function name style should be snake_case or CamelCase.","    fval.ens$filter = ""E-mean""","object_name_linter"
"R/FilterEnsemble.R",180,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(fval.ens) = c(""name"", ""value"")","object_name_linter"
"R/FilterEnsemble.R",184,5,"style","Variable and function name style should be snake_case or CamelCase.","    fval.ens$filter = ""E-max""","object_name_linter"
"R/FilterEnsemble.R",213,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(fval.ens) = c(""name"", ""value"")","object_name_linter"
"R/FilterEnsemble.R",217,5,"style","Variable and function name style should be snake_case or CamelCase.","    fval.ens$filter = ""E-median""","object_name_linter"
"R/FilterEnsemble.R",250,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(fval.ens) = c(""name"", ""value"")","object_name_linter"
"R/FilterEnsemble.R",254,5,"style","Variable and function name style should be snake_case or CamelCase.","    fval.ens$filter = ""E-Borda""","object_name_linter"
"R/FilterEnsemble.R",290,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.filters = rbind(simple_filters, ensemble_filters)","object_name_linter"
"R/filterFeatures.R",170,22,"warning","no visible binding for global variable ‘value’","      order(filter, -value)), ][[""value""]]), fun.args))","object_usage_linter"
"R/filterFeatures.R",191,47,"warning","no visible binding for global variable ‘value’","    features = fval[with(fval, order(filter, -value)), ]","object_usage_linter"
"R/filterFeatures.R",206,3,"style","Variable and function name style should be snake_case or CamelCase.","  sum.null = sum(!is.null(perc), !is.null(abs), !is.null(threshold), !is.null(fun))","object_name_linter"
"R/friedmanPostHocTestBMR.R",74,3,"style","Variable and function name style should be snake_case or CamelCase.","  q.nemenyi = qtukey(1 - p.value, n.learners, 1e+06) / sqrt(2L)","object_name_linter"
"R/friedmanPostHocTestBMR.R",76,3,"style","Variable and function name style should be snake_case or CamelCase.","  q.bd = qtukey(1L - (p.value / (n.learners - 1L)), 2L, 1e+06) / sqrt(2L)","object_name_linter"
"R/generateCalibration.R",101,7,"style","Variable and function name style should be snake_case or CamelCase.","      break.points = hist(df$Probability, breaks = breaks, plot = FALSE)$breaks","object_name_linter"
"R/generateCalibration.R",121,3,"style","Variable and function name style should be snake_case or CamelCase.","  max.bin = sapply(stri_split(levels(proportion$bin), regex = "",|]|\\)""),","object_name_linter"
"R/generateCalibration.R",201,5,"style","Variable and function name style should be snake_case or CamelCase.","    top.data$x = jitter(as.numeric(top.data$bin))","object_name_linter"
"R/generateCalibration.R",204,5,"style","Variable and function name style should be snake_case or CamelCase.","    bottom.data$x = jitter(as.numeric(bottom.data$bin))","object_name_linter"
"R/generateFilterValues.R",141,7,"style","Variable and function name style should be snake_case or CamelCase.","      missing.score = setdiff(fn, names(x))","object_name_linter"
"R/generateFilterValues.R",165,44,"warning","no visible binding for global variable ‘value’","  print(x$data[with(x$data, order(filter, -value)), ])","object_usage_linter"
"R/generateHyperParsEffect.R",304,7,"style","Variable and function name style should be snake_case or CamelCase.","      col.name = stri_split_fixed(col, "".test.mean"", omit_empty = TRUE)[[1]]","object_name_linter"
"R/generateHyperParsEffect.R",353,9,"style","Variable and function name style should be snake_case or CamelCase.","        col.name = stri_split_fixed(col, "".test.mean"", omit_empty = TRUE)[[1]]","object_name_linter"
"R/generateLearningCurve.R",135,27,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((color == ""learner"" & nlearn == 1L) | (color == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generateLearningCurve.R",135,43,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((color == ""learner"" & nlearn == 1L) | (color == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generateLearningCurve.R",135,65,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((color == ""learner"" & nlearn == 1L) | (color == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generateLearningCurve.R",138,27,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((facet == ""learner"" & nlearn == 1L) | (facet == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generateLearningCurve.R",138,43,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((facet == ""learner"" & nlearn == 1L) | (facet == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generateLearningCurve.R",138,65,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((facet == ""learner"" & nlearn == 1L) | (facet == ""measure"" & nmeas == 1L)) {","vector_logic_linter"
"R/generatePartialDependence.R",113,40,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (obj$learner$predict.type == ""se"" & individual) {","vector_logic_linter"
"R/generatePartialDependence.R",116,40,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (obj$learner$predict.type == ""se"" & derivative) {","vector_logic_linter"
"R/generatePartialDependence.R",144,18,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (derivative & interaction) {","vector_logic_linter"
"R/generatePartialDependence.R",166,34,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (is.null(names(test.fun)) & !individual) {","vector_logic_linter"
"R/generatePartialDependence.R",406,23,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (obj$interaction & length(obj$features) > 2L & geom != ""tile"") {","vector_logic_linter"
"R/generatePartialDependence.R",406,51,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (obj$interaction & length(obj$features) > 2L & geom != ""tile"") {","vector_logic_linter"
"R/generatePartialDependence.R",444,31,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (length(features) > 1L & !(length(features) == 2L & geom == ""tile"")) {","vector_logic_linter"
"R/generatePartialDependence.R",444,58,"warning","Conditional expressions require scalar logical operators (&& and ||)","    if (length(features) > 1L & !(length(features) == 2L & geom == ""tile"")) {","vector_logic_linter"
"R/generatePartialDependence.R",497,53,"warning","Conditional expressions require scalar logical operators (&& and ||)","      if (obj$task.desc$type %in% c(""regr"", ""surv"") |","vector_logic_linter"
"R/generatePartialDependence.R",498,42,"warning","Conditional expressions require scalar logical operators (&& and ||)","        (obj$task.desc$type == ""classif"" & length(obj$task.desc$class.levels) <= 2L)) {","vector_logic_linter"
"R/generatePartialDependence.R",506,53,"warning","Conditional expressions require scalar logical operators (&& and ||)","      if (obj$task.desc$type %in% c(""regr"", ""surv"") |","vector_logic_linter"
"R/generatePartialDependence.R",507,42,"warning","Conditional expressions require scalar logical operators (&& and ||)","        (obj$task.desc$type == ""classif"" & length(obj$task.desc$class.levels) <= 2L)) {","vector_logic_linter"
"R/generateThreshVsPerf.R",203,3,"style","`else` should come on the same line as the previous `}`.","  else if (length(obj$measures) == 1L) {","brace_linter"
"R/getCaretParamSet.R",95,5,"style","Variable and function name style should be snake_case or CamelCase.","    par.vals[vlapply(par.vals, testIntegerish)] =","object_name_linter"
"R/getNestedTuneResults.R",53,5,"style","Variable and function name style should be snake_case or CamelCase.","    op.dfs[[i]][, ""iter""] = i","object_name_linter"
"R/getResamplingIndices.R",42,5,"style","Variable and function name style should be snake_case or CamelCase.","    outer.inds = object$pred$instance[c(""train.inds"", ""test.inds"")]","object_name_linter"
"R/helpers_FDGAMBoost.R",46,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(fd.grids) = fdns","object_name_linter"
"R/helpers_FDGAMBoost.R",55,7,"warning","local variable ‘gn’ assigned but may not be used","      gn = stri_paste(fdn, "".grid"")","object_usage_linter"
"R/helpers_FDGAMBoost.R",57,7,"style","Variable and function name style should be snake_case or CamelCase.","      mat.list[[fdn]] = mdata[, fdn]","object_name_linter"
"R/helpers_FDGAMBoost.R",81,3,"style","Variable and function name style should be snake_case or CamelCase.","  mat.list[[targetname]] = mdata[, targetname]","object_name_linter"
"R/helpers_FDGAMBoost.R",112,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(fd.grids) = fdns","object_name_linter"
"R/helpers_FDGAMBoost.R",123,7,"style","Variable and function name style should be snake_case or CamelCase.","      mat.list[[fdn]] = tdata[, fdn]","object_name_linter"
"R/helpers_FDGAMBoost.R",137,5,"style","Variable and function name style should be snake_case or CamelCase.","    mat.list[[fsn]] = as.vector(as.matrix(tdata[, fsn, drop = FALSE]))","object_name_linter"
"R/helpers_FDGAMBoost.R",143,3,"style","Variable and function name style should be snake_case or CamelCase.","  mat.list[[tn]] = tdata[, tn]","object_name_linter"
"R/helpers.R",59,11,"style","Variable and function name style should be snake_case or CamelCase.","  attr(x, ""mlr.train.info"") = info","object_name_linter"
"R/helpers.R",113,3,"style","Variable and function name style should be snake_case or CamelCase.","  meas.names[dupes] = new.names","object_name_linter"
"R/helpLearner.R",70,7,"style","Variable and function name style should be snake_case or CamelCase.","      next.learner = current.learner$next.learner","object_name_linter"
"R/helpLearner.R",99,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.param = getParamIds(learner$par.set)","object_name_linter"
"R/helpLearner.R",217,11,"style","Variable and function name style should be snake_case or CamelCase.","          help.list[[par.name]] = stri_join(""Argument of: "",","object_name_linter"
"R/Impute.R",257,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(dummy.cols) = sprintf(""%s.dummy"", desc$dummies)","object_name_linter"
"R/Learner_properties.R",86,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.props = c(listTaskTypes(), ""any"")","object_name_linter"
"R/Learner.R",7,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(par.vals) = character(0L)","object_name_linter"
"R/listLearners.R",6,3,"warning","local variable ‘slots’ assigned but may not be used","  slots = c(""cl"", ""name"", ""short.name"", ""package"", ""properties"", ""note"")","object_usage_linter"
"R/Measure_colAUC.R",42,18,"warning","Conditional expressions require scalar logical operators (&& and ||)","      if (n1 > 0 & n2 > 0) {","vector_logic_linter"
"R/measures.R",808,3,"style","Variable and function name style should be snake_case or CamelCase.","  class.values = seq_along(levels(truth)) - 1L","object_name_linter"
"R/measures.R",1450,5,"style","Variable and function name style should be snake_case or CamelCase.","    max.time = assertNumber(extra.args$max.time, null.ok = TRUE) %??% max(getTaskTargets(task)[, 1L])","object_name_linter"
"R/measures.R",1471,5,"style","Variable and function name style should be snake_case or CamelCase.","    max.time = assertNumber(extra.args$max.time, null.ok = TRUE) %??% max(getTaskTargets(task)[, 1L])","object_name_linter"
"R/measures.R",1499,5,"style","Variable and function name style should be snake_case or CamelCase.","    max.time = extra.args$max.time %??% max(newdata[[tn[1L]]])","object_name_linter"
"R/mergeBenchmarkResults.R",40,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.combos = expand.grid(task.id = task.ids, learner.id = learner.ids)","object_name_linter"
"R/mergeBenchmarkResults.R",41,3,"style","Variable and function name style should be snake_case or CamelCase.","  all.combos = stri_paste(all.combos$task.id, all.combos$learner.id, sep = "" - "")","object_name_linter"
"R/mergeBenchmarkResults.R",67,7,"style","Variable and function name style should be snake_case or CamelCase.","      res.merged[[i]][[j]] = addRRMeasure(res.merged[[i]][[j]], measures.merged)","object_name_linter"
"R/ModelMultiplexerParamSet.R",69,7,"style","Variable and function name style should be snake_case or CamelCase.","      for.learner = stri_replace(found, """", regex = long.pid.end)","object_name_linter"
"R/ModelMultiplexerParamSet.R",70,7,"style","Variable and function name style should be snake_case or CamelCase.","      for.pars = pss[[for.learner]]$pars","object_name_linter"
"R/ModelMultiplexerParamSet.R",71,7,"style","Variable and function name style should be snake_case or CamelCase.","      for.pars[[pid]] = p","object_name_linter"
"R/MulticlassWrapper.R",148,3,"style","Variable and function name style should be snake_case or CamelCase.","  row.inds = lapply(binary.targets, function(v) which(v != 0))","object_name_linter"
"R/MulticlassWrapper.R",149,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(row.inds) = NULL","object_name_linter"
"R/MultilabelDBRWrapper.R",48,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(true.label.data) = setdiff(targets, tn)","object_name_linter"
"R/MultilabelDBRWrapper.R",51,5,"style","Variable and function name style should be snake_case or CamelCase.","    models.meta[[tn]] = train(.learner$next.learner, ctask, weights = .weights)","object_name_linter"
"R/MultilabelNestedStackingWrapper.R",67,7,"style","Variable and function name style should be snake_case or CamelCase.","      data.nst[[tnprevious]] = predlabel","object_name_linter"
"R/MultilabelStackingWrapper.R",77,12,"style","Variable and function name style should be snake_case or CamelCase.","  colnames(pred.lvl1) = paste(.model$task.desc$target, "".1"", sep = """")","object_name_linter"
"R/options.R",11,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(mlr.options) = stri_sub(names(mlr.options), from = 5L)","object_name_linter"
"R/plotBMRBoxplots.R",41,13,"style","Variable and function name style should be snake_case or CamelCase.","      names(learner.short.names) = learner.ids","object_name_linter"
"R/plotBMRRanksAsBarChart.R",33,18,"style","Variable and function name style should be snake_case or CamelCase.","  pos = ""stack"", order.lrns = NULL, order.tsks = NULL, pretty.names = TRUE) {","object_name_linter"
"R/plotBMRRanksAsBarChart.R",33,37,"style","Variable and function name style should be snake_case or CamelCase.","  pos = ""stack"", order.lrns = NULL, order.tsks = NULL, pretty.names = TRUE) {","object_name_linter"
"R/plotBMRRanksAsBarChart.R",50,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(learner.short.names) = learner.ids","object_name_linter"
"R/plotCritDifferences.R",117,5,"style","Variable and function name style should be snake_case or CamelCase.","    nem.df$y = seq(from = 0.1, to = 0.35, length.out = dim(nem.df)[1])","object_name_linter"
"R/predict.R",111,5,"style","Variable and function name style should be snake_case or CamelCase.","    debug.seed = getMlrOption(""debug.seed"", NULL)","object_name_linter"
"R/Prediction_operators.R",2,40,"style","Variable and function name style should be snake_case or CamelCase.","as.data.frame.Prediction = function(x, row.names = NULL, optional = FALSE, ...) {","object_name_linter"
"R/PreprocWrapperCaret.R",54,5,"style","Variable and function name style should be snake_case or CamelCase.","    all.methods = c(","object_name_linter"
"R/PreprocWrapperCaret.R",102,30,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (par.vals$ppc.bagImpute | par.vals$ppc.knnImpute | par.vals$ppc.medianImpute) {","vector_logic_linter"
"R/PreprocWrapperCaret.R",102,55,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (par.vals$ppc.bagImpute | par.vals$ppc.knnImpute | par.vals$ppc.medianImpute) {","vector_logic_linter"
"R/relativeOverfitting.R",49,3,"warning","local variable ‘mids’ assigned but may not be used","  mids = vcapply(measures, function(m) m$id)","object_usage_linter"
"R/relativeOverfitting.R",76,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.permuted$data = data.frame(truth = rep(c(predish$data$truth, pred.train$data$truth), each = nrows),","object_name_linter"
"R/resample.R",112,5,"style","Variable and function name style should be snake_case or CamelCase.","    more.args$weights = weights","object_name_linter"
"R/resample.R",114,5,"style","Variable and function name style should be snake_case or CamelCase.","    more.args$weights = getTaskWeights(task)","object_name_linter"
"R/resample.R",163,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.msgs[1L] = getFailureModelMsg(m)","object_name_linter"
"R/resample.R",164,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$train = getFailureModelDump(m)","object_name_linter"
"R/resample.R",182,35,"style","Variable and function name style should be snake_case or CamelCase.","    if (!is.na(pred.train$error)) err.msgs[2L] = pred.train$error","object_name_linter"
"R/resample.R",184,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(ms.train) = vcapply(measures, measureAggrName)","object_name_linter"
"R/resample.R",185,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.train = getPredictionDump(pred.train)","object_name_linter"
"R/resample.R",188,34,"style","Variable and function name style should be snake_case or CamelCase.","    if (!is.na(pred.test$error)) err.msgs[2L] = pred.test$error","object_name_linter"
"R/resample.R",190,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(ms.test) = vcapply(measures, measureAggrName)","object_name_linter"
"R/resample.R",191,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.test = getPredictionDump(pred.test)","object_name_linter"
"R/resample.R",200,35,"style","Variable and function name style should be snake_case or CamelCase.","    if (!is.na(pred.train$error)) err.msgs[2L] = pred.train$error","object_name_linter"
"R/resample.R",202,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(ms.train) = vcapply(measures, measureAggrName)","object_name_linter"
"R/resample.R",203,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.train = getPredictionDump(pred.train)","object_name_linter"
"R/resample.R",206,34,"style","Variable and function name style should be snake_case or CamelCase.","    if (!is.na(pred.test$error)) err.msgs[2L] = paste(err.msgs[2L], pred.test$error)","object_name_linter"
"R/resample.R",208,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(ms.test) = vcapply(measures, measureAggrName)","object_name_linter"
"R/resample.R",209,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.test = getPredictionDump(pred.test)","object_name_linter"
"R/resample.R",214,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.train = NULL","object_name_linter"
"R/resample.R",215,5,"style","Variable and function name style should be snake_case or CamelCase.","    err.dumps$predict.test = NULL","object_name_linter"
"R/resample.R",274,12,"style","Variable and function name style should be snake_case or CamelCase.","  colnames(ms.test) = mids","object_name_linter"
"R/resample.R",275,12,"style","Variable and function name style should be snake_case or CamelCase.","  rownames(ms.test) = NULL","object_name_linter"
"R/resample.R",277,12,"style","Variable and function name style should be snake_case or CamelCase.","  colnames(ms.train) = mids","object_name_linter"
"R/resample.R",278,12,"style","Variable and function name style should be snake_case or CamelCase.","  rownames(ms.train) = NULL","object_name_linter"
"R/resample.R",282,12,"style","Variable and function name style should be snake_case or CamelCase.","  rownames(err.msgs) = NULL","object_name_linter"
"R/resample.R",283,12,"style","Variable and function name style should be snake_case or CamelCase.","  colnames(err.msgs) = c(""train"", ""predict"")","object_name_linter"
"R/ResampleInstance.R",129,9,"style","Variable and function name style should be snake_case or CamelCase.","        train.inds[[i]] = lapply(inst$train.inds, function(j) ci[j])","object_name_linter"
"R/ResampleInstance.R",130,9,"style","Variable and function name style should be snake_case or CamelCase.","        test.inds[[i]] = lapply(inst$test.inds, function(j) ci[j])","object_name_linter"
"R/ResampleInstance.R",132,9,"style","Variable and function name style should be snake_case or CamelCase.","        train.inds[[i]] = test.inds[[i]] = replicate(desc$iters, integer(0L), simplify = FALSE)","object_name_linter"
"R/ResampleInstance.R",132,27,"style","Variable and function name style should be snake_case or CamelCase.","        train.inds[[i]] = test.inds[[i]] = replicate(desc$iters, integer(0L), simplify = FALSE)","object_name_linter"
"R/ResampleInstances.R",53,7,"style","Variable and function name style should be snake_case or CamelCase.","      test.inds[[index]] = NULL","object_name_linter"
"R/ResampleResult_operators.R",102,7,"style","Variable and function name style should be snake_case or CamelCase.","      p.split[[i]]$time = time[i]","object_name_linter"
"R/ResampleResult_operators.R",129,3,"style","Variable and function name style should be snake_case or CamelCase.","  missing.measures = setdiff(measures.id, colnames(res$measures.test))","object_name_linter"
"R/RLearner_classif_dcSVM.R",44,5,"style","Variable and function name style should be snake_case or CamelCase.","    max.levels = 1","object_name_linter"
"R/RLearner_classif_dcSVM.R",47,5,"style","Variable and function name style should be snake_case or CamelCase.","    max.levels = pars$max.levels","object_name_linter"
"R/RLearner_classif_dcSVM.R",55,3,"style","Variable and function name style should be snake_case or CamelCase.","  min.cluster = ceiling(5 * m / (k^max.levels))","object_name_linter"
"R/RLearner_classif_evtree.R",52,5,"warning","local variable ‘p’ assigned but may not be used","    p = predict(.model$learner.model, newdata = .newdata, type = ""prob"", ...)","object_usage_linter"
"R/RLearner_classif_fdausc.kernel.R",43,3,"warning","local variable ‘trainfun’ assigned but may not be used","  trainfun = getFromNamespace(""classif.kernel"", ""fda.usc"")","object_usage_linter"
"R/RLearner_classif_fdausc.kernel.R",44,3,"warning","local variable ‘mod’ assigned but may not be used","  mod = do.call(""trainfun"",","object_usage_linter"
"R/RLearner_classif_fdausc.knn.R",37,3,"warning","local variable ‘trainfun’ assigned but may not be used","  trainfun = getFromNamespace(""classif.knn"", ""fda.usc"")","object_usage_linter"
"R/RLearner_classif_fdausc.knn.R",39,3,"warning","local variable ‘mod’ assigned but may not be used","  mod = suppressAll(do.call(""trainfun"",","object_usage_linter"
"R/RLearner_classif_fdausc.np.R",42,3,"warning","local variable ‘trainfun’ assigned but may not be used","  trainfun = getFromNamespace(""classif.np"", ""fda.usc"")","object_usage_linter"
"R/RLearner_classif_featureless.R",22,3,"warning","local variable ‘lvls’ assigned but may not be used","  lvls = getTaskClassLevels(.task)","object_usage_linter"
"R/RLearner_classif_fnn.R",32,11,"style","Variable and function name style should be snake_case or CamelCase.","  attr(p, ""nn.index"") = NULL","object_name_linter"
"R/RLearner_classif_fnn.R",33,11,"style","Variable and function name style should be snake_case or CamelCase.","  attr(p, ""nn.dist"") = NULL","object_name_linter"
"R/RLearner_classif_h2odeeplearning.R",271,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p.df)[pcol] = stri_sub(colnames(p.df)[pcol], 2L)","object_name_linter"
"R/RLearner_classif_h2odeeplearning.R",277,5,"style","Variable and function name style should be snake_case or CamelCase.","    p.df$predict = NULL","object_name_linter"
"R/RLearner_classif_h2ogbm.R",63,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p.df)[pcol] = stri_sub(colnames(p.df)[pcol], 2L)","object_name_linter"
"R/RLearner_classif_h2ogbm.R",69,5,"style","Variable and function name style should be snake_case or CamelCase.","    p.df$predict = NULL","object_name_linter"
"R/RLearner_classif_h2oglm.R",66,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p.df)[pcol] = stri_sub(colnames(p.df)[pcol], 2L)","object_name_linter"
"R/RLearner_classif_h2oglm.R",72,5,"style","Variable and function name style should be snake_case or CamelCase.","    p.df$predict = NULL","object_name_linter"
"R/RLearner_classif_h2orandomForest.R",55,14,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p.df)[pcol] = stri_sub(colnames(p.df)[pcol], 2L)","object_name_linter"
"R/RLearner_classif_h2orandomForest.R",61,5,"style","Variable and function name style should be snake_case or CamelCase.","    p.df$predict = NULL","object_name_linter"
"R/RLearner_classif_lvq1.R",20,3,"style","Variable and function name style should be snake_case or CamelCase.","  cdbk.args$x = d$data","object_name_linter"
"R/RLearner_classif_lvq1.R",21,3,"style","Variable and function name style should be snake_case or CamelCase.","  cdbk.args$cl = d$target","object_name_linter"
"R/RLearner_classif_lvq1.R",25,3,"style","Variable and function name style should be snake_case or CamelCase.","  lvq.args$x = d$data","object_name_linter"
"R/RLearner_classif_lvq1.R",26,3,"style","Variable and function name style should be snake_case or CamelCase.","  lvq.args$cl = d$target","object_name_linter"
"R/RLearner_classif_lvq1.R",27,3,"style","Variable and function name style should be snake_case or CamelCase.","  lvq.args$codebk = codebk","object_name_linter"
"R/RLearner_regr_bcart.R",34,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(d$data, function(x) class(x))","object_name_linter"
"R/RLearner_regr_bcart.R",35,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_bcart.R",51,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(.newdata, function(x) class(x))","object_name_linter"
"R/RLearner_regr_bcart.R",52,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btgp.R",42,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(d$data, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btgp.R",43,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btgp.R",59,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(.newdata, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btgp.R",60,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btgpllm.R",44,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(d$data, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btgpllm.R",45,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btgpllm.R",61,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(.newdata, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btgpllm.R",62,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btlm.R",36,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(d$data, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btlm.R",37,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_btlm.R",53,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(.newdata, function(x) class(x))","object_name_linter"
"R/RLearner_regr_btlm.R",54,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"R/RLearner_regr_evtree.R",51,3,"warning","local variable ‘p’ assigned but may not be used","  p = predict(.model$learner.model, newdata = .newdata, ...)","object_usage_linter"
"R/RLearner_regr_randomForest.R",88,3,"style","Variable and function name style should be snake_case or CamelCase.","  single.model = getLearnerModel(.model)$single.model # get raw RF model","object_name_linter"
"R/RLearner_surv_gamboost.R",47,5,"warning","local variable ‘model’ assigned but may not be used","    model = mboost::gamboost(f, data = data, control = ctrl, family = family, ...)","object_usage_linter"
"R/selectFeaturesGA.R",24,10,"style","Variable and function name style should be snake_case or CamelCase.","    mode(pop.featmat) = ""integer""","object_name_linter"
"R/smote.R",79,9,"style","Variable and function name style should be snake_case or CamelCase.","        x.min.matrix[, i] = as.numeric(as.integer(x.min.matrix[, i]))","object_name_linter"
"R/smote.R",85,16,"style","Variable and function name style should be snake_case or CamelCase.","  storage.mode(x.min.matrix) = ""numeric""","object_name_linter"
"R/smote.R",100,13,"style","Variable and function name style should be snake_case or CamelCase.","            x.scaled[, j] = (x.scaled[, j] != 0)","object_name_linter"
"R/smote.R",128,3,"style","`else` should come on the same line as the previous `}`.","  else {","brace_linter"
"R/smote.R",131,10,"style","Variable and function name style should be snake_case or CamelCase.","    diag(minclass.dist) = NA","object_name_linter"
"R/StackedLearner.R",106,28,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.null(resampling) & method != ""stack.cv"") {","vector_logic_linter"
"R/StackedLearner.R",124,55,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((method == ""average"" || method == ""hill.climb"") & (!is.null(super.learner) || is.null(predict.type))) {","vector_logic_linter"
"R/StackedLearner.R",127,27,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (method != ""average"" & method != ""hill.climb"" & is.null(super.learner)) {","vector_logic_linter"
"R/StackedLearner.R",127,52,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (method != ""average"" & method != ""hill.climb"" & is.null(super.learner)) {","vector_logic_linter"
"R/StackedLearner.R",132,55,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if ((method == ""average"" || method == ""hill.climb"") & use.feat) {","vector_logic_linter"
"R/StackedLearner.R",327,5,"style","Variable and function name style should be snake_case or CamelCase.","    base.models[[i]] = model","object_name_linter"
"R/StackedLearner.R",349,5,"style","Variable and function name style should be snake_case or CamelCase.","    base.models[[i]] = model","object_name_linter"
"R/StackedLearner.R",396,5,"style","Variable and function name style should be snake_case or CamelCase.","    base.models[[i]] = train(bl, task)","object_name_linter"
"R/StackedLearner.R",475,5,"style","Variable and function name style should be snake_case or CamelCase.","    base.models[[i]] = train(bl, task)","object_name_linter"
"R/StackedLearner.R",599,16,"style","Variable and function name style should be snake_case or CamelCase.","      colnames(pred.return) = td$class.levels","object_name_linter"
"R/train.R",44,5,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","    } # I believe this is a bug, see #2098","brace_linter"
"R/train.R",45,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/train.R",85,5,"style","Variable and function name style should be snake_case or CamelCase.","    debug.seed = getMlrOption(""debug.seed"", NULL)","object_name_linter"
"R/train.R",113,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.levels = getTaskFactorLevels(task)","object_name_linter"
"R/tuneCMAES.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    ctrl.cmaes$lambda = 4 + floor(3 * log(N))","object_name_linter"
"R/tuneCMAES.R",42,3,"style","Variable and function name style should be snake_case or CamelCase.","  ctrl.cmaes$maxit = maxit","object_name_linter"
"R/TuneControl.R",39,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunTune","object_name_linter"
"R/TuneControl.R",41,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunTuneMemory","object_name_linter"
"R/tuneIrace.R",37,3,"style","Variable and function name style should be snake_case or CamelCase.","  log.file = tempfile()","object_name_linter"
"R/TuneMultiCritControl.R",47,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunTune","object_name_linter"
"R/TuneMultiCritControl.R",49,5,"style","Variable and function name style should be snake_case or CamelCase.","    log.fun = logFunTuneMemory","object_name_linter"
"R/utils_imbalancy.R",7,3,"style","Variable and function name style should be snake_case or CamelCase.","  min.name = ns[j.small]","object_name_linter"
"R/utils_imbalancy.R",8,3,"style","Variable and function name style should be snake_case or CamelCase.","  max.name = ns[-j.small]","object_name_linter"
"R/WeightedClassesWrapper.R",113,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(wcw.weight) = c(td$positive, td$negative)","object_name_linter"
"R/WeightedClassesWrapper.R",116,11,"style","Variable and function name style should be snake_case or CamelCase.","    names(wcw.weight) = levs","object_name_linter"
"tests/testthat/helper_helpers.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    cv.instance$train.inds[[i]] = inds[[i]]","object_name_linter"
"tests/testthat/helper_helpers.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    cv.instance$test.inds[[i]] = setdiff(1:size, inds[[i]])","object_name_linter"
"tests/testthat/helper_helpers.R",39,5,"style","Variable and function name style should be snake_case or CamelCase.","    bs.instance$train.inds[[i]] = inds[[i]]","object_name_linter"
"tests/testthat/helper_helpers.R",40,5,"style","Variable and function name style should be snake_case or CamelCase.","    bs.instance$test.inds[[i]] = setdiff(1:size, inds[[i]])","object_name_linter"
"tests/testthat/helper_helpers.R",96,3,"warning","local variable ‘train’ assigned but may not be used","  train = df[inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",97,3,"warning","local variable ‘test’ assigned but may not be used","  test = df[-inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",102,5,"warning","no visible global function definition for ‘testSimple’","    testSimple(t.name, df, target, train.inds, old.predicts, parset)","object_usage_linter"
"tests/testthat/helper_helpers.R",123,21,"warning","no visible binding for global variable ‘old.predicts’","    expect_s3_class(old.predicts, ""try-error"")","object_usage_linter"
"tests/testthat/helper_helpers.R",128,13,"style","Variable and function name style should be snake_case or CamelCase.","      names(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",138,28,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p) = colnames(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",139,28,"style","Variable and function name style should be snake_case or CamelCase.","    rownames(p) = rownames(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",140,11,"style","Variable and function name style should be snake_case or CamelCase.","    class(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",162,21,"warning","no visible binding for global variable ‘old.predicts’","    expect_s3_class(old.predicts, ""try-error"")","object_usage_linter"
"tests/testthat/helper_helpers.R",167,13,"style","Variable and function name style should be snake_case or CamelCase.","      names(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",177,28,"style","Variable and function name style should be snake_case or CamelCase.","    colnames(p) = colnames(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",178,28,"style","Variable and function name style should be snake_case or CamelCase.","    rownames(p) = rownames(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",179,11,"style","Variable and function name style should be snake_case or CamelCase.","    class(old.probs) = NULL","object_name_linter"
"tests/testthat/helper_helpers.R",180,44,"warning","no visible binding for global variable ‘tol’","    expect_equal(p, old.probs, tolerance = tol)","object_usage_linter"
"tests/testthat/helper_helpers.R",187,3,"warning","local variable ‘train’ assigned but may not be used","  train = df[inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",188,3,"warning","local variable ‘test’ assigned but may not be used","  test = df[-inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",193,5,"warning","no visible global function definition for ‘testProb’","    testProb(t.name, df, target, train.inds, old.probs, parset)","object_usage_linter"
"tests/testthat/helper_helpers.R",201,3,"warning","local variable ‘train’ assigned but may not be used","  train = df[inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",202,3,"warning","local variable ‘test’ assigned but may not be used","  test = df[-inds, ]","object_usage_linter"
"tests/testthat/helper_helpers.R",207,5,"warning","no visible global function definition for ‘testProbWithTol’","    testProbWithTol(t.name, df, target, train.inds, old.probs, parset, tolerance = tol)","object_usage_linter"
"tests/testthat/helper_helpers.R",207,84,"warning","no visible binding for global variable ‘tol’","    testProbWithTol(t.name, df, target, train.inds, old.probs, parset, tolerance = tol)","object_usage_linter"
"tests/testthat/helper_helpers.R",261,5,"warning","no visible global function definition for ‘testCV’","    testCV(t.name, df, target, folds, parset, tune.train, tune.predict)","object_usage_linter"
"tests/testthat/helper_helpers.R",313,44,"warning","no visible binding for global variable ‘ns.svg’","  nodes = XML::getNodeSet(doc, text.paths, ns.svg)","object_usage_linter"
"tests/testthat/helper_learners_all.R",24,3,"warning","local variable ‘rin’ assigned but may not be used","  rin = makeResampleInstance(""Holdout"", task = task)","object_usage_linter"
"tests/testthat/helper_learners_all.R",128,3,"warning","no visible global function definition for ‘testBasicLearnerProperties’","  testBasicLearnerProperties(lrn = lrn, task = task, hyperpars = hyperpars)","object_usage_linter"
"tests/testthat/helper_learners_all.R",145,3,"warning","no visible global function definition for ‘testBasicLearnerProperties’","  testBasicLearnerProperties(lrn = lrn, task = task, hyperpars = hyperpars)","object_usage_linter"
"tests/testthat/helper_learners_all.R",163,3,"warning","no visible global function definition for ‘testBasicLearnerProperties’","  testBasicLearnerProperties(lrn = lrn, task = task, hyperpars = hyperpars)","object_usage_linter"
"tests/testthat/helper_learners_all.R",236,3,"warning","local variable ‘ses’ assigned but may not be used","  ses = getPredictionSE(res$pred)","object_usage_linter"
"tests/testthat/helper_objects.R",50,1,"style","Variable and function name style should be snake_case or CamelCase.","multilabel.df[, ""y1""] = rep(c(TRUE, FALSE), 75L)","object_name_linter"
"tests/testthat/helper_objects.R",51,1,"style","Variable and function name style should be snake_case or CamelCase.","multilabel.df[, ""y2""] = rep(c(FALSE, TRUE), 75L)","object_name_linter"
"tests/testthat/helper_objects.R",101,1,"style","Variable and function name style should be snake_case or CamelCase.","regr.na.num.df[1, 1] = NA","object_name_linter"
"tests/testthat/helper_objects.R",125,3,"style","Variable and function name style should be snake_case or CamelCase.","  obs.time[i] = q","object_name_linter"
"tests/testthat/helper_objects.R",126,3,"style","Variable and function name style should be snake_case or CamelCase.","  cens.time[i] = FALSE","object_name_linter"
"tests/testthat/helper_objects.R",222,1,"style","Variable and function name style should be snake_case or CamelCase.","task.filters.rank$env$data = structure(list(trt = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,","object_name_linter"
"tests/testthat/test_base_benchmark.R",358,3,"style","Variable and function name style should be snake_case or CamelCase.","  stop.learner = makeLearner(""classif.__mlrmocklearners__3"",","object_name_linter"
"tests/testthat/test_base_benchmark.R",360,3,"style","Variable and function name style should be snake_case or CamelCase.","  stop.learner = makeFilterWrapper(stop.learner,","object_name_linter"
"tests/testthat/test_base_benchmark.R",363,3,"style","Variable and function name style should be snake_case or CamelCase.","  stop.learner = makeTuneWrapper(stop.learner,","object_name_linter"
"tests/testthat/test_base_createDummyFeatures.R",22,3,"style","Variable and function name style should be snake_case or CamelCase.","  dummy.task$env = NULL","object_name_linter"
"tests/testthat/test_base_createDummyFeatures.R",23,3,"style","Variable and function name style should be snake_case or CamelCase.","  iris.task$env = NULL","object_name_linter"
"tests/testthat/test_base_getHyperPars.R",8,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(named.list) = character(0)","object_name_linter"
"tests/testthat/test_base_measures.R",167,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.regr$data$response = pred.art.regr","object_name_linter"
"tests/testthat/test_base_measures.R",177,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.classif$data$response = pred.art.classif","object_name_linter"
"tests/testthat/test_base_measures.R",187,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.bin$data$response = pred.art.bin","object_name_linter"
"tests/testthat/test_base_measures.R",199,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.multilabel$data[, 4:5] = pred.art.multilabel","object_name_linter"
"tests/testthat/test_base_measures.R",214,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.surv$data[, ""response""] = pred.art.surv","object_name_linter"
"tests/testthat/test_base_measures.R",228,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.costsens$data$response = pred.art.costsens","object_name_linter"
"tests/testthat/test_base_measures.R",237,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.cluster$data$response = pred.art.cluster","object_name_linter"
"tests/testthat/test_base_measures.R",267,3,"style","Variable and function name style should be snake_case or CamelCase.","  abs.errs = abs(c(5 - 4, 10 - 11, 0 - 0, 5 - 4))","object_name_linter"
"tests/testthat/test_base_measures.R",347,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.regr.mape$data$truth = c(5, 10, 1, 5) # we change the 0 target because mape is undefined","object_name_linter"
"tests/testthat/test_base_measures.R",365,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.art.regr.neg[[1L]] = -3","object_name_linter"
"tests/testthat/test_base_measures.R",488,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.probs[pred.probs > 1 - 1e-15] = 1 - 1e-15","object_name_linter"
"tests/testthat/test_base_measures.R",489,3,"style","Variable and function name style should be snake_case or CamelCase.","  pred.probs[pred.probs < 1e-15] = 1e-15","object_name_linter"
"tests/testthat/test_base_measures.R",549,10,"style","Variable and function name style should be snake_case or CamelCase.","  levels(tar.classif2) = as.numeric(levels(tar.classif))^2","object_name_linter"
"tests/testthat/test_base_measures.R",550,10,"style","Variable and function name style should be snake_case or CamelCase.","  levels(pred.art.classif2) = as.numeric(levels(pred.art.classif))^2","object_name_linter"
"tests/testthat/test_base_measures.R",744,3,"style","Variable and function name style should be snake_case or CamelCase.","  f1.test[is.na(f1.test)] = 1","object_name_linter"
"tests/testthat/test_base_measures.R",767,3,"style","Variable and function name style should be snake_case or CamelCase.","  acc.test[is.na(acc.test)] = 1","object_name_linter"
"tests/testthat/test_base_multilabel.R",40,3,"style","Variable and function name style should be snake_case or CamelCase.","  multilabel.df2[c(2, 10, 14), c(1, 5)] = NA","object_name_linter"
"tests/testthat/test_base_multilabel.R",71,23,"warning","no visible binding for global variable ‘multilabel.task’","    mod = train(lrn2, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",72,25,"warning","no visible binding for global variable ‘multilabel.task’","    pred = predict(mod, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",79,35,"warning","no visible binding for global variable ‘multilabel.df’","    pred = predict(mod, newdata = multilabel.df)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",85,55,"warning","no visible binding for global variable ‘multilabel.task’","    expect_equal(rownames(pmulti), getTaskTargetNames(multilabel.task))","object_usage_linter"
"tests/testthat/test_base_multilabel.R",88,23,"warning","no visible binding for global variable ‘multilabel.task’","    r = holdout(lrn2, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",93,55,"warning","no visible binding for global variable ‘multilabel.task’","    expect_equal(rownames(pmulti), getTaskTargetNames(multilabel.task))","object_usage_linter"
"tests/testthat/test_base_multilabel.R",97,23,"warning","no visible binding for global variable ‘multilabel.task’","    r = holdout(lrn2, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",101,63,"warning","no visible binding for global variable ‘multilabel.task’","    p = getPredictionProbabilities(r$pred, getTaskClassLevels(multilabel.task))","object_usage_linter"
"tests/testthat/test_base_multilabel.R",107,23,"warning","no visible binding for global variable ‘multilabel.task’","    r = holdout(lrn2, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",110,30,"warning","no visible binding for global variable ‘multilabel.task’","    cls = getTaskClassLevels(multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",122,59,"warning","no visible binding for global variable ‘multilabel.task’","    expect_equal(length(tr$th), length(getTaskClassLevels(multilabel.task)))","object_usage_linter"
"tests/testthat/test_base_multilabel.R",128,5,"style","Variable and function name style should be snake_case or CamelCase.","    multilabel.df2[c(2, 10, 14), c(1, 5)] = NA","object_name_linter"
"tests/testthat/test_base_multilabel.R",137,23,"warning","no visible binding for global variable ‘multilabel.task’","    mod = train(lrn2, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",138,25,"warning","no visible binding for global variable ‘multilabel.task’","    pred = predict(mod, multilabel.task)","object_usage_linter"
"tests/testthat/test_base_multilabel.R",143,5,"style","Variable and function name style should be snake_case or CamelCase.","    three.target.df$y3 = three.target.df$y2","object_name_linter"
"tests/testthat/test_base_resample_operators.R",46,21,"style","Variable and function name style should be snake_case or CamelCase.","  attr(ptrain$data, ""row.names"") = as.integer(row.names(ptrain$data))","object_name_linter"
"tests/testthat/test_base_resample_operators.R",49,20,"style","Variable and function name style should be snake_case or CamelCase.","  attr(ptest$data, ""row.names"") = as.integer(row.names(ptest$data))","object_name_linter"
"tests/testthat/test_base_UnsupervisedTask.R",11,3,"style","Variable and function name style should be snake_case or CamelCase.","  sub.task = subsetTask(noclass.task, features = 1:2)","object_name_linter"
"tests/testthat/test_classif_ada.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p[, 1]","object_name_linter"
"tests/testthat/test_classif_ada.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(binaryclass.class.levs[ifelse(p[, 2] > 0.5, 2, 1)])","object_name_linter"
"tests/testthat/test_classif_adaboostm1.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p[, 1]","object_name_linter"
"tests/testthat/test_classif_adaboostm1.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(binaryclass.class.levs[ifelse(p[, 2] > 0.5, 2, 1)])","object_name_linter"
"tests/testthat/test_classif_adaboostm1.R",44,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_adaboostm1.R",45,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_bartMachine.R",33,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_bartMachine.R",34,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_binomial.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p.class","object_name_linter"
"tests/testthat/test_classif_binomial.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_boost.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$class)","object_name_linter"
"tests/testthat/test_classif_boost.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = setColNames(p$prob, levels(multiclass.df[, multiclass.target]))","object_name_linter"
"tests/testthat/test_classif_bst.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = ifelse(p > 0, binaryclass.class.levs[2], binaryclass.class.levs[1])","object_name_linter"
"tests/testthat/test_classif_C50.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_C50.R",32,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_cforest.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, newdata = binaryclass.test)","object_name_linter"
"tests/testthat/test_classif_cforest.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = sapply(p, ""["", 1)","object_name_linter"
"tests/testthat/test_classif_clusterSVM.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, data.matrix(binaryclass.test[, -61]))$predictions","object_name_linter"
"tests/testthat/test_classif_ctree.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_ctree.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_cvglmnet.R",34,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_cvglmnet.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = 1 - p2","object_name_linter"
"tests/testthat/test_classif_dbnDNN.R",37,7,"style","Variable and function name style should be snake_case or CamelCase.","      old.predicts.list[[i]] = as.factor(colnames(p)[max.col(p)])","object_name_linter"
"tests/testthat/test_classif_earth.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = 1 - p","object_name_linter"
"tests/testthat/test_classif_earth.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(binaryclass.class.levs[ifelse(p > 0.5, 2, 1)])","object_name_linter"
"tests/testthat/test_classif_earth.R",61,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_earth.R",62,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(predict(m,","object_name_linter"
"tests/testthat/test_classif_evtree.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, newdata = binaryclass.test)","object_name_linter"
"tests/testthat/test_classif_evtree.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p[, 1]","object_name_linter"
"tests/testthat/test_classif_extraTrees.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, x.test)","object_name_linter"
"tests/testthat/test_classif_extraTrees.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = predict(m, x.test, probability = TRUE)[, 1L]","object_name_linter"
"tests/testthat/test_classif_FDboost.R",17,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(fd.grids) = fdns","object_name_linter"
"tests/testthat/test_classif_fnn.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list1[[i]] = do.call(FNN::knn, pars)","object_name_linter"
"tests/testthat/test_classif_fnn.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list2[[i]] = do.call(FNN::knn, pars)","object_name_linter"
"tests/testthat/test_classif_gamboost.R",30,7,"style","Variable and function name style should be snake_case or CamelCase.","      old.predicts.list[[i]] <- predict(m, newdata = binaryclass.test, type = ""class"")","object_name_linter"
"tests/testthat/test_classif_gamboost.R",33,7,"style","Variable and function name style should be snake_case or CamelCase.","      old.probs.list[[i]] <- 1 - predict(m, newdata = binaryclass.test, type = ""response"")[, 1]","object_name_linter"
"tests/testthat/test_classif_gausspr.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_gausspr.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_gbm.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_gbm.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_glmboost.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, newdata = binaryclass.test, type = ""class"")","object_name_linter"
"tests/testthat/test_classif_glmboost.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = 1 - predict(m, newdata = binaryclass.test, type = ""response"")[, 1]","object_name_linter"
"tests/testthat/test_classif_glmnet.R",39,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_glmnet.R",40,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = 1 - p2","object_name_linter"
"tests/testthat/test_classif_h2odeeplearning.R",15,3,"style","Variable and function name style should be snake_case or CamelCase.","  debug.seed = getOption(""mlr.debug.seed"")","object_name_linter"
"tests/testthat/test_classif_h2odeeplearning.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = as.data.frame(p)[, 2L]","object_name_linter"
"tests/testthat/test_classif_h2ogbm.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = as.data.frame(p)[, 2L]","object_name_linter"
"tests/testthat/test_classif_h2oglm.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = as.data.frame(p)[, 2]","object_name_linter"
"tests/testthat/test_classif_h2oglm.R",55,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(feat.imp) = names(feat.imp.h2o)","object_name_linter"
"tests/testthat/test_classif_h2orandomForest.R",14,3,"style","Variable and function name style should be snake_case or CamelCase.","  debug.seed = getOption(""mlr.debug.seed"")","object_name_linter"
"tests/testthat/test_classif_h2orandomForest.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = as.data.frame(p)[, 2L]","object_name_linter"
"tests/testthat/test_classif_h2orandomForest.R",56,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(feat.imp) = names(feat.imp.h2o)","object_name_linter"
"tests/testthat/test_classif_IBk.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_IBk.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_J48.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_J48.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_JRip.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_JRip.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_kknn.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_kknn.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = m$prob","object_name_linter"
"tests/testthat/test_classif_knn.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_ksvm.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = kernlab::predict(m, newdata = multiclass.test)","object_name_linter"
"tests/testthat/test_classif_ksvm.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = kernlab::predict(m, newdata = multiclass.test, type = ""prob"")","object_name_linter"
"tests/testthat/test_classif_ksvm.R",55,51,"style","Use TRUE instead of the symbol T.","    B = factor(sample(c(""A"", ""B""), 10, replace = T))","T_and_F_symbol_linter"
"tests/testthat/test_classif_ksvm.R",59,56,"style","Use TRUE instead of the symbol T.","    B = factor(sample(c(""A"", ""B"", ""C""), 10, replace = T))","T_and_F_symbol_linter"
"tests/testthat/test_classif_LiblineaRL1L2SVC.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_LiblineaRL1LogReg.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_LiblineaRL1LogReg.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p$probabilities[, 2L]","object_name_linter"
"tests/testthat/test_classif_LiblineaRL2L1SVC.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_LiblineaRL2LogReg.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_LiblineaRL2LogReg.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p$probabilities[, 2L]","object_name_linter"
"tests/testthat/test_classif_LiblineaRL2SVC.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_LibLineaRMultiClassSVC.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.factor(p$predictions)","object_name_linter"
"tests/testthat/test_classif_lssvm.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = suppressMessages(kernlab::predict(m, newdata = multiclass.test))","object_name_linter"
"tests/testthat/test_classif_mda.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_mda.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_nodeHarvest.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = ifelse(p > 0.5, binaryclass.class.levs[1],","object_name_linter"
"tests/testthat/test_classif_nodeHarvest.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_OneR.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_OneR.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_pamr.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = pamr::pamr.predict(m, newdata,","object_name_linter"
"tests/testthat/test_classif_pamr.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = pamr::pamr.predict(m, newdata,","object_name_linter"
"tests/testthat/test_classif_PART.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_PART.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_penalized.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = 1 - penalized::predict(m, data = binaryclass.test)","object_name_linter"
"tests/testthat/test_classif_plr.R",34,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_plr.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_plsdaCaret.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_plsdaCaret.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_plsdaCaret.R",63,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_plsdaCaret.R",64,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_randomForest.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_randomForest.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_randomForestSRC.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p$class","object_name_linter"
"tests/testthat/test_classif_randomForestSRC.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p$predicted[, 1]","object_name_linter"
"tests/testthat/test_classif_ranger.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p$predictions[, 1]","object_name_linter"
"tests/testthat/test_classif_rda.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p$class","object_name_linter"
"tests/testthat/test_classif_rda.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p$posterior","object_name_linter"
"tests/testthat/test_classif_rFerns.R",18,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = factor(predict(m, binaryclass.test))","object_name_linter"
"tests/testthat/test_classif_rknn.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_rotationForest.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    binaryclass.test[, binaryclass.target] = NULL","object_name_linter"
"tests/testthat/test_classif_rotationForest.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_rotationForest.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_rpart.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_rpart.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_RRF.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_classif_RRF.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = p2","object_name_linter"
"tests/testthat/test_classif_sparseLDA.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = sparseLDA:::predict.sda(m,","object_name_linter"
"tests/testthat/test_classif_sparseLDA.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = sparseLDA:::predict.sda(m,","object_name_linter"
"tests/testthat/test_classif_svm.R",32,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m1, newdata = multiclass.test)","object_name_linter"
"tests/testthat/test_classif_svm.R",33,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = predict(m2, newdata = multiclass.test,","object_name_linter"
"tests/testthat/test_classif_xgboost.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = factor(as.numeric(pred > 0.5),","object_name_linter"
"tests/testthat/test_classif_xgboost.R",49,7,"style","Variable and function name style should be snake_case or CamelCase.","      old.probs.list[[i]] = y[, 1]","object_name_linter"
"tests/testthat/test_classif_xgboost.R",51,7,"style","Variable and function name style should be snake_case or CamelCase.","      old.probs.list[[i]] = 1 - pred","object_name_linter"
"tests/testthat/test_cluster_cmeans.R",19,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_Cobweb.R",16,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_dbscan.R",15,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_EM.R",18,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_FarthestFirst.R",17,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_kkmeans.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_kmeans.R",19,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_MiniBatchKmeans.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_SimpleKMeans.R",17,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_cluster_XMeans.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_featsel_generateFilterValuesData.R",16,3,"style","Variable and function name style should be snake_case or CamelCase.","  binaryclass.task.cp$env = NULL","object_name_linter"
"tests/testthat/test_learners_all_classif.R",90,3,"style","Variable and function name style should be snake_case or CamelCase.","  min.task = makeClassifTask(""oneCol"", data.frame(","object_name_linter"
"tests/testthat/test_learners_all_regr.R",71,3,"style","Variable and function name style should be snake_case or CamelCase.","  min.task = makeRegrTask(""oneCol"", data.frame(x = 1:10, y = 1:10),","object_name_linter"
"tests/testthat/test_learners_all_surv.R",12,3,"style","Variable and function name style should be snake_case or CamelCase.","  sub.task = subsetTask(surv.task, subset = c(1:70),","object_name_linter"
"tests/testthat/test_multilabel_cforest.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = data.frame(p2)","object_name_linter"
"tests/testthat/test_multilabel_randomForestSRC.R",19,7,"style","Variable and function name style should be snake_case or CamelCase.","      multilabel.train[j] = factor(multilabel.train[[j]],","object_name_linter"
"tests/testthat/test_multilabel_randomForestSRC.R",21,7,"style","Variable and function name style should be snake_case or CamelCase.","      multilabel.test[j] = factor(multilabel.test[[j]],","object_name_linter"
"tests/testthat/test_multilabel_randomForestSRC.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.data.frame(lapply(p$classOutput,","object_name_linter"
"tests/testthat/test_multilabel_randomForestSRC.R",32,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.probs.list[[i]] = as.data.frame(lapply(p$classOutput,","object_name_linter"
"tests/testthat/test_regr_bartMachine.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, new_data = regr.test[, xind])","object_name_linter"
"tests/testthat/test_regr_bcart.R",15,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(df, function(x) class(x))","object_name_linter"
"tests/testthat/test_regr_bcart.R",16,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"tests/testthat/test_regr_bcart.R",33,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, XX = test, pred.n = FALSE)$ZZ.km","object_name_linter"
"tests/testthat/test_regr_bgp.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m,","object_name_linter"
"tests/testthat/test_regr_bgpllm.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m,","object_name_linter"
"tests/testthat/test_regr_blm.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m,","object_name_linter"
"tests/testthat/test_regr_brnn.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_bst.R",29,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, regr.num.test[, xind])","object_name_linter"
"tests/testthat/test_regr_btgp.R",13,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(df, function(x) class(x))","object_name_linter"
"tests/testthat/test_regr_btgp.R",14,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"tests/testthat/test_regr_btgp.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, XX = test, pred.n = FALSE)$ZZ.km","object_name_linter"
"tests/testthat/test_regr_btgpllm.R",12,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(df, function(x) class(x))","object_name_linter"
"tests/testthat/test_regr_btgpllm.R",13,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"tests/testthat/test_regr_btgpllm.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, XX = test, pred.n = FALSE)$ZZ.km","object_name_linter"
"tests/testthat/test_regr_btlm.R",16,3,"style","Variable and function name style should be snake_case or CamelCase.","  col.types = vcapply(df, function(x) class(x))","object_name_linter"
"tests/testthat/test_regr_btlm.R",17,3,"style","Variable and function name style should be snake_case or CamelCase.","  factor.ind = (col.types == ""factor"")","object_name_linter"
"tests/testthat/test_regr_btlm.R",34,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, XX = test, pred.n = FALSE)$ZZ.km","object_name_linter"
"tests/testthat/test_regr_cforest.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.vector(predict(m, newdata = regr.test))","object_name_linter"
"tests/testthat/test_regr_crs.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = pred","object_name_linter"
"tests/testthat/test_regr_ctree.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_cubist.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_cvglmnet.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_earth.R",18,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, newdata = regr.test)[, 1]","object_name_linter"
"tests/testthat/test_regr_evtree.R",18,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.vector(predict(m, newdata = regr.test))","object_name_linter"
"tests/testthat/test_regr_extraTrees.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, x.test)","object_name_linter"
"tests/testthat/test_regr_FDboost.R",17,9,"style","Variable and function name style should be snake_case or CamelCase.","  names(fd.grids) = fdns","object_name_linter"
"tests/testthat/test_regr_fnn.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list1[[i]] = do.call(FNN::knn.reg, pars)$pred","object_name_linter"
"tests/testthat/test_regr_frbs.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_gamboost.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = suppressWarnings(as.vector(predict(m,","object_name_linter"
"tests/testthat/test_regr_gamboost.R",47,3,"style","Variable and function name style should be snake_case or CamelCase.","  new.regr.df[, regr.target] = as.integer(floor(new.regr.df[, regr.target]))","object_name_linter"
"tests/testthat/test_regr_gamboost.R",48,3,"style","Variable and function name style should be snake_case or CamelCase.","  new.regr.df[, ""chas""] = NULL","object_name_linter"
"tests/testthat/test_regr_gamboost.R",68,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = suppressWarnings(as.vector(predict(m,","object_name_linter"
"tests/testthat/test_regr_gausspr.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p[, 1]","object_name_linter"
"tests/testthat/test_regr_gbm.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_gbm.R",27,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list[[4]]$distribution = ""quantile""","object_name_linter"
"tests/testthat/test_regr_gbm.R",28,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list[[4]]$alpha = 0.2","object_name_linter"
"tests/testthat/test_regr_glm.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_glm.R",25,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list[[4]]$family = ""Gamma""","object_name_linter"
"tests/testthat/test_regr_glm.R",27,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list[[5]]$family = ""gaussian""","object_name_linter"
"tests/testthat/test_regr_glmboost.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.vector(predict(m, newdata = regr.test))","object_name_linter"
"tests/testthat/test_regr_glmboost.R",40,3,"style","Variable and function name style should be snake_case or CamelCase.","  new.regr.df[, regr.target] = as.integer(floor(new.regr.df[, regr.target]))","object_name_linter"
"tests/testthat/test_regr_glmboost.R",59,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.vector(predict(m, newdata = new.regr.test))","object_name_linter"
"tests/testthat/test_regr_glmnet.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, as.matrix(newx), s = s)[, 1]","object_name_linter"
"tests/testthat/test_regr_glmnet.R",38,3,"style","Variable and function name style should be snake_case or CamelCase.","  test.dat$chas = as.numeric(test.dat$chas)","object_name_linter"
"tests/testthat/test_regr_GPfit.R",11,12,"style","Variable and function name style should be snake_case or CamelCase.","  colnames(gpfit.test.df) = c(""x1"", ""x2"", ""y"")","object_name_linter"
"tests/testthat/test_regr_h2odeeplearning.R",15,3,"style","Variable and function name style should be snake_case or CamelCase.","  debug.seed = getOption(""mlr.debug.seed"")","object_name_linter"
"tests/testthat/test_regr_h2odeeplearning.R",30,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.data.frame(p)[, 1L]","object_name_linter"
"tests/testthat/test_regr_h2ogbm.R",46,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.data.frame(p)[, 1L]","object_name_linter"
"tests/testthat/test_regr_h2oglm.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.data.frame(p)[, 1L]","object_name_linter"
"tests/testthat/test_regr_h2orandomForest.R",13,3,"style","Variable and function name style should be snake_case or CamelCase.","  debug.seed = getOption(""mlr.debug.seed"")","object_name_linter"
"tests/testthat/test_regr_h2orandomForest.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.data.frame(p)[, 1L]","object_name_linter"
"tests/testthat/test_regr_IBk.R",19,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_kknn.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_km.R",23,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = DiceKriging::predict(m, newdata = des2,","object_name_linter"
"tests/testthat/test_regr_ksvm.R",27,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p[, 1]","object_name_linter"
"tests/testthat/test_regr_laGP.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = do.call(laGP::aGP, pars)$mean","object_name_linter"
"tests/testthat/test_regr_LiblineaRL2L1SVR.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p$predictions","object_name_linter"
"tests/testthat/test_regr_LiblineaRL2L2SVR.R",33,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p$predictions","object_name_linter"
"tests/testthat/test_regr_mob.R",38,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_nodeHarvest.R",19,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(m, regr.df[-regr.train.inds, ])","object_name_linter"
"tests/testthat/test_regr_penalized.R",35,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p[, ""mu""]","object_name_linter"
"tests/testthat/test_regr_plsr.R",18,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = pls:::predict.mvr(m, newdata = regr.test,","object_name_linter"
"tests/testthat/test_regr_randomForest.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_randomForestSRC.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_ranger.R",19,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p$predictions","object_name_linter"
"tests/testthat/test_regr_ranger.R",42,5,"style","Variable and function name style should be snake_case or CamelCase.","    parset.list[[i]] = c(parset, predict.type = ""se"")","object_name_linter"
"tests/testthat/test_regr_ranger.R",53,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = cbind(p$predictions, p$se)","object_name_linter"
"tests/testthat/test_regr_rknn.R",26,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_rknn.R",32,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list[[9]] = NULL","object_name_linter"
"tests/testthat/test_regr_rpart.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_RRF.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_svm.R",21,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_regr_xgboost.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = predict(model,","object_name_linter"
"tests/testthat/test_surv_cforest.R",24,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = -1 * predict(m, newdata = surv.test)","object_name_linter"
"tests/testthat/test_surv_coxph.R",20,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_surv_cvglmnet.R",31,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.numeric(p)","object_name_linter"
"tests/testthat/test_surv_gamboost.R",36,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = drop(p)","object_name_linter"
"tests/testthat/test_surv_gbm.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_surv_glmboost.R",33,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = drop(p)","object_name_linter"
"tests/testthat/test_surv_glmnet.R",32,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = as.numeric(p)","object_name_linter"
"tests/testthat/test_surv_randomForestSRC.R",25,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = drop(p)","object_name_linter"
"tests/testthat/test_surv_ranger.R",28,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = rowMeans(p$chf)","object_name_linter"
"tests/testthat/test_surv_rpart.R",22,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"tests/testthat/test_tune_tuneGrid.R",30,3,"style","Variable and function name style should be snake_case or CamelCase.","  op1.2$C = as.numeric(as.character(op1.2$C))","object_name_linter"
"tests/testthat/test_tune_tuneGrid.R",31,3,"style","Variable and function name style should be snake_case or CamelCase.","  op1.2$sigma = as.numeric(as.character(op1.2$sigma))","object_name_linter"
"vignettes/tutorial/_mlr-tutorial_intro.Rmd",42,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = sample(n, size = 2 / 3 * n)","object_name_linter"
"vignettes/tutorial/_mlr-tutorial_intro.Rmd",43,1,"style","Variable and function name style should be snake_case or CamelCase.","test.set = setdiff(1:n, train.set)","object_name_linter"
"vignettes/tutorial/advanced_tune.Rmd",52,1,"style","Variable and function name style should be snake_case or CamelCase.","base.learners = list(","object_name_linter"
"vignettes/tutorial/bagging.Rmd",38,1,"style","Variable and function name style should be snake_case or CamelCase.","bag.lrn = makeBaggingWrapper(lrn, bw.iters = 50, bw.replace = TRUE,","object_name_linter"
"vignettes/tutorial/bagging.Rmd",69,1,"style","Variable and function name style should be snake_case or CamelCase.","bag.lrn = setPredictType(bag.lrn, predict.type = ""prob"")","object_name_linter"
"vignettes/tutorial/bagging.Rmd",80,1,"style","Variable and function name style should be snake_case or CamelCase.","train.inds = seq(1, n, 3)","object_name_linter"
"vignettes/tutorial/bagging.Rmd",81,1,"style","Variable and function name style should be snake_case or CamelCase.","test.inds = setdiff(1:n, train.inds)","object_name_linter"
"vignettes/tutorial/bagging.Rmd",83,1,"style","Variable and function name style should be snake_case or CamelCase.","bag.lrn = makeBaggingWrapper(lrn)","object_name_linter"
"vignettes/tutorial/bagging.Rmd",84,1,"style","Variable and function name style should be snake_case or CamelCase.","bag.lrn = setPredictType(bag.lrn, predict.type = ""se"")","object_name_linter"
"vignettes/tutorial/benchmark_experiments.Rmd",316,1,"style","Variable and function name style should be snake_case or CamelCase.","ring.task = convertMLBenchObjToTask(""mlbench.ringnorm"", n = 600)","object_name_linter"
"vignettes/tutorial/benchmark_experiments.Rmd",317,1,"style","Variable and function name style should be snake_case or CamelCase.","wave.task = convertMLBenchObjToTask(""mlbench.waveform"", n = 600)","object_name_linter"
"vignettes/tutorial/benchmark_experiments.Rmd",334,1,"style","Variable and function name style should be snake_case or CamelCase.","ring.task = convertMLBenchObjToTask(""mlbench.ringnorm"", n = 600)","object_name_linter"
"vignettes/tutorial/benchmark_experiments.Rmd",335,1,"style","Variable and function name style should be snake_case or CamelCase.","wave.task = convertMLBenchObjToTask(""mlbench.waveform"", n = 600)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",92,1,"style","Variable and function name style should be snake_case or CamelCase.","credit.task = makeClassifTask(data = GermanCredit, target = ""Class"")","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",93,1,"style","Variable and function name style should be snake_case or CamelCase.","credit.task = removeConstantFeatures(credit.task)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",157,1,"style","Variable and function name style should be snake_case or CamelCase.","pred.th = setThreshold(pred, th)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",166,1,"style","Variable and function name style should be snake_case or CamelCase.","credit.costs = makeCostMeasure(id = ""credit.costs"", name = ""Credit costs"", costs = costs,","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",249,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneThreshold(pred = r$pred, measure = credit.costs)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",267,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneThreshold(pred = r$pred, measure = credit.costs)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",396,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneParams(lrn, credit.task, resampling = rin, par.set = ps,","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",411,1,"style","Variable and function name style should be snake_case or CamelCase.","credit.task.over = oversample(credit.task, rate = w, cl = ""Bad"")","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",467,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneParams(lrn, credit.task, rin, par.set = ps, measures = list(credit.costs, mmce),","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",488,1,"style","Variable and function name style should be snake_case or CamelCase.","wf.task = makeClassifTask(id = ""waveform"", data = as.data.frame(df), target = ""classes"")","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",495,1,"style","Variable and function name style should be snake_case or CamelCase.","wf.costs = makeCostMeasure(id = ""wf.costs"", name = ""Waveform costs"", costs = costs,","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",523,1,"style","Variable and function name style should be snake_case or CamelCase.","pred.th = setThreshold(r$pred, threshold = th)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",547,1,"style","Variable and function name style should be snake_case or CamelCase.","pred.th = setThreshold(r$pred, threshold = th)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",565,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneThreshold(pred = r$pred, measure = wf.costs)","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",589,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = tuneParams(lrn, wf.task, resampling = rin, par.set = ps,","object_name_linter"
"vignettes/tutorial/cost_sensitive_classif.Rmd",610,1,"style","Variable and function name style should be snake_case or CamelCase.","costsens.task = makeCostSensTask(id = ""iris"", data = df, cost = cost)","object_name_linter"
"vignettes/tutorial/create_filter.Rmd",125,1,"style","Variable and function name style should be snake_case or CamelCase.","iris.task.filtered = filterFeatures(iris.task, method = ""nonsense.filter"", abs = 2)","object_name_linter"
"vignettes/tutorial/create_imputation.Rmd",32,1,"style","Variable and function name style should be snake_case or CamelCase.","showFunctionDef = function(fun, name = sub(""^[^:]*:+"", """", deparse(substitute(fun)))) {","object_name_linter"
"vignettes/tutorial/create_imputation.Rmd",63,1,"style","Variable and function name style should be snake_case or CamelCase.","imputeLOCF = function() {","object_name_linter"
"vignettes/tutorial/create_imputation.Rmd",69,7,"style","Variable and function name style should be snake_case or CamelCase.","      lastValue = which(dind == 1) # position of the last observed value previous to NA","object_name_linter"
"vignettes/tutorial/create_imputation.Rmd",70,7,"style","Variable and function name style should be snake_case or CamelCase.","      lastNA = which(dind == -1) # position of the last of potentially several consecutive NA's","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",121,1,"style","Variable and function name style should be snake_case or CamelCase.","showFunctionDef = function(fun, name = gsub(""^[^:]*:+"", """", deparse(substitute(fun)))) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",129,1,"style","Variable and function name style should be snake_case or CamelCase.","makeRLearner.classif.lda = function() {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",159,58,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","function(.learner, .task, .subset, .weights = NULL, ...) { }","brace_linter"
"vignettes/tutorial/create_learner.Rmd",159,60,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","function(.learner, .task, .subset, .weights = NULL, ...) { }","brace_linter"
"vignettes/tutorial/create_learner.Rmd",173,1,"style","Variable and function name style should be snake_case or CamelCase.","trainLearner.classif.lda = function(.learner, .task, .subset, .weights = NULL, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",186,43,"style","Opening curly braces should never go on their own line and should always be followed by a new line.","function(.learner, .model, .newdata, ...) { }","brace_linter"
"vignettes/tutorial/create_learner.Rmd",186,45,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","function(.learner, .model, .newdata, ...) { }","brace_linter"
"vignettes/tutorial/create_learner.Rmd",199,1,"style","Variable and function name style should be snake_case or CamelCase.","predictLearner.classif.lda = function(.learner, .model, .newdata, predict.method = ""plug-in"", ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",218,1,"style","Variable and function name style should be snake_case or CamelCase.","makeRLearner.regr.earth = function() {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",247,1,"style","Variable and function name style should be snake_case or CamelCase.","trainLearner.regr.earth = function(.learner, .task, .subset, .weights = NULL, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",254,1,"style","Variable and function name style should be snake_case or CamelCase.","predictLearner.regr.earth = function(.learner, .model, .newdata, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",273,1,"style","Variable and function name style should be snake_case or CamelCase.","makeRLearner.surv.coxph = function() {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",301,1,"style","Variable and function name style should be snake_case or CamelCase.","trainLearner.surv.coxph = function(.learner, .task, .subset, .weights = NULL, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",317,1,"style","Variable and function name style should be snake_case or CamelCase.","predictLearner.surv.coxph = function(.learner, .model, .newdata, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",321,5,"style","Variable and function name style should be snake_case or CamelCase.","    surv.range = getTrainingInfo(.model$learner.model)$surv.range","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",342,1,"style","Variable and function names should not be longer than 30 characters.","makeRLearner.cluster.FarthestFirst = function() {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",342,1,"style","Variable and function name style should be snake_case or CamelCase.","makeRLearner.cluster.FarthestFirst = function() {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",360,1,"style","Variable and function names should not be longer than 30 characters.","trainLearner.cluster.FarthestFirst = function(.learner, .task, .subset, .weights = NULL, ...) {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",360,1,"style","Variable and function name style should be snake_case or CamelCase.","trainLearner.cluster.FarthestFirst = function(.learner, .task, .subset, .weights = NULL, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",367,1,"style","Variable and function names should not be longer than 30 characters.","predictLearner.cluster.FarthestFirst = function(.learner, .model, .newdata, ...) {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",367,1,"style","Variable and function name style should be snake_case or CamelCase.","predictLearner.cluster.FarthestFirst = function(.learner, .model, .newdata, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",390,1,"style","Variable and function name style should be snake_case or CamelCase.","makeRLearner.multilabel.rFerns = function() {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",407,1,"style","Variable and function name style should be snake_case or CamelCase.","trainLearner.multilabel.rFerns = function(.learner, .task, .subset, .weights = NULL, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",414,1,"style","Variable and function names should not be longer than 30 characters.","predictLearner.multilabel.rFerns = function(.learner, .model, .newdata, ...) {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",414,1,"style","Variable and function name style should be snake_case or CamelCase.","predictLearner.multilabel.rFerns = function(.learner, .model, .newdata, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",435,1,"style","Variable and function names should not be longer than 30 characters.","getFeatureImportanceLearner.classif.rpart = function(.learner, .model, ...) {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",435,1,"style","Variable and function name style should be snake_case or CamelCase.","getFeatureImportanceLearner.classif.rpart = function(.learner, .model, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",444,1,"style","Variable and function names should not be longer than 30 characters.","getFeatureImportanceLearner.classif.randomForestSRC = function(.learner, .model, ...) {","object_length_linter"
"vignettes/tutorial/create_learner.Rmd",444,1,"style","Variable and function name style should be snake_case or CamelCase.","getFeatureImportanceLearner.classif.randomForestSRC = function(.learner, .model, ...) {","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",560,3,"style","Variable and function name style should be snake_case or CamelCase.","  parset.list = list(","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",568,3,"style","Variable and function name style should be snake_case or CamelCase.","  old.predicts.list = list()","object_name_linter"
"vignettes/tutorial/create_learner.Rmd",570,13,"warning","1:length(...) is likely to be wrong in the empty edge case. Use seq_along() instead.","  for (i in 1:length(parset.list)) {","seq_linter"
"vignettes/tutorial/create_learner.Rmd",578,5,"style","Variable and function name style should be snake_case or CamelCase.","    old.predicts.list[[i]] = p","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",141,1,"style","Variable and function name style should be snake_case or CamelCase.","my.mmce.fun = function(task, model, pred, feats, extra.args) {","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",141,50,"style","Variable and function name style should be snake_case or CamelCase.","my.mmce.fun = function(task, model, pred, feats, extra.args) {","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",147,1,"style","Variable and function name style should be snake_case or CamelCase.","my.mmce = makeMeasure(","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",182,1,"style","Variable and function name style should be snake_case or CamelCase.","my.costs = makeCostMeasure(","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",214,1,"style","Variable and function name style should be snake_case or CamelCase.","my.range.aggr = makeAggregation(id = ""test.range"", name = ""Test Range"",","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",216,24,"style","Variable and function name style should be snake_case or CamelCase.","  fun = function(task, perf.test, perf.train, measure, group, pred) {","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",216,35,"style","Variable and function name style should be snake_case or CamelCase.","  fun = function(task, perf.test, perf.train, measure, group, pred) {","object_name_linter"
"vignettes/tutorial/create_measure.Rmd",244,1,"style","Variable and function name style should be snake_case or CamelCase.","perf.data = as.data.frame(res$opt.path)","object_name_linter"
"vignettes/tutorial/example_tasks.Rmd",14,1,"style","Variable and function name style should be snake_case or CamelCase.","urlMlrFunctions = ""https://mlr-org.github.io/mlr/reference/""","object_name_linter"
"vignettes/tutorial/example_tasks.Rmd",27,1,"style","Variable and function name style should be snake_case or CamelCase.","linkTask = function(x) {","object_name_linter"
"vignettes/tutorial/example_tasks.Rmd",28,47,"warning","no visible binding for global variable ‘urlMlrFunctions’","  collapse(sprintf(""[%1$s](%2$s%1$s%3$s)"", x, urlMlrFunctions, ext), sep = ""<br />"")","object_usage_linter"
"vignettes/tutorial/example_tasks.Rmd",28,64,"warning","no visible binding for global variable ‘ext’","  collapse(sprintf(""[%1$s](%2$s%1$s%3$s)"", x, urlMlrFunctions, ext), sep = ""<br />"")","object_usage_linter"
"vignettes/tutorial/feature_selection.Rmd",99,1,"style","Variable and function name style should be snake_case or CamelCase.","filtered.task = filterFeatures(iris.task, method = ""FSelectorRcpp_information.gain"", abs = 2)","object_name_linter"
"vignettes/tutorial/feature_selection.Rmd",102,1,"style","Variable and function name style should be snake_case or CamelCase.","filtered.task = filterFeatures(iris.task, fval = fv, perc = 0.25)","object_name_linter"
"vignettes/tutorial/feature_selection.Rmd",105,1,"style","Variable and function name style should be snake_case or CamelCase.","filtered.task = filterFeatures(iris.task, fval = fv, threshold = 0.5)","object_name_linter"
"vignettes/tutorial/feature_selection.Rmd",325,1,"style","Variable and function name style should be snake_case or CamelCase.","out.rdesc = makeResampleDesc(""CV"", iters = 5)","object_name_linter"
"vignettes/tutorial/filter_methods.Rmd",14,1,"style","Variable and function name style should be snake_case or CamelCase.","urlContribPackages = ""https://cran.r-project.org/package=""","object_name_linter"
"vignettes/tutorial/filter_methods.Rmd",29,1,"style","Variable and function name style should be snake_case or CamelCase.","linkPkg = function(x) {","object_name_linter"
"vignettes/tutorial/filter_methods.Rmd",30,63,"warning","no visible binding for global variable ‘urlContribPackages’","  ifelse(x == """", """", collapse(sprintf(""[%1$s](%2$s%1$s)"", x, urlContribPackages), sep = ""<br />""))","object_usage_linter"
"vignettes/tutorial/filter_methods.Rmd",45,121,"style","Lines should not be more than 120 characters.","pandoc.table(dfnd, style = ""rmarkdown"", split.tables = Inf, split.cells = Inf, emphasize.rownames = FALSE, justify = just)","line_length_linter"
"vignettes/tutorial/functional_data.Rmd",118,1,"style","Variable and function name style should be snake_case or CamelCase.","fd.features = list(""UVVIS"" = 3:136, ""NIR"" = 137:367)","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",157,1,"style","Variable and function name style should be snake_case or CamelCase.","knn.lrn = makeLearner(""classif.fdausc.knn"")","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",203,1,"style","Variable and function name style should be snake_case or CamelCase.","rpart.lrn = makeLearner(""regr.rpart"")","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",230,1,"style","Variable and function name style should be snake_case or CamelCase.","feat.methods = list(""UVVIS"" = extractFDAFourier(), ""NIR"" = extractFDAFPCA())","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",250,1,"style","Variable and function name style should be snake_case or CamelCase.","feat.methods = list(""UVVIS"" = extractFDAWavelets(filter = ""haar""))","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",251,1,"style","Variable and function name style should be snake_case or CamelCase.","task.w = extractFDAFeatures(tsk1, feat.methods = feat.methods)","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",254,1,"style","Variable and function name style should be snake_case or CamelCase.","feat.methods = list(""NIR"" = extractFDAWavelets(filter = ""d4""))","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",255,1,"style","Variable and function name style should be snake_case or CamelCase.","task.wd4 = extractFDAFeatures(tsk1, feat.methods = feat.methods)","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",269,1,"style","Variable and function name style should be snake_case or CamelCase.","feat.methods = list(""NIR"" = extractFDAFourier(trafo.coeff = ""amplitude""),","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",271,1,"style","Variable and function name style should be snake_case or CamelCase.","task.fourier = extractFDAFeatures(tsk1, feat.methods = feat.methods)","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",283,1,"style","Variable and function name style should be snake_case or CamelCase.","feat.methods = list(""NIR"" = extractFDAFourier())","object_name_linter"
"vignettes/tutorial/functional_data.Rmd",284,1,"style","Variable and function name style should be snake_case or CamelCase.","wrapped.lrn = makeExtractFDAFeatsWrapper(""regr.rpart"", feat.methods = feat.methods)","object_name_linter"
"vignettes/tutorial/handling_of_spatial_data.Rmd",90,1,"style","Variable and function name style should be snake_case or CamelCase.","learner.rf = makeLearner(""classif.ranger"", predict.type = ""prob"")","object_name_linter"
"vignettes/tutorial/handling_of_spatial_data.Rmd",108,1,"style","Variable and function name style should be snake_case or CamelCase.","learner.rf = makeLearner(""classif.ranger"", predict.type = ""prob"")","object_name_linter"
"vignettes/tutorial/hyperpar_tuning_effects.Rmd",75,43,"style","Use TRUE instead of the symbol T.","generateHyperParsEffectData(res, trafo = T, include.diagnostics = FALSE)","T_and_F_symbol_linter"
"vignettes/tutorial/hyperpar_tuning_effects.Rmd",86,43,"style","Use TRUE instead of the symbol T.","generateHyperParsEffectData(res, trafo = T, include.diagnostics = FALSE)","T_and_F_symbol_linter"
"vignettes/tutorial/hyperpar_tuning_effects.Rmd",114,43,"style","Use TRUE instead of the symbol T.","generateHyperParsEffectData(res, trafo = T, include.diagnostics = FALSE)","T_and_F_symbol_linter"
"vignettes/tutorial/hyperpar_tuning_effects.Rmd",126,43,"style","Use TRUE instead of the symbol T.","generateHyperParsEffectData(res, trafo = T, include.diagnostics = FALSE)","T_and_F_symbol_linter"
"vignettes/tutorial/impute.Rmd",104,1,"style","Variable and function name style should be snake_case or CamelCase.","airq.train = airq[1:100, ]","object_name_linter"
"vignettes/tutorial/impute.Rmd",105,1,"style","Variable and function name style should be snake_case or CamelCase.","airq.test = airq[-c(1:100), ]","object_name_linter"
"vignettes/tutorial/impute.Rmd",134,1,"style","Variable and function name style should be snake_case or CamelCase.","airq.test.imp = reimpute(airq.test, imp$desc)","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",14,1,"style","Variable and function name style should be snake_case or CamelCase.","urlContribPackages = urlBasePackages = ""http://www.rdocumentation.org/packages/""","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",14,22,"style","Variable and function name style should be snake_case or CamelCase.","urlContribPackages = urlBasePackages = ""http://www.rdocumentation.org/packages/""","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",31,1,"style","Variable and function name style should be snake_case or CamelCase.","linkPkg = function(x) {","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",34,7,"warning","no visible binding for global variable ‘urlBasePackages’","  if (urlBasePackages != urlContribPackages) {","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",34,26,"warning","no visible binding for global variable ‘urlContribPackages’","  if (urlBasePackages != urlContribPackages) {","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",35,18,"warning","no visible binding for global variable ‘baseR’","    ind = x %in% baseR","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",36,13,"warning","no visible binding for global variable ‘urlContribPackages’","    url = c(urlContribPackages, urlBasePackages)[ind + 1]","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",36,33,"warning","no visible binding for global variable ‘urlBasePackages’","    url = c(urlContribPackages, urlBasePackages)[ind + 1]","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",38,11,"warning","no visible binding for global variable ‘urlContribPackages’","    url = urlContribPackages","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",43,1,"style","Variable and function name style should be snake_case or CamelCase.","getTab = function(type) {","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",54,121,"style","Lines should not be more than 120 characters.","  cols = c(""class"", ""type"", ""package"", ""short.name"", ""name"", ""numerics"", ""factors"", ""ordered"", ""missings"", ""weights"", ""note"", ""installed"")","line_length_linter"
"vignettes/tutorial/integrated_learners.Rmd",57,3,"style","Variable and function name style should be snake_case or CamelCase.","  colNames = c(""Class / Short Name / Name"", ""Packages"", ""Num."", ""Fac."", ""Ord."", ""NAs"", ""Weights"", ""Props"", ""Note"")","object_name_linter"
"vignettes/tutorial/integrated_learners.Rmd",59,121,"style","Lines should not be more than 120 characters.","    col.types = c(""character"", ""character"", ""logical"", ""logical"", ""logical"", ""logical"", ""logical"", ""character"", ""character""))","line_length_linter"
"vignettes/tutorial/integrated_learners.Rmd",65,38,"warning","no visible binding for global variable ‘linkPkg’","  df$Packages = sapply(lrns$package, linkPkg)","object_usage_linter"
"vignettes/tutorial/integrated_learners.Rmd",74,1,"style","Variable and function name style should be snake_case or CamelCase.","makeTab = function(df) {","object_name_linter"
"vignettes/tutorial/learner.Rmd",39,1,"style","Variable and function name style should be snake_case or CamelCase.","classif.lrn = makeLearner(""classif.randomForest"", predict.type = ""prob"", fix.factors.prediction = TRUE)","object_name_linter"
"vignettes/tutorial/learner.Rmd",42,1,"style","Variable and function name style should be snake_case or CamelCase.","regr.lrn = makeLearner(""regr.gbm"", par.vals = list(n.trees = 500, interaction.depth = 3))","object_name_linter"
"vignettes/tutorial/learner.Rmd",45,1,"style","Variable and function name style should be snake_case or CamelCase.","surv.lrn = makeLearner(""surv.coxph"", id = ""cph"")","object_name_linter"
"vignettes/tutorial/learner.Rmd",48,1,"style","Variable and function name style should be snake_case or CamelCase.","cluster.lrn = makeLearner(""cluster.kmeans"", centers = 5)","object_name_linter"
"vignettes/tutorial/learner.Rmd",51,1,"style","Variable and function name style should be snake_case or CamelCase.","multilabel.lrn = makeLearner(""multilabel.rFerns"")","object_name_linter"
"vignettes/tutorial/learner.Rmd",142,1,"style","Variable and function name style should be snake_case or CamelCase.","surv.lrn = setLearnerId(surv.lrn, ""CoxModel"")","object_name_linter"
"vignettes/tutorial/learner.Rmd",146,1,"style","Variable and function name style should be snake_case or CamelCase.","classif.lrn = setPredictType(classif.lrn, ""response"")","object_name_linter"
"vignettes/tutorial/learner.Rmd",149,1,"style","Variable and function name style should be snake_case or CamelCase.","cluster.lrn = setHyperPars(cluster.lrn, centers = 4)","object_name_linter"
"vignettes/tutorial/learner.Rmd",152,1,"style","Variable and function name style should be snake_case or CamelCase.","regr.lrn = removeHyperPars(regr.lrn, c(""n.trees"", ""interaction.depth""))","object_name_linter"
"vignettes/tutorial/measures.Rmd",14,1,"style","Variable and function name style should be snake_case or CamelCase.","urlMlrFunctions = ""https://mlr-org.github.io/mlr/reference/""","object_name_linter"
"vignettes/tutorial/measures.Rmd",46,1,"style","Variable and function name style should be snake_case or CamelCase.","linkFct = function(x, y) {","object_name_linter"
"vignettes/tutorial/measures.Rmd",47,50,"warning","no visible binding for global variable ‘urlMlrFunctions’","  collapse(sprintf(""[%1$s](%3$s%2$s%4$s)"", x, y, urlMlrFunctions, ext), sep = ""<br />"")","object_usage_linter"
"vignettes/tutorial/measures.Rmd",47,67,"warning","no visible binding for global variable ‘ext’","  collapse(sprintf(""[%1$s](%3$s%2$s%4$s)"", x, y, urlMlrFunctions, ext), sep = ""<br />"")","object_usage_linter"
"vignettes/tutorial/measures.Rmd",54,1,"style","Variable and function name style should be snake_case or CamelCase.","getTab = function(type) {","object_name_linter"
"vignettes/tutorial/measures.Rmd",67,121,"style","Lines should not be more than 120 characters.","  cols = c(""ID / Name"", ""Minim."", ""Best"", ""Worst"", ""Multi"", ""Pred."", ""Truth"", ""Probs"", ""Model"", ""Task"", ""Feats"", ""Aggr."", ""Note"")","line_length_linter"
"vignettes/tutorial/measures.Rmd",69,121,"style","Lines should not be more than 120 characters.","    col.types = c(""character"", ""logical"", ""numeric"", ""numeric"", ""logical"", ""logical"", ""logical"", ""logical"", ""logical"", ""logical"", ""logical"", ""character"", ""character""))","line_length_linter"
"vignettes/tutorial/measures.Rmd",74,29,"warning","no visible global function definition for ‘linkFct’","    df[i, 1] = paste0(""**"", linkFct(mea$id, ""measures""), ""** <br />"", mea$name)","object_usage_linter"
"vignettes/tutorial/measures.Rmd",85,17,"warning","no visible global function definition for ‘linkFct’","    df[i, 12] = linkFct(mea$aggr$id, ""aggregations"")","object_usage_linter"
"vignettes/tutorial/measures.Rmd",86,17,"warning","no visible global function definition for ‘urls’","    df[i, 13] = urls(cn(mea$note))","object_usage_linter"
"vignettes/tutorial/measures.Rmd",86,22,"warning","no visible global function definition for ‘cn’","    df[i, 13] = urls(cn(mea$note))","object_usage_linter"
"vignettes/tutorial/measures.Rmd",89,121,"style","Lines should not be more than 120 characters.","  just = c(""left"", ""center"", ""right"", ""right"", ""center"", ""center"", ""center"", ""center"", ""center"", ""center"", ""center"", ""left"", ""left"")","line_length_linter"
"vignettes/tutorial/multilabel.Rmd",37,1,"style","Variable and function name style should be snake_case or CamelCase.","yeast.task = makeMultilabelTask(id = ""multi"", data = yeast, target = labels)","object_name_linter"
"vignettes/tutorial/multilabel.Rmd",55,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.rfsrc = makeLearner(""multilabel.randomForestSRC"")","object_name_linter"
"vignettes/tutorial/multilabel.Rmd",56,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.rFerns = makeLearner(""multilabel.rFerns"")","object_name_linter"
"vignettes/tutorial/multilabel.Rmd",68,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.br = makeLearner(""classif.rpart"", predict.type = ""prob"")","object_name_linter"
"vignettes/tutorial/multilabel.Rmd",69,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.br = makeMultilabelBinaryRelevanceWrapper(lrn.br)","object_name_linter"
"vignettes/tutorial/multilabel.Rmd",72,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.br2 = makeMultilabelBinaryRelevanceWrapper(""classif.rpart"")","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",145,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = getNestedTuneResultsOptPathDf(r)","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",150,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = getNestedTuneResultsOptPathDf(r)","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",265,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = lapply(r$extract, function(x) as.data.frame(x$opt.path))","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",270,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = lapply(r$extract, function(x) as.data.frame(x$opt.path))","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",363,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = lapply(res, function(x) as.data.frame(x$opt.path))","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",458,1,"style","Variable and function name style should be snake_case or CamelCase.","tune.res = getBMRTuneResults(res,","object_name_linter"
"vignettes/tutorial/nested_resampling.Rmd",514,1,"style","Variable and function name style should be snake_case or CamelCase.","opt.paths = lapply(feats, function(x) as.data.frame(x$opt.path))","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",64,1,"style","Variable and function name style should be snake_case or CamelCase.","data.imbal.train = rbind(","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",69,1,"style","Variable and function name style should be snake_case or CamelCase.","task.over = oversample(task, rate = 8)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",70,1,"style","Variable and function name style should be snake_case or CamelCase.","task.under = undersample(task, rate = 1 / 8)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",87,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.over = train(lrn, task.over)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",88,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.under = train(lrn, task.under)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",89,1,"style","Variable and function name style should be snake_case or CamelCase.","data.imbal.test = rbind(","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",113,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.over = makeOversampleWrapper(lrn, osw.rate = 8)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",114,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.under = makeUndersampleWrapper(lrn, usw.rate = 1 / 8)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",116,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.over = train(lrn.over, task)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",117,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.under = train(lrn.under, task)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",140,1,"style","Variable and function name style should be snake_case or CamelCase.","task.smote = smote(task, rate = 8, nn = 5)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",149,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.smote = makeSMOTEWrapper(lrn, sw.rate = 8, sw.nn = 5)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",150,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.smote = train(lrn.smote, task)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",170,1,"style","Variable and function name style should be snake_case or CamelCase.","obw.lrn = makeOverBaggingWrapper(lrn, obw.rate = 8, obw.iters = 3)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",186,1,"style","Variable and function name style should be snake_case or CamelCase.","obw.lrn = setPredictType(obw.lrn, ""prob"")","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",196,1,"style","Variable and function name style should be snake_case or CamelCase.","obw.lrn = makeOverBaggingWrapper(lrn, obw.rate = 8, obw.iters = 3)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",203,1,"style","Variable and function name style should be snake_case or CamelCase.","obw.lrn = setPredictType(obw.lrn, ""prob"")","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",317,1,"style","Variable and function name style should be snake_case or CamelCase.","wcw.lrn = makeWeightedClassesWrapper(lrn, wcw.weight = 0.01)","object_name_linter"
"vignettes/tutorial/over_and_undersampling.Rmd",328,1,"style","Variable and function name style should be snake_case or CamelCase.","wcw.lrn = makeWeightedClassesWrapper(lrn, wcw.weight = 0.01)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",66,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.classif = makeLearner(""classif.ksvm"", predict.type = ""prob"")","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",67,1,"style","Variable and function name style should be snake_case or CamelCase.","fit.classif = train(lrn.classif, iris.task)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",80,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.lst = generatePartialDependenceData(fit.classif, iris.task, c(""Petal.Width"", ""Petal.Length""), FALSE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",87,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.int = generatePartialDependenceData(fit.classif, iris.task, c(""Petal.Width"", ""Petal.Length""), TRUE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",104,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.regr = makeLearner(""regr.ksvm"")","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",105,1,"style","Variable and function name style should be snake_case or CamelCase.","fit.regr = train(lrn.regr, bh.task)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",106,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.regr = generatePartialDependenceData(fit.regr, bh.task, ""lstat"", fun = median)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",111,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.ci = generatePartialDependenceData(fit.regr, bh.task, ""lstat"",","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",117,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.classif = generatePartialDependenceData(fit.classif, iris.task, ""Petal.Length"", fun = median)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",126,1,"style","Variable and function name style should be snake_case or CamelCase.","fit.se = train(makeLearner(""regr.randomForest"", predict.type = ""se""), bh.task)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",127,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.se = generatePartialDependenceData(fit.se, bh.task, c(""lstat"", ""crim""))","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",137,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.ind.regr = generatePartialDependenceData(fit.regr, bh.task, ""lstat"", individual = TRUE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",146,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.ind.classif = generatePartialDependenceData(fit.classif, iris.task, ""Petal.Length"", individual = TRUE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",155,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.regr.der = generatePartialDependenceData(fit.regr, bh.task, ""lstat"", derivative = TRUE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",160,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.regr.der.ind = generatePartialDependenceData(fit.regr, bh.task, ""lstat"", derivative = TRUE,","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",166,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.classif.der = generatePartialDependenceData(fit.classif, iris.task, ""Petal.Width"", derivative = TRUE)","object_name_linter"
"vignettes/tutorial/partial_dependence.Rmd",171,1,"style","Variable and function name style should be snake_case or CamelCase.","pd.classif.der.ind = generatePartialDependenceData(fit.classif, iris.task, ""Petal.Width"", derivative = TRUE,","object_name_linter"
"vignettes/tutorial/predict.Rmd",36,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = seq(1, n, by = 2)","object_name_linter"
"vignettes/tutorial/predict.Rmd",37,1,"style","Variable and function name style should be snake_case or CamelCase.","test.set = seq(2, n, by = 2)","object_name_linter"
"vignettes/tutorial/predict.Rmd",41,1,"style","Variable and function name style should be snake_case or CamelCase.","task.pred = predict(mod, task = bh.task, subset = test.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",47,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = seq(1, n, by = 2)","object_name_linter"
"vignettes/tutorial/predict.Rmd",48,1,"style","Variable and function name style should be snake_case or CamelCase.","test.set = seq(2, n, by = 2)","object_name_linter"
"vignettes/tutorial/predict.Rmd",52,1,"style","Variable and function name style should be snake_case or CamelCase.","task.pred = predict(mod, task = bh.task, subset = test.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",77,1,"style","Variable and function name style should be snake_case or CamelCase.","iris.train = iris[seq(1, n, by = 2), -5]","object_name_linter"
"vignettes/tutorial/predict.Rmd",78,1,"style","Variable and function name style should be snake_case or CamelCase.","iris.test = iris[seq(2, n, by = 2), -5]","object_name_linter"
"vignettes/tutorial/predict.Rmd",82,1,"style","Variable and function name style should be snake_case or CamelCase.","newdata.pred = predict(mod, newdata = iris.test)","object_name_linter"
"vignettes/tutorial/predict.Rmd",88,1,"style","Variable and function name style should be snake_case or CamelCase.","iris.train = iris[seq(1, n, by = 2), -5]","object_name_linter"
"vignettes/tutorial/predict.Rmd",89,1,"style","Variable and function name style should be snake_case or CamelCase.","iris.test = iris[seq(2, n, by = 2), -5]","object_name_linter"
"vignettes/tutorial/predict.Rmd",93,1,"style","Variable and function name style should be snake_case or CamelCase.","newdata.pred = predict(mod, newdata = iris.test)","object_name_linter"
"vignettes/tutorial/predict.Rmd",156,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.lm = makeLearner(""regr.lm"", predict.type = ""se"")","object_name_linter"
"vignettes/tutorial/predict.Rmd",157,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.lm = train(lrn.lm, bh.task, subset = train.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",158,1,"style","Variable and function name style should be snake_case or CamelCase.","task.pred.lm = predict(mod.lm, task = bh.task, subset = test.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",163,1,"style","Variable and function name style should be snake_case or CamelCase.","lrn.lm = makeLearner(""regr.lm"", predict.type = ""se"")","object_name_linter"
"vignettes/tutorial/predict.Rmd",164,1,"style","Variable and function name style should be snake_case or CamelCase.","mod.lm = train(lrn.lm, bh.task, subset = train.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",165,1,"style","Variable and function name style should be snake_case or CamelCase.","task.pred.lm = predict(mod.lm, task = bh.task, subset = test.set)","object_name_linter"
"vignettes/tutorial/predict.Rmd",246,1,"style","Variable and function name style should be snake_case or CamelCase.","conf.matrix = calculateConfusionMatrix(pred, relative = TRUE)","object_name_linter"
"vignettes/tutorial/preproc.Rmd",376,1,"style","Variable and function name style should be snake_case or CamelCase.","makePreprocWrapperScale = function(learner, center = TRUE, scale = TRUE) {","object_name_linter"
"vignettes/tutorial/resample.Rmd",182,121,"style","Lines should not be more than 120 characters.","## Aggregated Result: mmce.test.mean=0.2904762,fpr.test.mean=0.2932609,fnr.test.mean=0.2615067,timetrain.test.mean=0.0128000","line_length_linter"
"vignettes/tutorial/resample.Rmd",207,121,"style","Lines should not be more than 120 characters.","## Aggr perf: mmce.test.mean=0.2904762,fpr.test.mean=0.2932609,fnr.test.mean=0.2615067,timetrain.test.mean=0.0128000,ber.test.mean=0.2773838,timepredict.test.mean=0.0032000","line_length_linter"
"vignettes/tutorial/resample.Rmd",346,1,"style","Variable and function name style should be snake_case or CamelCase.","predList = getRRPredictionList(r)","object_name_linter"
"vignettes/tutorial/resample.Rmd",351,1,"style","Variable and function name style should be snake_case or CamelCase.","predList = getRRPredictionList(r)","object_name_linter"
"vignettes/tutorial/resample.Rmd",635,1,"style","Variable and function name style should be snake_case or CamelCase.","r.lda = resample(""classif.lda"", iris.task, rin, show.info = FALSE)","object_name_linter"
"vignettes/tutorial/resample.Rmd",636,1,"style","Variable and function name style should be snake_case or CamelCase.","r.rpart = resample(""classif.rpart"", iris.task, rin, show.info = FALSE)","object_name_linter"
"vignettes/tutorial/resample.Rmd",693,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMedian = setAggregation(mse, test.median)","object_name_linter"
"vignettes/tutorial/resample.Rmd",694,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMin = setAggregation(mse, test.min)","object_name_linter"
"vignettes/tutorial/resample.Rmd",695,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMax = setAggregation(mse, test.max)","object_name_linter"
"vignettes/tutorial/resample.Rmd",704,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMedian = setAggregation(mse, test.median)","object_name_linter"
"vignettes/tutorial/resample.Rmd",705,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMin = setAggregation(mse, test.min)","object_name_linter"
"vignettes/tutorial/resample.Rmd",706,1,"style","Variable and function name style should be snake_case or CamelCase.","mseTestMax = setAggregation(mse, test.max)","object_name_linter"
"vignettes/tutorial/resample.Rmd",726,121,"style","Lines should not be more than 120 characters.","## Aggregated Result: mse.test.mean=24.0886607,mse.test.median=24.0782026,mse.test.min=18.6894718,mse.test.max=29.4983077","line_length_linter"
"vignettes/tutorial/resample.Rmd",748,1,"style","Variable and function name style should be snake_case or CamelCase.","mmceTrainMean = setAggregation(mmce, train.mean)","object_name_linter"
"vignettes/tutorial/resample.Rmd",777,1,"style","Variable and function name style should be snake_case or CamelCase.","mmceB632 = setAggregation(mmce, b632)","object_name_linter"
"vignettes/tutorial/resample.Rmd",778,1,"style","Variable and function name style should be snake_case or CamelCase.","mmceB632plus = setAggregation(mmce, b632plus)","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",65,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = sample(n, size = round(2 / 3 * n))","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",66,1,"style","Variable and function name style should be snake_case or CamelCase.","test.set = setdiff(seq_len(n), train.set)","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",160,1,"style","Variable and function name style should be snake_case or CamelCase.","rdesc.inner = makeResampleDesc(""Holdout"")","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",175,1,"style","Variable and function name style should be snake_case or CamelCase.","rdesc.outer = makeResampleDesc(""CV"", iters = 5)","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",247,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = sample(n, size = round(2 / 3 * n))","object_name_linter"
"vignettes/tutorial/roc_analysis.Rmd",248,1,"style","Variable and function name style should be snake_case or CamelCase.","test.set = setdiff(seq_len(n), train.set)","object_name_linter"
"vignettes/tutorial/task.Rmd",46,1,"style","Variable and function name style should be snake_case or CamelCase.","regr.task = makeRegrTask(id = ""bh"", data = BostonHousing, target = ""medv"")","object_name_linter"
"vignettes/tutorial/task.Rmd",65,1,"style","Variable and function name style should be snake_case or CamelCase.","classif.task = makeClassifTask(id = ""BreastCancer"", data = df, target = ""Class"")","object_name_linter"
"vignettes/tutorial/task.Rmd",77,1,"style","Variable and function name style should be snake_case or CamelCase.","classif.task = makeClassifTask(id = ""BreastCancer"", data = df, target = ""Class"", positive = ""malignant"")","object_name_linter"
"vignettes/tutorial/task.Rmd",89,1,"style","Variable and function name style should be snake_case or CamelCase.","surv.task = makeSurvTask(data = lung, target = c(""time"", ""status""))","object_name_linter"
"vignettes/tutorial/task.Rmd",109,1,"style","Variable and function name style should be snake_case or CamelCase.","yeast.task = makeMultilabelTask(id = ""multi"", data = yeast, target = labels)","object_name_linter"
"vignettes/tutorial/task.Rmd",122,1,"style","Variable and function name style should be snake_case or CamelCase.","cluster.task = makeClusterTask(data = mtcars)","object_name_linter"
"vignettes/tutorial/task.Rmd",147,1,"style","Variable and function name style should be snake_case or CamelCase.","costsens.task = makeCostSensTask(data = df, cost = cost)","object_name_linter"
"vignettes/tutorial/task.Rmd",227,1,"style","Variable and function name style should be snake_case or CamelCase.","cluster.task = subsetTask(cluster.task, subset = 4:17)","object_name_linter"
"vignettes/tutorial/train.Rmd",74,1,"style","Variable and function name style should be snake_case or CamelCase.","ruspini.task = makeClusterTask(data = ruspini)","object_name_linter"
"vignettes/tutorial/train.Rmd",106,1,"style","Variable and function name style should be snake_case or CamelCase.","train.set = sample(n, size = n / 3)","object_name_linter"
"vignettes/tutorial/usecase_regression.Rmd",44,1,"style","Variable and function name style should be snake_case or CamelCase.","regr.task = makeRegrTask(data = BostonHousing, target = ""medv"")","object_name_linter"
"vignettes/tutorial/usecase_regression.Rmd",92,1,"style","Variable and function name style should be snake_case or CamelCase.","tuned.ksvm = makeTuneWrapper(learner = ""regr.ksvm"", resampling = rdesc, measures = meas,","object_name_linter"
"vignettes/tutorial/usecase_regression.Rmd",94,1,"style","Variable and function name style should be snake_case or CamelCase.","tuned.rf = makeTuneWrapper(learner = ""regr.ranger"", resampling = rdesc, measures = meas,","object_name_linter"
"vignettes/tutorial/wrapper.Rmd",56,1,"style","Variable and function name style should be snake_case or CamelCase.","base.lrn = makeLearner(""classif.rpart"")","object_name_linter"
"vignettes/tutorial/wrapper.Rmd",57,1,"style","Variable and function name style should be snake_case or CamelCase.","wrapped.lrn = makeBaggingWrapper(base.lrn, bw.iters = 100, bw.feats = 0.5)","object_name_linter"
"vignettes/tutorial/wrapper.Rmd",81,1,"style","Variable and function name style should be snake_case or CamelCase.","par.set = makeParamSet(","object_name_linter"
"vignettes/tutorial/wrapper.Rmd",85,1,"style","Variable and function name style should be snake_case or CamelCase.","tuned.lrn = makeTuneWrapper(wrapped.lrn, rdesc, mmce, par.set, ctrl)","object_name_linter"
