"filename","line_number","column_number","type","message","line","linter"
"R/fst_table.R",345,13,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!drop | ncol(x) > 1) return(x)","vector_logic_linter"
"R/fst.R",170,1,"style","Variable and function name style should be snake_case or symbols.","write.fst <- function(x, path, compress = 50, uniform_encoding = TRUE) {","object_name_linter"
"R/fst.R",251,21,"style","Variable and function name style should be snake_case or symbols.","    attr(res_table, ""row.names"") <- base::.set_row_names(nr_of_rows)","object_name_linter"
"R/hash.R",36,65,"style","Trailing semicolons are not needed.","      stop(""Please specify an integer value for the hash seed."");","semicolon_linter"
"R/hash.R",42,31,"warning","Conditional expressions require scalar logical operators (&& and ||)","  if (!is.logical(block_hash) | length(block_hash) != 1) {","vector_logic_linter"
"R/hash.R",43,69,"style","Trailing semicolons are not needed.","    stop(""Please specify a logical value for parameter block_hash."");","semicolon_linter"
"R/hash.R",47,62,"style","Trailing semicolons are not needed.","    stop(""Please specify a raw vector as input parameter x."");","semicolon_linter"
"tests/testthat/test_factor.R",21,5,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","  ) }","brace_linter"
"tests/testthat/test_fst.R",23,5,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","  ) }","brace_linter"
"tests/testthat/test_fst.R",30,7,"style","Closing curly-braces should always be on their own line, unless they are followed by an else.","    ) }","brace_linter"
"tests/testthat/test_meta.R",223,17,"style","Use FALSE instead of the symbol F.","  setkey(x, L, F, N)","T_and_F_symbol_linter"
