"filename","line_number","column_number","type","message","line","linter"
"R/as.function.R",30,3,"style","`else` should come on the same line as the previous `}`.","  else if (length(x) == 3) {","brace_linter"
"R/as.function.R",30,8,"style","Either both or neither branch in `if`/`else` should use curly braces.","  else if (length(x) == 3) {","brace_linter"
"R/dataTableBackend.R",28,9,"style","Variable and function name style should be snake_case or symbols.","  names(listOfNames) <- colsTmp","object_name_linter"
"R/FormulaList.R",47,9,"style","Variable and function name style should be snake_case or symbols.","  names(formulaList) <- NULL","object_name_linter"
"R/FormulaList.R",62,3,"style","`else` should come on the same line as the previous `}`.","  else if (is.list(object@.n)) {","brace_linter"
"R/helper.R",22,29,"style","Variable and function name style should be snake_case or symbols.","      S3Part(x, needClass = ""data.frame"") <- data.frame()","object_name_linter"
"R/helper.R",27,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/helper.R",42,5,"style","`else` should come on the same line as the previous `}`.","    else if (!is.null(classOfX)) {","brace_linter"
"R/helper.R",45,5,"style","`else` should come on the same line as the previous `}`.","    else {","brace_linter"
"R/helper.R",81,10,"style","Variable and function name style should be snake_case or symbols.","  S3Part(.Object) <- addTypeCheck(.Object@fun, class(.Object@prototype)) %>%","object_name_linter"
"R/helper.R",87,10,"style","Variable and function name style should be snake_case or symbols.","  S3Part(.Object) <- addTypeCheck(.Object@fun, .Object@type)","object_name_linter"
"R/helper.R",92,11,"style","Compound semicolons are discouraged. Replace them by a newline.","  force(f); force(l)","semicolon_linter"
"R/helper.R",106,11,"style","Compound semicolons are discouraged. Replace them by a newline.","  force(f); force(type)","semicolon_linter"
"R/helper.R",196,10,"style","Variable and function name style should be snake_case or symbols.","  S3Part(.Object) <- formula(tmp, lhs = 1, rhs = 1)","object_name_linter"
"R/helper.R",198,3,"style","Variable and function name style should be snake_case or symbols.","  .Object@.n <- eval(.nUnevaluated, envir = environment(.Object))","object_name_linter"
"R/map.R",111,10,"style","Either both or neither branch in `if`/`else` should use curly braces.","  ind <- if (length(p) == 1 && grepl(""^\\^"", p)) {","brace_linter"
"tests/testthat/test-DataFrame.R",85,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar""] <- datRef$x + 1","object_name_linter"
"tests/testthat/test-DataFrame.R",94,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar""] <- datRef$x + 1","object_name_linter"
"tests/testthat/test-DataFrame.R",95,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar1""] <- datRef$x + 2","object_name_linter"
"tests/testthat/test-DataFrame.R",105,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar""] <- datRef$x + 1","object_name_linter"
"tests/testthat/test-DataFrame.R",106,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar1""] <- datRef$x + 2","object_name_linter"
"tests/testthat/test-DataFrame.R",117,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar""] <- datRef$x + 1","object_name_linter"
"tests/testthat/test-DataFrame.R",118,9,"style","Variable and function name style should be snake_case or symbols.","        datRef[""newVar1""] <- datRef$x + 2","object_name_linter"
"tests/testthat/test-DataFrame.R",126,9,"style","Variable and function name style should be snake_case or symbols.","        datRef$id <- datRef$x > 4","object_name_linter"
"tests/testthat/test-DataFrame.R",128,15,"style","Variable and function name style should be snake_case or symbols.","        names(datRef)[2] <- ""count""","object_name_linter"
"vignettes/Introduction.Rmd",136,1,"style","Variable and function name style should be snake_case or symbols.","DataTable <- function(...) {","object_name_linter"
"vignettes/performance.Rmd",56,1,"style","Variable and function name style should be snake_case or symbols.","N <- 2e7 # more is not possible with small laptop","object_name_linter"
"vignettes/performance.Rmd",57,1,"style","Variable and function name style should be snake_case or symbols.","K <- 100","object_name_linter"
"vignettes/performance.Rmd",60,1,"style","Variable and function name style should be snake_case or symbols.","DT <- data.table(","object_name_linter"
"vignettes/performance.Rmd",61,33,"style","Commas should always have a space after.","  id1 = sample(sprintf(""id%03d"",1:K), N, TRUE),      # large groups (char)","commas_linter"
"vignettes/performance.Rmd",62,33,"style","Commas should always have a space after.","  id2 = sample(sprintf(""id%03d"",1:K), N, TRUE),      # large groups (char)","commas_linter"
"vignettes/performance.Rmd",63,34,"style","Commas should always have a space after.","  id3 = sample(sprintf(""id%010d"",1:(N/K)), N, TRUE), # small groups (char)","commas_linter"
"vignettes/performance.Rmd",63,38,"style","Put spaces around all infix operators.","  id3 = sample(sprintf(""id%010d"",1:(N/K)), N, TRUE), # small groups (char)","infix_spaces_linter"
"vignettes/performance.Rmd",66,17,"style","Put spaces around all infix operators.","  id6 = sample(N/K, N, TRUE),                        # small groups (int)","infix_spaces_linter"
"vignettes/performance.Rmd",69,32,"style","Commas should always have a space after.","  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749","commas_linter"
"vignettes/performance.Rmd",69,35,"style","Put spaces around all infix operators.","  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749","infix_spaces_linter"
"vignettes/performance.Rmd",69,41,"style","Commas should always have a space after.","  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749","commas_linter"
"vignettes/performance.Rmd",74,1,"style","Variable and function name style should be snake_case or symbols.","DT4 <- new(""DataTable"", DT)","object_name_linter"
"vignettes/performance.Rmd",76,29,"style","Commas should always have a space after.","cat(""GB ="", round(sum(gc()[,2]) / 1024, 3), ""\n"")","commas_linter"
"vignettes/performance.Rmd",105,81,"style","Lines should not be more than 80 characters.","system.time(group_by(DT, id4) %>% summarise(V1 = mean(v1), V2 = mean(v2), V3 = mean(v3)))","line_length_linter"
"vignettes/performance.Rmd",106,81,"style","Lines should not be more than 80 characters.","system.time(group_by(DT, id4) %>% summarise(V1 = mean(v1), V2 = mean(v2), V3 = mean(v3)))","line_length_linter"
"vignettes/performance.Rmd",112,81,"style","Lines should not be more than 80 characters.","system.time(group_by(DT, id6) %>% summarise(V1 = sum(v1), V2 = sum(v2), V3 = sum(v3)))","line_length_linter"
"vignettes/performance.Rmd",113,81,"style","Lines should not be more than 80 characters.","system.time(group_by(DT, id6) %>% summarise(V1 = sum(v1), V2 = sum(v2), V3 = sum(v3)))","line_length_linter"
