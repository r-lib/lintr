% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa.R, R/T_and_F_symbol_linter.R,
%   R/assignment_linter.R, R/assignment_spaces_linter.R, R/backport_linter.R,
%   R/closed_curly_linter.R, R/commas_linter.R, R/comment_linters.R,
%   R/cyclocomp_linter.R, R/duplicate_argument_linter.R, R/equals_na_linter.R,
%   R/extraction_operator_linter.R, R/function_left_parentheses.R,
%   R/implicit_integer_linter.R, R/infix_spaces_linter.R,
%   R/line_length_linter.R, R/missing_argument_linter.R,
%   R/missing_package_linter.R, R/namespace_linter.R, R/no_tab_linter.R,
%   R/object_name_linters.R, R/object_usage_linter.R, R/open_curly_linter.R,
%   R/paren_body_linter.R, R/paren_brace_linter.R, R/path_linters.R,
%   R/pipe_call_linter.R, R/pipe_continuation_linter.R,
%   R/semicolon_terminator_linter.R, R/seq_linter.R, R/single_quotes_linter.R,
%   R/spaces_inside_linter.R, R/spaces_left_parentheses_linter.R,
%   R/sprintf_linter.R, R/trailing_blank_lines_linter.R,
%   R/trailing_whitespace_linter.R, R/undesirable_function_linter.R,
%   R/undesirable_operator_linter.R, R/unneeded_concatenation_linter.R
\name{linters}
\alias{linters}
\alias{T_and_F_symbol_linter}
\alias{assignment_linter}
\alias{assignment_spaces}
\alias{backport_linter}
\alias{closed_curly_linter}
\alias{commas_linter}
\alias{commented_code_linter}
\alias{todo_comment_linter}
\alias{cyclocomp_linter}
\alias{duplicate_argument_linter}
\alias{equals_na_linter}
\alias{extraction_operator_linter}
\alias{function_left_parentheses_linter}
\alias{implicit_integer_linter}
\alias{infix_spaces_linter}
\alias{line_length_linter}
\alias{missing_argument_linter}
\alias{missing_package_linter}
\alias{namespace_linter}
\alias{no_tab_linter}
\alias{object_name_linter}
\alias{object_length_linter}
\alias{object_usage_linter}
\alias{open_curly_linter}
\alias{paren_body_linter}
\alias{paren_brace_linter}
\alias{absolute_path_linter}
\alias{nonportable_path_linter}
\alias{pipe_call_linter}
\alias{pipe_continuation_linter}
\alias{semicolon_terminator_linter}
\alias{seq_linter}
\alias{single_quotes_linter}
\alias{spaces_inside_linter}
\alias{spaces_left_parentheses_linter}
\alias{sprintf_linter}
\alias{trailing_blank_lines_linter}
\alias{trailing_whitespace_linter}
\alias{undesirable_function_linter}
\alias{undesirable_operator_linter}
\alias{unneeded_concatenation_linter}
\title{linters}
\usage{
T_and_F_symbol_linter()

assignment_linter()

assignment_spaces()

backport_linter(r_version = getRversion())

closed_curly_linter(allow_single_line = FALSE)

commas_linter()

commented_code_linter()

todo_comment_linter(todo = c("todo", "fixme"))

cyclocomp_linter(complexity_limit = 15L)

duplicate_argument_linter(except = character())

equals_na_linter()

extraction_operator_linter()

function_left_parentheses_linter()

implicit_integer_linter()

infix_spaces_linter()

line_length_linter(length = 80L)

missing_argument_linter(except = c("switch", "alist"))

missing_package_linter()

namespace_linter(check_exports = TRUE, check_nonexports = TRUE)

no_tab_linter()

object_name_linter(styles = c("snake_case", "symbols"))

object_length_linter(length = 30L)

object_usage_linter()

open_curly_linter(allow_single_line = FALSE)

paren_body_linter()

paren_brace_linter()

absolute_path_linter(lax = TRUE)

nonportable_path_linter(lax = TRUE)

pipe_call_linter()

pipe_continuation_linter()

semicolon_terminator_linter(semicolon = c("compound", "trailing"))

seq_linter()

single_quotes_linter()

spaces_inside_linter()

spaces_left_parentheses_linter()

sprintf_linter()

trailing_blank_lines_linter()

trailing_whitespace_linter()

undesirable_function_linter(
  fun = default_undesirable_functions,
  symbol_is_undesirable = TRUE
)

undesirable_operator_linter(op = default_undesirable_operators)

unneeded_concatenation_linter()
}
\arguments{
\item{r_version}{Minimum R version to test for compatibility}

\item{allow_single_line}{if \code{TRUE}, allow an open and closed curly pair
on the same line.}

\item{todo}{Vector of strings that identify TODO comments.}

\item{complexity_limit}{expressions with a cyclomatic complexity higher than
this are linted, defaults to 15. See \code{\link[cyclocomp]{cyclocomp}}.}

\item{except}{a character vector of function names as exceptions.}

\item{length}{the length cutoff to use for the given linter.}

\item{check_exports}{Check if \code{symbol} is exported from \code{namespace} in
\code{namespace::symbol} calls.}

\item{check_nonexports}{Check if \code{symbol} exists in \code{namespace} in
\code{namespace:::symbol} calls.}

\item{styles}{A subset of
\Sexpr[stage=render, results=rd]{lintr:::regexes_rd}. A name should
match at least one of these styles.}

\item{lax}{Less stringent linting, leading to fewer false positives.}

\item{semicolon}{A character vector defining which semicolons to report:\describe{
  \item{compound}{Semicolons that separate two statements on the same line.}
  \item{trailing}{Semicolons following the last statement on the line.}
}}

\item{fun}{Named character vector, where the names are the names of the
undesirable functions, and the values are the text for the alternative
function to use (or \code{NA}).}

\item{symbol_is_undesirable}{Whether to consider the use of an undesirable
function name as a symbol undesirable or not.}

\item{op}{Named character vector, where the names are the names of the undesirable operators,
and the values are the text for the alternative operator to use (or \code{NA}).}
}
\value{
A closure of class 'linter'.
}
\description{
A variety of linters is available in \pkg{lintr}. The most popular ones are readily
accessible through \code{\link{default_linters}}, though there are additional ones you may want
to use.

All the functions listed below are \bold{getters} that return a closure of class 'linter'.
Within a \code{\link{lint}} function call, the linters in use are initialized with the provided
arguments and fed with the source file (provided by \code{\link{get_source_expressions}}).
}
\details{
Available linters
}
\section{Functions}{
\itemize{
\item \code{T_and_F_symbol_linter}: Avoid the symbols \code{T} and \code{F} (for \code{TRUE} and \code{FALSE}).

\item \code{assignment_linter}: Check that \code{<-} is always used for assignment.

\item \code{assignment_spaces}: checks that assignments only have one space before and after

\item \code{backport_linter}: that checks for usage of unavailable functions. Not reliable for testing r-devel dependencies.

\item \code{closed_curly_linter}: Check that closed curly braces are on their own line
unless they follow an else.

\item \code{commas_linter}: check that all commas are followed by spaces, but do not
have spaces before them.

\item \code{commented_code_linter}: Check that there is no commented code outside roxygen
blocks.

\item \code{todo_comment_linter}: Check that the source contains no TODO comments (case-insensitive).

\item \code{cyclocomp_linter}: Check for overly complicated expressions. See
\code{\link[cyclocomp]{cyclocomp}}.

\item \code{duplicate_argument_linter}: checks for duplicate arguments in function calls.

\item \code{equals_na_linter}: that checks for x == NA and x != NA

\item \code{extraction_operator_linter}: Check that the `[[` operator is used when extracting a single element from
an object, not `[` (subsetting) nor `$` (interactive use).

\item \code{function_left_parentheses_linter}: check that all left parentheses in a function call
do not have spaces before them.

\item \code{implicit_integer_linter}: Check that integers are explicitly typed using the form \code{1L} instead of
\code{1}.

\item \code{infix_spaces_linter}: Check that infix operators are surrounded by spaces.

\item \code{line_length_linter}: Check that the line length of both comments and code is
less than length.

\item \code{missing_argument_linter}: checks for missing arguments in function calls.

\item \code{missing_package_linter}: checks for missing packages in \code{library()},
\code{require()}, \code{loadNamespace()} and \code{requireNamespace()} calls.

\item \code{namespace_linter}: check for missing packages and symbols in namespace calls.
Note that using \code{check_exports=TRUE} or \code{check_nonexports=TRUE} will
load packages used in user code so it could potentially change the global state.

\item \code{no_tab_linter}: Check that only spaces are used for indentation, not tabs.

\item \code{object_name_linter}: Check that object names conform to a naming style.

\item \code{object_length_linter}: check that object names are not too long.

\item \code{object_usage_linter}: Check that closures have the proper usage using
\code{\link[codetools]{checkUsage}}. Note that this runs
\code{\link[base]{eval}} on the code, so do not use with untrusted code.

\item \code{open_curly_linter}: Check that opening curly braces are never on their own
line and are always followed by a newline.

\item \code{paren_body_linter}: check that there is a space between right parenthesis and a body expression.

\item \code{paren_brace_linter}: check that there is a space between right
parenthesis and an opening curly brace.

\item \code{absolute_path_linter}: Check that no absolute paths are used (e.g. "/var", "C:\\System", "~/docs").

\item \code{nonportable_path_linter}: Check that file.path() is used to construct safe and portable paths.

\item \code{pipe_call_linter}: that forces explicit calls in magrittr pipes

\item \code{pipe_continuation_linter}: Check that each step in a pipeline is on a new line, or
the entire pipe fits on one line.

\item \code{semicolon_terminator_linter}: Check that no semicolons terminate statements.

\item \code{seq_linter}: Check for \code{1:length(...)}, \code{1:nrow(...)},
\code{1:ncol(...)}, \code{1:NROW(...)} and \code{1:NCOL(...)}
expressions. These often cause bugs when the right-hand side is zero.
It is safer to use \code{\link[base]{seq_len}} or
\code{\link[base]{seq_along}} instead.

\item \code{single_quotes_linter}: Check that only single quotes are used to delimit
string constants.

\item \code{spaces_inside_linter}: Check that parentheses and square brackets do not have
spaces directly inside them.

\item \code{spaces_left_parentheses_linter}: Check that all left parentheses have a space before them
unless they are in a function call.

\item \code{sprintf_linter}: checks for inconsistent number of arguments or
arguments with incompatible types in \code{sprintf} calls.

\item \code{trailing_blank_lines_linter}: Check that there are no trailing blank lines in source
files.

\item \code{trailing_whitespace_linter}: Check that there are no space characters at the end of
source lines.

\item \code{undesirable_function_linter}: Report the use of undesirable functions, e.g.
\code{return}, \code{options}, or \code{sapply} and suggest an alternative.

\item \code{undesirable_operator_linter}: Report the use of undesirable operators, e.g. \code{`:::`} or \code{`<<-`}
and suggest an alternative.

\item \code{unneeded_concatenation_linter}: Check that the \code{c} function is not used without arguments nor with a
single constant.
}}

