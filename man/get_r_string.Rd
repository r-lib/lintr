% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{get_r_string}
\alias{get_r_string}
\title{Extract text from \code{STR_CONST} nodes}
\usage{
get_r_string(s, xpath = NULL)
}
\arguments{
\item{s}{An input string or strings. If \code{s} is an \code{xml_node} or \code{xml_nodeset} and \code{xpath} is \code{NULL},
extract its string value with \code{\link[xml2:xml_text]{xml2::xml_text()}}. If \code{s} is an \code{xml_node} or \code{xml_nodeset}
and \code{xpath} is specified, it is extracted with \code{\link[xml2:xml_find_all]{xml2::xml_find_chr()}}.}

\item{xpath}{An XPath, passed on to \code{\link[xml2:xml_find_all]{xml2::xml_find_chr()}} after wrapping with \code{string()}.}
}
\description{
Convert \code{STR_CONST} \code{text()} values into R strings. This is useful to account for arbitrary
character literals valid since R 4.0, e.g. \verb{R"------[hello]------"}, which is parsed in
R as \code{"hello"}. It is quite cumbersome to write XPaths allowing for strings like this,
so whenever your linter logic requires testing a \code{STR_CONST} node's value, use this
function.
NB: this is also properly vectorized on \code{s}, and accepts a variety of inputs. Empty inputs
will become \code{NA} outputs, which helps ensure that \code{length(get_r_string(s)) == length(s)}.
}
