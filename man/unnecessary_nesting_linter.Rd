% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unnecessary_nesting_linter.R
\name{unnecessary_nesting_linter}
\alias{unnecessary_nesting_linter}
\title{Block instances of excessive nesting}
\usage{
unnecessary_nesting_linter()
}
\description{
Excessive nesting harms readability. Use helper functions or early returns
to reduce nesting wherever possible.
}
\examples{
# will produce lints
code <- "if (A) {\n  stop('A is bad!')\n} else {\n  do_good()\n}"
writeLines(code)
lint(
  text = code,
  linters = unnecessary_nesting_linter()
)

code <- "tryCatch(\n  {\n    foo()\n  },\n  error = identity\n)"
writeLines(code)
lint(
  text = code,
  linters = unnecessary_nesting_linter()
)

# okay
code <- "if (A) {\n  stop('A is bad because a.')\n} else {\n  stop('!A is bad too.')\n}"
writeLines(code)
lint(
  text = code,
  linters = unnecessary_nesting_linter()
)

code <- "capture.output({\n  foo()\n})"
writeLines(code)
lint(
  text = code,
  linters = unnecessary_nesting_linter()
)

}
\seealso{
\itemize{
\item \code{\link[=cyclocomp_linter]{cyclocomp_linter()}} for another linter that penalizes overly complexcode.
\item \link{linters} for a complete list of linters available in lintr.
}
}
\section{Tags}{
\link[=consistency_linters]{consistency}, \link[=readability_linters]{readability}
}
