% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/object_name_linters.R
\name{object_name_linter}
\alias{object_name_linter}
\title{Object name linter}
\usage{
object_name_linter(styles = c("snake_case", "symbols"))
}
\arguments{
\item{styles}{A subset of
\Sexpr[stage=render, results=rd]{lintr:::regexes_rd}. A name should
match at least one of these styles.}
}
\description{
Check that object names conform to a naming style.
The default naming styles are "snake_case" and "symbols".
}
\details{
Note when used in a package, in order to ignore objects imported
from other namespaces, this linter will attempt \code{\link[=getNamespaceExports]{getNamespaceExports()}}
whenever an \code{import(PKG)} statement is found in your NAMESPACE file.
If this fails (e.g., the package is not yet installed), the linter
won't be able to ignore such usages.

Suppose, for example, you have \code{import(upstream)} in your NAMESPACE,
which makes available its exported function
\code{a_really_quite_long_function_name} that you then use in your package.
Then, if \code{upstream} is not installed when this linter runs, a lint
will be thrown on this object (even though you don't "own" its name).

There are three options to get lintr to work correctly:
(1) install the package so that it's available in
the session where this linter is running; (2) always namespace-qualify
usages, because this linter ignores names in \code{pkg::foo()} form; and
(3) use \code{importFrom(pkg, foo)} instead of a blanket \code{import(pkg)} in your
NAMESPACE, because this linter takes these imported names as given;
and of course (3) install the package so that it's available in
the session where this linter is running.
}
\seealso{
\link{linters} for a complete list of linters available in lintr.
}
\section{Tags}{
\link[=configurable_linters]{configurable}, \link[=consistency_linters]{consistency}, \link[=default_linters]{default}, \link[=style_linters]{style}
}
