linters: linters_with_defaults(
    any_duplicated_linter(),
    any_is_na_linter(),
    backport_linter("oldrel-4", except = c("R_user_dir", "str2lang", "str2expression", "deparse1", "...names")),
    consecutive_assertion_linter(),
    expect_comparison_linter(),
    expect_identical_linter(),
    expect_length_linter(),
    expect_named_linter(),
    expect_not_linter(),
    expect_null_linter(),
    expect_s3_class_linter(),
    expect_s4_class_linter(),
    expect_true_false_linter(),
    expect_type_linter(),
    fixed_regex_linter(),
    for_loop_index_linter(),
    if_not_else_linter(),
    implicit_assignment_linter(),
    implicit_integer_linter(),
    keyword_quote_linter(),
    lengths_linter(),
    line_length_linter(120),
    missing_argument_linter(),
    nested_ifelse_linter(),
    numeric_leading_zero_linter(),
    outer_negation_linter(),
    paste_linter(),
    redundant_equals_linter(),
    redundant_ifelse_linter(),
    sort_linter(),
    sprintf_linter(),
    strings_as_factors_linter(),
    undesirable_function_linter(c(Sys.setenv = NA_character_, mapply = NA_character_)),
    unnecessary_nested_if_linter(),
    unnecessary_lambda_linter(),
    unnecessary_concatenation_linter(allow_single_expression = FALSE),
    yoda_test_linter()
  )
exclusions: list(
    "inst/doc/creating_linters.R" = 1,
    "inst/example/bad.R",
    "tests/testthat/default_linter_testcode.R",
    "tests/testthat/dummy_packages",
    "tests/testthat/dummy_projects",
    "tests/testthat/exclusions-test",
    "tests/testthat/knitr_extended_formats",
    "tests/testthat/knitr_formats",
    "tests/testthat/knitr_malformed"
  )
